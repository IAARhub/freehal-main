#
# This file is part of FreeHAL 2010.
#
# Copyright(c) 2006, 2007, 2008, 2009, 2010 Tobias Schulz and contributors.
# http://freehal.org
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

# TEXT
# ~~~~~ MONOLITHIC PARSER CODE ~~~~~
#
# This function returns the next few words from "array words" which are either nouns, acticles, or adjectives.
# CODE

define action entity_chose_end_of_entity with var lang, array words, hash tags, var current_tag, var next_tag, var current_word, var next_word, flag found_subject, var count_of_words_through_looop do
    if flag found_subject do
        do return with 0
    done

    set new flag end_of_entity to 0


    if ( from hash sym_art item { var current_tag } or from hash sym_adj item { var current_tag } ) and from hash sym_noun item { var next_tag } do
        set flag end_of_entity to 0

        do return with flag end_of_entity
    done


    if from hash sym_noun item { var current_tag } do
        set flag end_of_entity to 1
    done

    set new var current_is_name to is_name with var current_word
    if from hash sym_noun item { var current_tag } and from hash sym_noun item { var next_tag } and ( var current_is_name is true and var current_word not matches /_/ ) do
        set flag end_of_entity to 0
    done
    
    if from global hash builtin_entity_ends item { lc(var current_word) } do
        set flag end_of_entity to 1
    done
    
    set new array pairs to global array builtin_entity_ends_pair
    for each new array pair in array pairs do
        
        if lc(var current_word) matches from array pair 1st item or not from array pair 1st item do
            if lc(var next_word) matches from array pair 2nd item or not from array pair 2nd item do
                set flag end_of_entity to 1
            done
        done
    done
    
    set new flag entity_does_not_end to builtin_entity_does_not_end with var current_word, var current_tag
    if flag entity_does_not_end do
        set flag end_of_entity to 0
    done

    do return with flag end_of_entity
done

define action entity_choose_add_current_word with var lang, array words, hash tags, var current_tag, var next_tag, var current_word, var next_word, flag found_subject, var count_of_words_through_looop do
    set new flag add_current_word to 0

    if from hash sym_entity item { var current_tag } or from hash sym_noun item { var next_tag } do
        print "add current word: current is entity OR next is noun" concat new line
        set flag add_current_word to 1
    done
    if from hash sym_entity item { var current_tag } and from hash sym_entity item { var next_tag } do
        print "add current word: current is entity and next is entity" concat new line
        set flag add_current_word to 1
    done
    if from hash sym_linking item { var current_tag } and from hash sym_entity item { var next_tag } do
        print "add current word: current is linking and next is entity" concat new line
        set flag add_current_word to 1
    done
    if from hash sym_verb item { var current_tag } do
        print "not add current word: current is verb" concat new line
        set flag add_current_word to 0
    done
    if from hash sym_prep item { var current_tag } do
        print "not add current word: current is preposition" concat new line
        set flag add_current_word to 0
    done

    if from hash sym_adj item { var current_tag } and var next_word is an empty string do
        print "not add current word: current is adj and next is an empty string" concat new line
        set flag add_current_word to 0
    done
    if from hash sym_adj item { var current_tag } and var next_word matches /aswellas/ and var count_of_words_through_looop is not 1 do
        print "not add current word: current is adj and next is an 'aswellas' variable, and word is first in loop!!" concat new line
        set flag add_current_word to 0
    done
    
    if var lang matches "en" do
        if flag found_subject is true and from global hash builtin_time_place_adverbs item { var current_word } do
            print "not add current word: lang is en and we are in the objects (found_subject=1) and current is time_place_adverb" concat new line
            set flag add_current_word to 0
        done
    done

    do return with flag add_current_word
done


define action parse_using_entity with var lang, array words, hash tags, flag found_subject, var what do
    set var ident to var ident concat '  '
    print var ident
    print "#    "
    print "Begin do parse_using_entity."
    print new line

    # TEXT
    # This will be returned.
    # CODE
    set new hash full_entity to an empty hash
    set from hash full_entity item { "subjects" } to an empty array
    set from hash full_entity item { "objects" } to an empty array
    set from hash full_entity item { "verbs" } to an empty array
    set from hash full_entity item { "adverbs" } to an empty array

    # TEXT
    # Decide whether this entity is a subject or an object
    # CODE
    set new var entity_key_name to "subjects"
    if flag found_subject do
        set var entity_key_name to "objects"
    done

    # TEXT
    # Here the current word and the following word are assigned to variables.
    # CODE
    set new var current_word to from array words 1st item
    set new array current_tag to from hash tags item { var current_word }
    set new var next_word to from array words 2nd item
    set new array next_tag to from hash tags item { var next_word }

    print var ident
    print "#    "
    print 'var entity_key_name: ' concat var entity_key_name concat ' ( ' concat var current_word concat ' -> ' concat var next_word concat ' )'
    print new line


    set new var count_of_words_through_looop to 1
    set new flag add_current_word to entity_choose_add_current_word with var lang, array words, hash tags, from array current_tag 1st item, from array next_tag 1st item, var current_word, var next_word, flag found_subject, var count_of_words_through_looop


    set new flag count to 20
    while flag add_current_word do
    
        set flag count to flag count - 1
        if flag count <= 0 do
            go to last
        done

        print "now:   " concat from array current_tag 1st item concat " - " concat var current_word
        print new line
        print "next:  " concat from array next_tag 1st item concat " - " concat var next_word
        print new line
        set new var _words to join_items with array words
        print "array: " concat var _words
        print new line

        if from hash full_entity item { var entity_key_name } is false do
            set from hash full_entity item { var entity_key_name } to an empty array
        done
        push into that array: ( from hash full_entity item { var entity_key_name } ) end-items-of, [ var current_word ]
        shift from array words

        if from global hash builtin_entity_ends item { lc(var current_word) } do
            set flag found_subject to 1
            set var entity_key_name to "subjects"
            if flag found_subject do
                set var entity_key_name to "objects"
            done
        done

        set new flag end_of_entity to 0
        if flag found_subject is false do
            set flag end_of_entity to entity_chose_end_of_entity with var lang, array words, hash tags, from array current_tag 1st item, from array next_tag 1st item, var current_word, var next_word, flag found_subject, var count_of_words_through_looop
        done

        if flag end_of_entity do
            set flag found_subject to 1
        done

        set var entity_key_name to "subjects"
        if flag found_subject do
            set var entity_key_name to "objects"
        done

        set var current_word to from array words 1st item
        set array current_tag to from hash tags item { var current_word }
        set var next_word to from array words 2nd item
        set array next_tag to from hash tags item { var next_word }

        set var count_of_words_through_looop to var count_of_words_through_looop + 1
        set flag add_current_word to entity_choose_add_current_word with var lang, array words, hash tags, from array current_tag 1st item, from array next_tag 1st item, var current_word, var next_word, flag found_subject, var count_of_words_through_looop

        if flag end_of_entity do
            print "End of Entity." concat new line
            set flag add_current_word to 0
        done
    done

    print "end of loop."
    print new line
    print "now:   " concat from array current_tag 1st item concat " - " concat var current_word
    print new line
    print "next:  " concat from array next_tag 1st item concat " - " concat var next_word
    print new line
    set new var _words to join_items with array words
    print "array: " concat var _words
    print new line

    if from global hash builtin_entity_ends item { lc(var current_word) } do
        set flag found_subject to 1
        set var entity_key_name to "subjects"
        if flag found_subject do
            set var entity_key_name to "objects"
        done
    done

    set new array pairs to global array builtin_entity_ends_pair
    for each new array pair in array pairs do
        
        if lc(var current_word) matches from array pair 1st item or not from array pair 1st item do
            if lc(var next_word) matches from array pair 2nd item or not from array pair 2nd item do
                set flag found_subject to 1
                set var entity_key_name to "subjects"
                if flag found_subject do
                    set var entity_key_name to "objects"
                done
            done
        done
    done

    # TEXT
    # The subject ends when there is a noun which is followed by an adjective or an adverb or a verb or nothing.
    # CODE
    if from hash sym_noun item { from array current_tag item [ const TYPE ] } do
    #    if from hash sym_verb item { from array next_tag item [ const TYPE ] } do
    #        if (not items of that array: from hash full_entity item { var entity_key_name } end-items-of) or (not from hash full_entity item { var entity_key_name } item [ items of that array: from hash full_entity item { var entity_key_name } end-items-of - 1 ] 1st item matches var current_word) do
    #            push into that array: ( from hash full_entity item { var entity_key_name } ) end-items-of, [ var current_word ]
    #            shift from array words
    #        done
    #    done
    done
    if from hash sym_noun item { from array current_tag item [ const TYPE ] } do
        if from hash sym_adj item { from array next_tag item [ const TYPE ] } || from hash sym_art item { from array next_tag item [ const TYPE ] } || from hash sym_verb item { from array next_tag item [ const TYPE ] } || from hash sym_prep item { from array next_tag item [ const TYPE ] } do
            set flag found_subject to 1
        done
    done
    
    # TEXT
    # The subject ends when the current word is an article and the next one is a verb
    # CODE
    if from hash sym_art item { from array current_tag item [ const TYPE ] } do
        if from hash sym_verb item { from array next_tag item [ const TYPE ] } do
            set flag found_subject to 1
        done
    done
    
    # TEXT
    # The subject ends when the current word is an adjective/adverb and the next one is a verb
    # CODE
    if from hash sym_adj item { from array current_tag item [ const TYPE ] } do
        if from hash sym_verb item { from array next_tag item [ const TYPE ] } do
            set flag found_subject to 1
        done
    done
    
    if not var what matches "nothing" do

        # TEXT
        # In "hash parsed" there will be the next word, if it's also either a noun, an adjective or an article.
        # Otherwise it will be empty
        # CODE
        set new hash parsed to parse_what with var lang, array words, hash tags, var what, flag found_subject
        if hash parsed is false or is an empty hash parsed do
            # TEXT
            # It's empty. The "1", which is returned as the second array element,
            # means that there's another following part of speech, probably a verb
            # CODE

            print var ident
            print "#    "
            print "End do parse_using_entity."
            print new line
            set var ident to var ident concat "\b\b"
            do return using [ hash full_entity, 1 ]
        done
        else if hash parsed do
            # TEXT
            # It's not empty. The "0" means that we are at the end of the sentence.
            # In "hash parsed", there is the last word, either a noun, an adjective or an article.
            # CODE
            
            set new array keys to [ keys of hash parsed ]
            for each new var key in array keys do
                set new array new_value to from hash full_entity item { var key }
                push into array new_value, items of that array: from hash parsed item { var key } end items of
                set from hash full_entity item { var key } to array new_value
            done
        done
    done
        
    print var ident
    print "#    "
    print "End do parse_using_entity."
    print new line
    set var ident to var ident concat "\b\b"
    do return using [ hash full_entity, 0 ]
done

define action parse_using_verb with var lang, array words, hash tags, flag found_subject do
    set var ident to var ident concat '  '
    print var ident
    print "#    "
    print "Begin do parse_using_verb."
    print new line
    
    set new array full_entity to an empty array
    
    set new var current_word to from array words 1st item
    push into array full_entity, [ var current_word ]
    shift from array words
    
    print var ident
    print "#    "
    print "End do parse_using_verb."
    print new line
    set var ident to var ident concat "\b\b"
    do return using array full_entity
done

define action parse_using_preposition with var lang, array words, hash tags, flag found_subject do
    set var ident to var ident concat '  '
    print var ident
    print "#    "
    print "Begin do parse_using_preposition."
    print new line
    
    # TEXT
    # This will be returned.
    # CODE
    set new hash full_entity to an empty hash
    set from hash full_entity item { "subjects" } to an empty array
    set from hash full_entity item { "objects" } to an empty array
    set from hash full_entity item { "verbs" } to an empty array
    set from hash full_entity item { "adverbs" } to an empty array

    # TEXT
    # Participle constructions, prepositions and adverbs are the same in FreeHAL english and FreeHAL german.
    # CODE
    set new var entity_key_name to "adverbs"

    # TEXT
    # It is known that the next word WILL be either a noun, an adjective or an article.
    # So push it into "hash full_entity"
    # CODE
    set new var current_word to from array words 1st item
    set new array current_tag to from hash tags item { var current_word }
    set new var next_word to from array words 2nd item
    set new array next_tag to from hash tags item { var next_word }

    set new var entity to var current_word
    shift from array words
    
    if from hash sym_adj item { from array current_tag item [ const TYPE ] } do
        # The word is an adverb. Do nothing.
    done
    if from hash sym_prep item { from array current_tag item [ const TYPE ] } do
    
        # The word is a preposition. Search an entitiy after this word.
        set new hash parsed to parse_what with var lang, array words, hash tags, "entity", flag found_subject
        
        if hash parsed and that hash is not empty: hash parsed end check do
            # TEXT
            # It's not empty.
            # In "hash parsed", there is the last word, either a noun, an adjective or an article.
            # CODE
            
            if not from hash parsed item { "questionword" } do
                set from hash parsed item { "questionword" } to an empty array
            done
            if not that array is empty: from hash parsed item { "questionword" } end check do
                # TEXT
                # A question word was found! DO NOT add everything to the "adverbs" column.
                # Instead, add everything where it fits best.
                # CODE
                print "A question word was found! DO NOT add everything to the \"adverbs\" column."
                print new line
                print "Instead, add everything where it fits best."
                print new line
                
                set new array keys to [ keys of hash parsed ]
                for each new var key in array keys do
                    set new array new_value to from hash full_entity item { var key }
                    push into array new_value, items of that array: from hash parsed item { var key } end items of
                    set from hash full_entity item { var key } to array new_value
                done
            done
            else do
                # TEXT
                # No question word found...
                # Add everything to the \"adverbs\" column.
                # CODE
                print "No question word found..."
                print new line
                print "Add everything to the \"adverbs\" column."
                print new line
                
                set new flag found_an_article to 0
                set new array keys to [ 'adverbs', 'subjects', 'objects' ]
                for each new var key in array keys do
                    if from hash parsed item { var key } do
                        set new array new_value to from hash parsed item { var key }
                        for each new var value in array new_value is rw do
                            set var value to from array value 1st item

                            if from hash sym_art item { from hash tags item { var next_word } item [ const TYPE ] } do
                                set flag found_an_article to 1
                            done

                            print "Found a value: " concat var value
                            print new line
                        done
                        # push into array new_value, items of that array: [ values items of hash parsed ] 1st item end items of
                        if is not an empty array new_value do
                            set var entity to var entity concat ' ' concat do join using " ", items of array new_value
                        done
                    done
                done
                
                # TEXT
                # Example for this feature: durch die 1905 _entwickelte_ Relativitaetstheorie
                # CODE
                if flag found_an_article is true and from hash sym_verb item { from hash tags item { from array words 1st item } 1st item } and from array words 1st item not matches "=" and not from hash sym_art item { from hash tags item { from array words 2nd item } 1st item } do
                    print "Verb-inside feature activated."
                    print new line
                    print "Example for this feature: durch die 1905 _entwickelte_ Relativitaetstheorie."
                    print new line
                    if from hash sym_noun item { from hash tags item { from array words 2nd item } 1st item } do
                        set var entity to var entity concat ' ' concat from array words 1st item
                        do shift with items of array words
                        set var entity to var entity concat ' ' concat from array words 1st item
                        do shift with items of array words
                    done
                done
                if from hash sym_linking item { from hash tags item { from array words 1st item } 1st item } do
                    set var entity to var entity concat ' ' concat from array words 1st item
                    do shift with items of array words
                done
                
            done
        done
    done

    set from hash full_entity item { var entity_key_name } to [ [ var entity ] ]

    print var ident
    print "#    "
    print "End do parse_using_preposition."
    print new line
    set var ident to var ident concat "\b\b"
    do return using [ hash full_entity, 0 ]
done

define action parse_using_questionword with var lang, array words, hash tags, flag found_subject do
    set var ident to var ident concat '  '
    print var ident
    print "#    "
    print "Begin do parse_using_questionword."
    print new line
    
    # TEXT
    # This will be returned.
    # CODE
    set new hash full_entity to an empty hash
    set from hash full_entity item { "subjects" } to an empty array
    set from hash full_entity item { "objects" } to an empty array
    set from hash full_entity item { "verbs" } to an empty array
    set from hash full_entity item { "adverbs" } to an empty array

    # TEXT
    # It is known that the next word WILL be either a noun, an adjective or an article.
    # So push it into "hash full_entity"
    # CODE
    set new var current_word to from array words 1st item
    set new array current_tag to from hash tags item { var current_word }
    set new var next_word to from array words 2nd item
    set new array next_tag to from hash tags item { var next_word }
    set new var nextnext_word to from array words item [ 2 ]
    set new array nextnext_tag to from hash tags item { var nextnext_word }

    shift from array words
    if from hash sym_adj item { from array next_tag item [ const TYPE ] } and not from hash sym_noun item { from array nextnext_tag item [ const TYPE ] } do
        # The word is an adverb. Fetch it.
        set from hash full_entity item { "extra" } to [ [ var next_word ] ]
        shift from array words
    done
    if from hash sym_noun item { from array next_tag item [ const TYPE ] } and not from hash val_omit item { lc(var next_word) } do
        if from hash sym_verb item { from array nextnext_tag item [ const TYPE ] } do
            # The word is a noun folowed by a verb. Fetch it.
            set from hash full_entity item { "extra" } to [ [ var next_word ] ]
            shift from array words
        done
    done
    
    set from hash full_entity item { "questionword" } to [ [ lc(var current_word) ] ]

    print var ident
    print "#    "
    print "End do parse_using_questionword."
    print new line
    set var ident to var ident concat "\b\b"
    do return using [ hash full_entity, 0 ]
done

define action parse_using_keyword with var lang, array words, hash tags, flag found_subject do
    set var ident to var ident concat '  '
    print var ident
    print "#    "
    print "Begin do parse_using_keyword."
    print new line
    
    # TEXT
    # This will be returned.
    # CODE
    set new hash full_entity to an empty hash
    set from hash full_entity item { "subjects" } to an empty array
    set from hash full_entity item { "objects" } to an empty array
    set from hash full_entity item { "verbs" } to an empty array
    set from hash full_entity item { "adverbs" } to an empty array
    set from hash full_entity item { "extra" } to an empty array

    # TEXT
    # It is known that the next word WILL be either a noun, an adjective or an article.
    # So push it into "hash full_entity"
    # CODE
    shift from array words
    set new var current_word to from array words 1st item
    set new array current_tag to from hash tags item { var current_word }
    set new var next_word to from array words 2nd item
    set new array next_tag to from hash tags item { var next_word }

        # Fetch all words.
    while var current_word do
        push into that array: from hash full_entity item { "extra" } end-items-of, [ var current_word ]
        shift from array words
        set var current_word to from array words 1st item
        set array current_tag to from hash tags item { var current_word }
        set var next_word to from array words 2nd item
        set array next_tag to from hash tags item { var next_word }
        
        if from hash sym_prep item { from array current_tag 1st item } do
            go to last
        done
        if from hash sym_verb item { from array current_tag 1st item } do
            go to last
        done
    done
    
    print var ident
    print "#    "
    print "End do parse_using_keyword."
    print new line
    set var ident to var ident concat "\b\b"
    do return using [ hash full_entity, 0 ]
done

define action parse_what with var lang, array words, hash tags, var what, flag found_subject do
    do be_slow without arguments

    set var ident to var ident concat '  '
    print var ident
    print "#    "
    print 'Begin do parse_what: flag found_subject is ' concat flag found_subject concat ', var what is ' concat var what
    print new line

    if length(var ident) > 200 do
        print STDERR "Something is going wrong here (ident > 200)!" concat new line
        print STDERR "words:" concat new line
        for each new var word in array words do
            print STDERR "- " concat var word concat " (" concat from hash tags item { var word } concat ")" concat new line
        done
        print STDERR "f-s: " concat flag found_subject concat new line
        set new array na to an empty array
        set items of array words to items of array na
        set var ident to ""
        do return with 0
    done

    set new hash parsed to an empty hash
    set from hash parsed item { "subjects" } to an empty array
    set from hash parsed item { "objects" } to an empty array
    set from hash parsed item { "verbs" } to an empty array
    set from hash parsed item { "adverbs" } to an empty array

    set new var go_on to 1
    while var go_on do
    
        do be_slow without arguments

        set new var current_word to from array words 1st item
        set new array current_tag to from hash tags item { var current_word }
        set new var next_word to from array words 2nd item
        set new array next_tag to from hash tags item { var next_word }
        
        if not var current_word do
            print var ident
            print "#    "
            print "End do parse_what(->3)."
            print new line
            set var ident to var ident concat "\b\b"
            if is an empty hash parsed do
                do return using undef
            done
            else do
                do return using hash parsed
            done
        done

        print var ident
        print "#    "
        print "  :: current " concat var current_word concat " - " concat from array current_tag item [ const TYPE ]
        print new line

        if from hash sym_keyword item { var current_word } do
            set ( new hash add_parsed, new var go_on ) to array-returning parse_using_keyword using var lang, array words, hash tags, flag found_subject
            set new array keys to [ keys of hash add_parsed ]
            for each new var key in array keys do
                set new array new_value to from hash parsed item { var key }
                push into array new_value, items of that array: from hash add_parsed item { var key } end items of
                set from hash parsed item { var key } to array new_value
            done
            
            if var current_word matches "ENUMALL" do
                do unshift using items of that array: from hash parsed item { "extra" } end-items-of, [ var current_word ]
            done
        done
        else if from hash sym_adj item { from array current_tag item [ const TYPE ] } and var next_word matches /aswellas/ do

            if var what matches "entity" do
                print var ident
                print "#    "
                print "End do parse_what(->8-1)."
                print new line
                set var ident to var ident concat "\b\b"
                do return using hash parsed
            done
            
            set ( new hash add_parsed, new var go_on ) to array-returning parse_using_entity using var lang, array words, hash tags, flag found_subject, var what
            set new array keys to [ keys of hash add_parsed ]
            for each new var key in array keys do
                set new array new_value to from hash parsed item { 'adverbs' }
                push into array new_value, items of that array: from hash add_parsed item { var key } end items of
                set from hash parsed item { 'adverbs' } to array new_value
            done
        done
        else if from global hash builtin_time_place_adverbs item { var current_word } or (from hash sym_adj item { from array current_tag item [ const TYPE ] } and builtin_has_time_place_adverbs_suffix(var current_word)) or (from hash sym_adj item { from array current_tag item [ const TYPE ] } and var next_word is an empty string) or var current_word matches /^in_/ or ( from hash sym_adj item { from array current_tag item [ const TYPE ] } and not from hash sym_entity item { from array next_tag item [ const TYPE ] } ) do

            print "----" concat new line
            print from global hash builtin_time_place_adverbs item { var current_word }
            print new line
            print (from hash sym_adj item { from array current_tag item [ const TYPE ] } and builtin_has_time_place_adverbs_suffix(var current_word))
            print new line
            print (from hash sym_adj item { from array current_tag item [ const TYPE ] } and var next_word is an empty string)
            print new line
            print var current_word matches /^in_/
            print new line
            print ( from hash sym_adj item { from array current_tag item [ const TYPE ] } and not from hash sym_entity item { from array next_tag item [ const TYPE ] } )
            print new line
            print "----" concat new line
        
            if var what matches "entity" do
                print var ident
                print "#    "
                print "End do parse_what(->2-1)."
                print new line
                set var ident to var ident concat "\b\b"
                do return using hash parsed
            done
            
            set ( new hash add_parsed, new var go_on ) to array-returning parse_using_preposition using var lang, array words, hash tags, flag found_subject
            set new array keys to [ keys of hash add_parsed ]
            for each new var key in array keys do
                set new array new_value to from hash parsed item { var key }
                push into array new_value, items of that array: from hash add_parsed item { var key } end items of
                set from hash parsed item { var key } to array new_value
            done
        done
        else if from hash sym_entity item { from array current_tag item [ const TYPE ] } do
            set ( new hash add_parsed, new var go_on ) to array-returning parse_using_entity using var lang, array words, hash tags, flag found_subject, var what
            set new array keys to [ keys of hash add_parsed ]
            for each new var key in array keys do
                set new array new_value to from hash parsed item { var key }
                push into array new_value, items of that array: from hash add_parsed item { var key } end items of
                if from hash add_parsed item { var key } and from hash add_parsed item { var key } 1st item do
                    print "adding to: ", var key, " data: ", from hash add_parsed item { var key } 1st item 1st item
                done
                print new line
                set from hash parsed item { var key } to array new_value
            done

            if var what matches "nothing" do
                if from hash sym_noun item { from array current_tag item [ const TYPE ] } do
                    print var ident
                    print "#    "
                    print "End do parse_what(->6)."
                    print new line
                    set var ident to var ident concat "\b\b"
                    do return using hash parsed
                done
            done

            if var what matches "entity" do
                print var ident
                print "#    "
                print "End do parse_what(->3)."
                print new line
                set var ident to var ident concat "\b\b"
                do return using hash parsed
            done
        done
        else if from hash sym_linking item { from array current_tag item [ const TYPE ] } do
            set ( new hash add_parsed, new var go_on ) to array-returning parse_using_entity using var lang, array words, hash tags, flag found_subject, var what
            set new array keys to [ keys of hash add_parsed ]
            for each new var key in array keys do
                set new array new_value to from hash parsed item { var key }
                push into array new_value, items of that array: from hash add_parsed item { var key } end items of
                set from hash parsed item { var key } to array new_value
            done

            if var what matches "nothing" do
                if from hash sym_noun item { from array current_tag item [ const TYPE ] } do
                    print var ident
                    print "#    "
                    print "End do parse_what(->5)."
                    print new line
                    set var ident to var ident concat "\b\b"
                    do return using hash parsed
                done
            done

            if var what matches "entity" do
                print var ident
                print "#    "
                print "End do parse_what(->3)."
                print new line
                set var ident to var ident concat "\b\b"
                do return using hash parsed
            done
        done
        else if from hash sym_questionword item { from array current_tag item [ const TYPE ] } do
            if var what matches "entity" do
                print var ident
                print "#    "
                print "End do parse_what(-> found questionword)."
                print new line
                set var ident to var ident concat "\b\b"
                do return using hash parsed
            done

            set ( new hash add_parsed, new var go_on ) to array-returning parse_using_questionword using var lang, array words, hash tags, flag found_subject
            set new array keys to [ keys of hash add_parsed ]
            for each new var key in array keys do
                set new array new_value to from hash parsed item { var key }
                push into array new_value, items of that array: from hash add_parsed item { var key } end items of
                set from hash parsed item { var key } to array new_value
            done
        done
        else if from hash sym_prep item { from array current_tag item [ const TYPE ] } do
            if var what matches "entity" do
                print var ident
                print "#    "
                print "End do parse_what(-> found prep)."
                print new line
                set var ident to var ident concat "\b\b"
                do return using hash parsed
            done
            
            set ( new hash add_parsed, new var go_on ) to array-returning parse_using_preposition using var lang, array words, hash tags, flag found_subject
            set new array keys to [ keys of hash add_parsed ]
            for each new var key in array keys do
                set new array new_value to from hash parsed item { var key }
                push into array new_value, items of that array: from hash add_parsed item { var key } end items of
                set from hash parsed item { var key } to array new_value
            done
            
            set new var preposition to var current_word
            set var current_word to from array words 1st item
            set array current_tag to from hash tags item { var current_word }
            set var next_word to from array words 2nd item
            set array next_tag to from hash tags item { var next_word }
            while from hash sym_linking item { from array current_tag item [ const TYPE ] } do
                set from array words 1st item to var preposition concat " " concat from array words 1st item
                set ( new hash add_parsed, new var go_on ) to array-returning parse_using_preposition using var lang, array words, hash tags, flag found_subject
                set new array keys to [ keys of hash add_parsed ]
                for each new var key in array keys do
                    set new array new_value to from hash parsed item { var key }
                    push into array new_value, items of that array: from hash add_parsed item { var key } end items of
                    set from hash parsed item { var key } to array new_value
                done

                set var current_word to from array words 1st item
                set array current_tag to from hash tags item { var current_word }
                set var next_word to from array words 2nd item
                set array next_tag to from hash tags item { var next_word }
            done
        done
        else if from hash sym_verb item { from array current_tag item [ const TYPE ] } do
            if var what matches "nothing" do
                print var ident
                print "#    "
                print "End do parse_what(->2-2)."
                print new line
                set var ident to var ident concat "\b\b"
                do return using hash parsed
            done
            if var what matches "entity" do
                print var ident
                print "#    "
                print "End do parse_what(->2-3)."
                print new line
                set var ident to var ident concat "\b\b"
                do return using hash parsed
            done

            set new array add_parsed to parse_using_verb using var lang, array words, hash tags, flag found_subject

            if that array is not empty: from hash parsed item { "subjects" } end check do
                set flag found_subject to 1
            done

            if not from hash parsed item { "verbs" } do
                set from hash parsed item { "verbs" } to an empty array
            done
            push into that array: from hash parsed item { "verbs" } end-items-of, items of array add_parsed
        done
        else do
            print var ident
            print "#    "
            print "Unknown part of speech: " concat var current_word concat "(-> " concat from array current_tag item [ const TYPE ] concat ")"
            print new line
            shift from array words
        done
    end loop

    print var ident
    print "#    "
    print "End do parse_what(->1)."
    print new line
    set var ident to var ident concat "\b\b"

    do return using hash parsed
done

define action pre_parse with array list_of_words, hash tags, var lang, var path do
    set new array list_of_list_of_words to an empty array
    set new array list_of_questionwords to an empty array
    push into array list_of_list_of_words, an empty array
    push into array list_of_questionwords, an empty array
    set new var array_index to 0

    set var ident to ""

    set new var i to 0
    for each new var word in array list_of_words is rw do

if from hash sym_linking item { from hash tags item { var word } 1st item } do
    print "linking: " concat var word concat new line
    print "then:    " concat from array list_of_words item [ var i + 1 ] concat new line
    print "then:    " concat from hash tags item { from array list_of_words item [ var i + 1 ] } 1st item concat new line
    print "verb:    " concat from hash sym_verb item { from hash tags item { from array list_of_words item [ var i + 1 ] } 1st item } concat new line
done


        if from hash sym_linking item { from hash tags item { var word } 1st item } and from hash sym_verb item { from hash tags item { from array list_of_words item [ var i - 1 ] } 1st item } and from hash sym_entity item { from hash tags item { from array list_of_words item [ var i + 1 ] } 1st item } do
            set var array_index to var array_index + 1
            push into array list_of_list_of_words, an empty array
#            push into array list_of_questionwords, items of that array: from array list_of_questionwords item [ var array_index - 1 ] if not then an empty array end of array
        done
        else if from hash sym_linking item { from hash tags item { var word } 1st item } and from hash sym_verb item { from hash tags item { from array list_of_words item [ var i - 1 ] } 1st item } and from hash sym_prep item { from hash tags item { from array list_of_words item [ var i + 1 ] } 1st item } do
            set var array_index to var array_index + 1
            push into array list_of_list_of_words, an empty array
#            push into array list_of_questionwords, items of that array: from array list_of_questionwords item [ var array_index - 1 ] if not then an empty array end of array
        done
        else if from hash sym_linking item { from hash tags item { var word } 1st item } and from hash sym_verb item { from hash tags item { from array list_of_words item [ var i + 1 ] } 1st item } do
            set var array_index to var array_index + 1
            push into array list_of_list_of_words, an empty array
#            push into array list_of_questionwords, items of that array: from array list_of_questionwords item [ var array_index - 1 ] if not then an empty array end of array
        done
        else if from hash sym_linking item { from hash tags item { var word } 1st item } and from hash sym_entity item { from hash tags item { from array list_of_words item [ var i + 1 ] } 1st item } do
            # A is B and C and D and E and F
            set var array_index to var array_index + 1
            push into array list_of_list_of_words, an empty array
#            if from array list_of_questionwords item [ var array_index - 1 ] do
#                push into array list_of_questionwords, items of that array: from array list_of_questionwords item [ var array_index - 1 ] end-items-of
#            done
            
            print "Template found: 'A is B and C and D and E and F'."
            print new line
            
            # set current part to last part
            do push into that array: from array list_of_list_of_words item [ var array_index ] end-items-of, items of that array: from array list_of_list_of_words item [ var array_index - 1 ] end-items-of,
            
            # current part (= last part) has an article near the end?
            set new var part_size to size of that array: from array list_of_list_of_words item [ var array_index ] end-items-of
            # "near the end" is defined as 4 words
            set new var near_end to var part_size - 4
            if var near_end < 0 do
                set var near_end to 0
            done
            
            set new var the_end to -1
            set new var d to var part_size - 1
            while var d >= var near_end do
                set new var word_d to from array list_of_list_of_words item [ var array_index ] item [ var d ]
                
                if from hash sym_art item { from hash tags item { var word_d } 1st item } do
                    set var the_end to var d
                done
                
                set var d to var d - 1
            done
            
            if not var the_end is -1 do
                print "found an article."
                print new line
            done
            
            # found an article? if not, search last adjective
            if var the_end is -1 do
                print "found no article."
                print new line
                
                set new var d to var part_size - 1
                while var d >= var near_end do
                    set new var word_d to from array list_of_list_of_words item [ var array_index ] item [ var d ]
                    
                    if from hash sym_adj item { from hash tags item { var word_d } 1st item } do
                        set var the_end to var d
                    done
                    
                    set var d to var d - 1
                done
            done

            if not var the_end is -1 do
                print "found an adjective."
                print new line
            done

            # found an adjective? if not, search last noun
            if var the_end is -1 do
                print "found no adjective."
                print new line
                
                set new var d to var part_size - 1
                while var d >= var near_end do
                    set new var word_d to from array list_of_list_of_words item [ var array_index ] item [ var d ]
                    
                    if from hash sym_noun item { from hash tags item { var word_d } 1st item } do
                        set var the_end to var d
                    done
                    if from hash sym_verb item { from hash tags item { var word_d } 1st item } do
                        go to last
                    done
                    
                    set var d to var d - 1
                done
            done
            
            if not var the_end is -1 do
                print "found a noun."
                print new line
            done
            else do
                print "found no noun."
                print new line
            done

            # found anything?
            if not var the_end is -1 do
                # then cut off the rest
                set new var diff to var part_size - var the_end
                for 1 .. var diff do
                    do pop using items of that array: from array list_of_list_of_words item [ var array_index ] end-items-of
                done
            done
        done
        else do
            do push into that array: from array list_of_list_of_words item [ var array_index ] end-items-of, var word
            
            if from hash sym_questionword item { from hash tags item { var word } 1st item } do
                do push into that array: from array list_of_questionwords item [ var array_index ] end-items-of, var word
            done
        done

        set var i to var i + 1
    done
    
    print new line
    print "Pre-Parser (index: var array_index size: "
    set new var temp_size to items of array list_of_list_of_words
    print var temp_size
    print ")"
    print new line
    print "-------------------------------------------------------"
    print new line
    for each new var subarray in array list_of_list_of_words do
        print "- "
        for each new var subitem in array subarray do
            print var subitem
            print ", "
        done
        print new line
    done
    print "-------------------------------------------------------"
    print new line
    print new line
    
    do return with array list_of_list_of_words
done

define action parse with var lang, array words, hash tags do
    set new hash parsed to an empty hash

    set var ident to ""


    # TEXT
    # In German, there are many verbs which are sometimes written as
    # "$prefix$verb", but also as "$verb $prefix" (as two words).
    # Changing the second form into the first one is done by
    # first searching the prefixes and then prepending them to the verb.
    # <br /><br />
    # Search prefixes:
    # CODE
    
    set new var prefix to ''
    
    set new array words_correct to an empty array
    set new var i to 0
    for each new var word in array words is copy do
        if from global hash builtin_verb_prefixes item { lc(var word) } and from array words item [ var i + 1 ] matches "" do
            # TEXT
            # It is a prefix.
            # CODE
            
            if var word do
                set var prefix to var word
            done
        done
        else do
            # TEXT
            # It's another word. Add it to the new words array.
            # CODE
            
            push into array words_correct, var word
        done
        set var i to var i + 1
    done
    
    
    
    # TEXT
    # Add prefixes to the verb(s):
    # CODE
    if var prefix do
        set array words to [ items of array words_correct ]
        set array words_correct to an empty array
        for each new var word in array words is copy do
            if from hash sym_verb item { from hash tags item { var word } 1st item } do
                # TEXT
                # It is a verb.
                # CODE
                
                set from hash tags item { var prefix concat var word } to from hash tags item { var word }
                
                set var word to var prefix concat var word
            done

            push into array words_correct, var word
        done
    done
    
    set hash parsed to parse_what using var lang, array words_correct, hash tags, "full", 0
    DEBUG VAR: hash parsed STOP DEBUG
    if hash parsed is false do
        set hash parsed to fake_hash_parsed without arguments
    done
    do return using hash parsed
done

