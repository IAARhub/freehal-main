#
# This file is part of FreeHAL 2010.
#
# Copyright(c) 2006, 2007, 2008, 2009, 2010 Tobias Schulz and contributors.
# http://freehal.org
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

define action phrase with var lang, var path, var mode, array results, hash parsed do
    set new array phrases to an empty array
    set new array additional_results to an empty array
    
    set new var i to 1
    while var i >= 0 do
        for each new array result in array results do
            set new flag add_result to 0
        
            set new array copy_result to an empty array
            set new var primary_key to shift with items of array result
            push into array copy_result, var primary_key
            for each new array clause in array result do
            
                if from array clause 1st item matches /is<[-]>(part|own)/ do
                    set flag add_result to 1
                done
                
                do regex with from array clause 1st item: /is<[-]>(part|own)(<[-]><[0-9]>)?/ -> "is-$0-var i" :global:i
                
                set new array copy_clause to an empty array
                push into array copy_clause, items of array clause
                push into array copy_result, array copy_clause
            done
            do unshift with items of array result, from array copy_result 1st item
            
            if flag add_result is true and var i do
                push into array additional_results, array copy_result
            done
        done
        
        set var i to var i - 1
    done
    
    push into array results, items of array additional_results

    # TEXT
    # Iterate through all results.
    # CODE
    for each new array result in array results do
        set new var primary_key to shift with items of array result

        set new var final_sentence to ""
        
        for each new array clause in array result do
            set new array sentence to an empty array

            # TEXT
            # Tag and sort all verbs.
            # CODE
            set new array raw_verbs to [ split ' ', from array clause 1st item ]
            set new array proper_verbs to an empty array
            set new hash auxiliary_verbs_hash to an empty hash
            
            for each new var verb in array raw_verbs do
                if var verb matches /=>/ do
                    # TEXT
                    # We have such a sentence:
                    # "Clause to match , => Clause to print"
                    # SO we have to remove the first one
                    # CODE
                    set var final_sentence to ""
                done
                
                if var verb matches /([01])([01])([01])([01])([01])$/ do
                    set new var person to get_person with from array clause 2nd item
                    if var person matches "3s" do
                        set var person to get_person with hash parsed item { 'subjects' } 1st item
                    done
                    
                    set new var is_want to $0
                    set new var is_must to $1
                    set new var is_can to $2
                    set new var is_may to $3
                    set new var is_should to $4
                    
                    if var is_want do
                        set new var new_verb to get_verb with "want", var person
                        if var new_verb do
                            set from hash auxiliary_verbs_hash item { var new_verb } to 1
                        done
                    done
                    
                    if var is_must do
                        set new var new_verb to get_verb with "must", var person
                        if var new_verb do
                            set from hash auxiliary_verbs_hash item { var new_verb } to 1
                        done
                    done
                    
                    if var is_can do
                        set new var new_verb to get_verb with "can", var person
                        if var new_verb do
                            set from hash auxiliary_verbs_hash item { var new_verb } to 1
                        done
                    done
                    
                    if var is_may do
                        set new var new_verb to get_verb with "may", var person
                        if var new_verb do
                            set from hash auxiliary_verbs_hash item { var new_verb } to 1
                        done
                    done
                    
                    if var is_should do
                        set new var new_verb to get_verb with "should", var person
                        if var new_verb do
                            set from hash auxiliary_verbs_hash item { var new_verb } to 1
                        done
                    done
                    
                    do regex with var verb: /([01])([01])([01])([01])([01])$/ -> "" :global
                done
                
                if from global hash builtin_auxiliary_verbs item { var verb } do
                    set from hash auxiliary_verbs_hash item { var verb } to 1
                done
                else do
                    push into array proper_verbs, var verb
                done
            done
            
            set new array auxiliary_verbs to an empty array
            set items of array auxiliary_verbs to keys with items of hash auxiliary_verbs_hash
####            set new array proper_verbs to an empty array
####            set items of array proper_verbs to keys with items of hash proper_verbs_hash
####             set items of array proper_verbs to sort with items of array proper_verbs
            
            if from array clause 4th item matches /(^|\s)zu(\s|$)/ and length( from array clause 4th item ) < 5 do
                do unshift with items of array proper_verbs, "zu"
                do regex with from array clause 4th item: /(^|\s)zu(\s|$)/ -> "$0" :global
            done
            if from array clause 4th item matches /(^|\s)_to_(\s|$)/ and length( from array clause 4th item ) < 5 do
                do unshift with items of array proper_verbs, "zu"
                do regex with from array clause 4th item: /(^|\s)_to_(\s|$)/ -> "$0" :global
            done
            if from array clause 5th item matches /(^|\s)_to_(\s|$)/ and length( from array clause 5th item ) < 5 do
                do unshift with items of array proper_verbs, "zu"
                do regex with from array clause 5th item: /(^|\s)_to_(\s|$)/ -> "$0" :global
            done

            set from array clause 2nd item to check_for_as_well_as with from array clause 2nd item, from array clause 4th item, var lang, var path
            set from array clause 3rd item to check_for_as_well_as with from array clause 3rd item, from array clause 4th item, var lang, var path
            set from array clause 4th item to check_for_as_well_as with from array clause 4th item, from array clause 4th item, var lang, var path
            
                print "auxiliary verbs... "
                print items of array auxiliary_verbs
                print new line
                print "proper verbs... "
                print items of array proper_verbs
                print new line
            # TEXT
            # Build the final sentence.
            # CODE
            if from array proper_verbs 1st item and from array proper_verbs 1st item matches /^(equal|is<[-]>)/ do
                set new var _no_user_ask to handle for file name "_no_user_ask", write
                do close with var _no_user_ask
                
                set new array subject_words to split with " ", from array clause 2nd item
                set new array object_words to split with " ", from array clause 3rd item
                set new var subject_last_word to from array subject_words item [ size of array subject_words - 1 ]
                set new var object_last_word to from array object_words item [ size of array object_words - 1 ]
                
                set new array subject_props to compute_tags with var subject_last_word, var lang, var path
                set new array object_props to compute_tags with var object_last_word, var lang, var path
                set new var subject_genus to from array subject_props 2nd item
                set new var object_genus to from array  object_props 2nd item
                set new var subject_person to get_person with from array clause 2nd item
                if from array proper_verbs 1st item matches /^equal-pl/ do
                    set var subject_person to "3p"
                done
                
                set new var subject_article to ""
                set new var object_article to ""
                set new var is_name_subject to is_name with var lang, var subject_last_word
                set new var is_collective_noun_subject to is_collective_noun with var lang, var subject_last_word

                set var subject_article to get_article with var subject_genus, "subject", "indefinite"
                set var object_article to get_article with var object_genus, "subject", "indefinite"
                
                set new var subject_article_included to 0
                if from array clause 2nd item matches /\(a\)/ do
                    set var subject_article_included to 1
                    do regex with from array clause 2nd item: /\(a\)\s+?/ -> "" :global
                done
                set new var object_article_included to 0
                if from array clause 3rd item matches /\(a\)/ do
                    set var object_article_included to 1
                    do regex with from array clause 3rd item: /\(a\)\s+?/ -> "" :global
                done

                if from array proper_verbs 1st item matches /^(equal)/ do
                    
                    # subject article
                    if from array proper_verbs 1st item not matches /^equal-pl/ and from array clause 2nd item not matches /.((?:\s.*?\s)|<[_]>|<[0-9]>)./ and from array proper_verbs 1st item matches /(def|indef)/ do
                        if var is_name_subject is false or var is_collective_noun_subject is true or flag subject_article_included is true do
                            if from array proper_verbs 1st item matches /^(equal-sg-def)/ do
                                set var subject_article to get_article with var subject_genus, "subject", "definite"
                            done
                            push into array sentence, var subject_article
                        done
                    done

                    # subject
                    push into array sentence, from array clause 2nd item

                    # verb
                    if from array clause 3rd item not matches /(^|\s)(ein|der|die|das|the|(?:a ))/ do
                        if flag object_article_included is true do
                            set new var verb to get_verb with "be", var subject_person
                            push into array sentence, var verb
                            push into array sentence, var object_article
                        done
                        else if from array subject_props 1st item matches /^v/ do
                            set new var verb to get_verb with "is-same-as", var subject_person
                            push into array sentence, var verb
                        done
                        else if from array clause 3rd item matches /<[0-9]>/ do
                            set new var verb to get_verb with "is-same-as", var subject_person
                            push into array sentence, var verb
                        done
                        else if from array proper_verbs 1st item matches /^equal-pl/ do
                            set new var verb to get_verb with "be", var subject_person
                            push into array sentence, var verb
                        done
                        else do
                            set new var verb to get_verb with "be", var subject_person
                            push into array sentence, var verb
                            push into array sentence, var object_article
                        done
                    done
                    else do
                        set new var verb to get_verb with "be", var subject_person
                        push into array sentence, var verb
                    done
                    
                    # object
                    push into array sentence, from array clause 3rd item
                    
                    # adverbs
                    push into array sentence, from array clause 4th item
                    
                    if var final_sentence do
                        set var final_sentence to var final_sentence concat ', '
                    done
                    
                    set var final_sentence to var final_sentence concat join ' ', items of array sentence
                done
                if from array proper_verbs 1st item matches /^(is<[-]>)/ do
                    # subject article
                    if flag subject_article_included is true do
                        push into array sentence, var subject_article
                    done

                    # subject
                    push into array sentence, from array clause 2nd item

                    # verb
                    set new var verb to get_verb with from array proper_verbs 1st item, var subject_person
                    push into array sentence, var verb
                    
                    if flag object_article_included is true do
                        push into array sentence, var object_article
                    done
                    
                    # object
                    push into array sentence, from array clause 3rd item
                    
                    # adverbs
                    push into array sentence, from array clause 4th item
                    
                    if var final_sentence do
                        set var final_sentence to var final_sentence concat ', '
                    done
                    
                    set var final_sentence to var final_sentence concat join ' ', items of array sentence
                done

                do unlink with "_no_user_ask"
            done
            else if items of array auxiliary_verbs or items of array proper_verbs or from array clause 2nd item or from array clause 3rd item or from array clause 4th item do
                print "auxiliary verbs: "
                print items of array auxiliary_verbs
                print new line
                print "proper verbs: "
                print items of array proper_verbs
                print new line
                
                if not items of array auxiliary_verbs do
                    set items of array auxiliary_verbs to items of array proper_verbs
                    set array proper_verbs to an empty array
                done
                
                # TEXT
                # When there is a time period mentioned in the question, but not in the answer
                # CODE
                if from array clause 4th item not matches /time.(from|to)/ and from array clause 3rd item not matches /time.(from|to)/ do
                    set new array input_adverbs to from hash parsed item { 'adverbs' }
                    for each new var _adverb in array input_adverbs do
                        set new var adverb to var _adverb
                        if lc(var adverb) matches /array/ do
                            set var adverb to from array adverb 1st item
                        done
                        
                        if lc(var adverb) matches /time_/ do
                            set array clause to add_undefined_time with array clause
                            
                            go to last
                        done
                    done
                done
                
                # TEXT
                # Replace *s
                # CODE
                if from array clause 2nd item matches "*" do
                    if from array clause 3rd item matches "*" do
                        if lc( hash parsed item { 'subjects' } 1st item ) matches /array/ do
                            set from array clause 2nd item to hash parsed item { 'subjects' } 1st item 1st item
                        done
                        else do
                            set from array clause 2nd item to hash parsed item { 'subjects' } 1st item
                        done
                    done
                    else do
                        if lc( hash parsed item { 'subjects' } 1st item ) matches /array/ do
                            set from array clause 2nd item to hash parsed item { 'subjects' } 1st item 1st item
                        done
                        else do
                            set from array clause 2nd item to hash parsed item { 'subjects' } 1st item
                        done
                    done
                done
                if from array clause 3rd item matches "*" do
                    if from array clause 2nd item matches "*" do
                        if lc( hash parsed item { 'objects' } 1st item ) matches /array/ do
                            set from array clause 3rd item to hash parsed item { 'objects' } 1st item 1st item
                        done
                        else do
                            set from array clause 3rd item to hash parsed item { 'objects' } 1st item
                        done
                    done
                    else do
                        if lc( hash parsed item { 'subjects' } 1st item ) matches /array/ do
                            set from array clause 3rd item to hash parsed item { 'subjects' } 1st item 1st item
                        done
                        else do
                            set from array clause 3rd item to hash parsed item { 'subjects' } 1st item
                        done
                    done
                done
                
                if from array clause 2nd item matches "_" do
                    set from array clause 2nd item to noun_for_anonymous without arguments
                done
 
# Unsicher: wozu? ^da ? dass?               
#                if var final_sentence do
#                    if from array clause 5th item do
#                        if not from array clause 5th item matches /^dass/ do
#                            push into array sentence, from array clause 5th item
#                        done
#                    done
#                done

                if var final_sentence do
                    if from array clause 5th item do
                        push into array sentence, from array clause 5th item
                    done
                done
                
                
                if from array clause 4th item matches /<[?]>/ do

                    if from array clause 3rd item matches "NULL" or not from array clause 3rd item do

                        if items of array proper_verbs do
                            push into array sentence, items of array auxiliary_verbs
                            push into array sentence, from array clause 2nd item
                            push into array sentence, from array clause 4th item
                            push into array sentence, items of array proper_verbs
                        done
                        else do
                            if from array clause 4th item matches /.../ and from global hash builtin_time_place_adverbs item { from array clause 4th item } and not from array clause 4th item matches /\s/ do
                                push into array sentence, items of array auxiliary_verbs
                                push into array sentence, from array clause 4th item
                                push into array sentence, from array clause 2nd item
                            done
                            else do
                                push into array sentence, items of array auxiliary_verbs
                                push into array sentence, from array clause 2nd item
                                push into array sentence, from array clause 4th item
                            done
                        done
                    done
                    else if from array clause 4th item matches /von/ do

                        if items of array proper_verbs do
                            push into array sentence, items of array auxiliary_verbs
                            push into array sentence, from array clause 2nd item
                            push into array sentence, from array clause 3rd item
                            push into array sentence, from array clause 4th item
                            push into array sentence, items of array proper_verbs
                        done
                        else do
                            push into array sentence, items of array auxiliary_verbs
                            push into array sentence, from array clause 2nd item
                            push into array sentence, from array clause 3rd item
                            push into array sentence, from array clause 4th item
                        done
                    done
                    else do

                        if items of array proper_verbs do
                            if from global hash builtin_time_place_adverbs item { from array clause 4th item } do
                                push into array sentence, items of array auxiliary_verbs
                                push into array sentence, from array clause 2nd item
                                push into array sentence, from array clause 4th item
                                push into array sentence, from array clause 3rd item
                                push into array sentence, items of array proper_verbs
                            done
                            else do
                                push into array sentence, items of array auxiliary_verbs
                                push into array sentence, from array clause 2nd item
                                push into array sentence, from array clause 3rd item
                                push into array sentence, from array clause 4th item
                                push into array sentence, items of array proper_verbs
                            done
                        done
                        else do
                            if from array clause 4th item matches /zu / do
                                push into array sentence, items of array auxiliary_verbs
                                push into array sentence, from array clause 2nd item
                                push into array sentence, from array clause 4th item
                                push into array sentence, from array clause 3rd item
                                push into array sentence, items of array proper_verbs
                            done
                            else do
                                push into array sentence, items of array auxiliary_verbs
                                push into array sentence, from array clause 2nd item
                                push into array sentence, from array clause 3rd item
                                push into array sentence, from array clause 4th item
                                push into array sentence, items of array proper_verbs
                            done
                        done
                    done
                done
                else do
                    if var lang matches "en" do
                        if from global hash builtin_time_place_adverbs item { from array clause 4th item } do
                            push into array sentence, from array clause 2nd item
                            push into array sentence, from array clause 4th item
                            push into array sentence, items of array auxiliary_verbs
                            push into array sentence, items of array proper_verbs
                            push into array sentence, from array clause 3rd item
                        done
                        else do
                            push into array sentence, from array clause 2nd item
                            push into array sentence, items of array auxiliary_verbs
                            push into array sentence, items of array proper_verbs
                            push into array sentence, from array clause 3rd item
                            push into array sentence, from array clause 4th item
                        done
                    done
    print "19" concat new line
                    if var lang matches "de" do
    print "18" concat new line
                        if from array clause 3rd item matches "NULL" or not from array clause 3rd item do
    print "17" concat new line
                            if items of array proper_verbs do
    print "16" concat new line
                                push into array sentence, from array clause 2nd item
                                push into array sentence, items of array auxiliary_verbs
                                push into array sentence, from array clause 4th item
                                push into array sentence, items of array proper_verbs
                            done
                            else do
    print "15" concat new line
                                if from array clause 5th item matches /(der|die|das)$/ do
    print "14" concat new line
                                    push into array sentence, from array clause 2nd item
                                    push into array sentence, from array clause 4th item
                                    push into array sentence, items of array auxiliary_verbs
                                done
                                else if from array clause 4th item matches /.../ and from global hash builtin_time_place_adverbs item { from array clause 4th item } and not from array clause 4th item matches /\s|(nicht|not)/ do
    print "13" concat new line
                                    push into array sentence, from array clause 4th item
                                    push into array sentence, items of array auxiliary_verbs
                                    push into array sentence, from array clause 2nd item
                                done
                                else do
    print "12" concat new line
                                    push into array sentence, from array clause 2nd item
                                    push into array sentence, items of array auxiliary_verbs
                                    push into array sentence, from array clause 4th item
                                done
                            done
                        done
                        else if from array clause 4th item matches /von/ do
    print "11" concat new line
                            if items of array proper_verbs do
    print "10" concat new line
                                push into array sentence, from array clause 2nd item
                                push into array sentence, items of array auxiliary_verbs
                                push into array sentence, from array clause 3rd item
                                push into array sentence, from array clause 4th item
                                push into array sentence, items of array proper_verbs
                            done
                            else do
    print "9" concat new line
                                push into array sentence, from array clause 2nd item
                                push into array sentence, items of array auxiliary_verbs
                                push into array sentence, from array clause 3rd item
                                push into array sentence, from array clause 4th item
                            done
                        done
                        else do
    print "8" concat new line
                            if items of array proper_verbs do
    print "7" concat new line
                                if from array clause 5th item matches /(der|die|das)$/ do
    print "14" concat new line
                                    push into array sentence, items of array auxiliary_verbs
                                    push into array sentence, from array clause 2nd item
                                    push into array sentence, from array clause 4th item
                                    push into array sentence, from array clause 3rd item
                                    push into array sentence, items of array auxiliary_verbs
                                done
                                else if from global hash builtin_time_place_adverbs item { from array clause 4th item } do
    print "6" concat new line
                                    push into array sentence, from array clause 2nd item
                                    push into array sentence, items of array auxiliary_verbs
                                    push into array sentence, from array clause 4th item
                                    push into array sentence, from array clause 3rd item
                                    push into array sentence, items of array proper_verbs
                                done
                                else do
    print "5" concat new line
                                    push into array sentence, from array clause 2nd item
                                    push into array sentence, items of array auxiliary_verbs
                                    push into array sentence, from array clause 3rd item
                                    push into array sentence, from array clause 4th item
                                    push into array sentence, items of array proper_verbs
                                done
                            done
                            else do
    print "4" concat new line
                                if from array clause 5th item matches /(der|die|das)$/ do
    print "3" concat new line
                                    push into array sentence, from array clause 2nd item
                                    push into array sentence, from array clause 4th item
                                    push into array sentence, from array clause 3rd item
                                    push into array sentence, items of array auxiliary_verbs
                                done
                                else if from global hash builtin_time_place_adverbs item { from array clause 4th item } or from array clause 4th item not matches /\s/ or from array clause 4th item matches /zu / do
    print "2" concat new line
                                    push into array sentence, from array clause 2nd item
                                    push into array sentence, items of array auxiliary_verbs
                                    push into array sentence, from array clause 3rd item
                                    push into array sentence, from array clause 4th item
                                    push into array sentence, items of array proper_verbs
                                done
                                else do
    print "1" concat new line
                                    push into array sentence, from array clause 2nd item
                                    push into array sentence, items of array auxiliary_verbs
                                    push into array sentence, from array clause 3rd item
                                    push into array sentence, from array clause 4th item
                                    push into array sentence, items of array proper_verbs
                                done
                            done
                        done
                    done
                done
                
                if ( join ' ', items of array sentence ) matches /50/ do
                    go to next
                done
                
# Unsicher: wozu? ^da ? dass?               
#                if var final_sentence do
#                    if from array clause 5th item do
#                        if from array clause 5th item matches /^da/ do
#                            push into array sentence, from array clause 5th item
#                        done
#                    done
#                done
                
                if var final_sentence do
                    set var final_sentence to var final_sentence concat ', '
                done
                
                set var final_sentence to var final_sentence concat join ' ', items of array sentence
            done
        done
        
        do regex with var final_sentence: /<[,]>\s*?$/ -> "" :global
        do regex with var final_sentence: /<[,]>$/ -> "" :global
        
        if not var final_sentence matches /time.(from|to)/ do
            set new array input_adverbs to from hash parsed item { 'adverbs' }
            for each new var _adverb in array input_adverbs do
                set new var adverb to var _adverb
                if lc(var adverb) matches /array/ do
                    set var adverb to from array adverb 1st item
                done
                
                if lc(var adverb) matches /time_/ do
                    set var final_sentence to var final_sentence concat " ~" concat var adverb
                done
            done
        done

        if var final_sentence matches / dacht/ and not var final_sentence matches /<[,]>/ do
            # TEXT
            # A Sentence must not end with e.g. dachte
            # CODE
            set var final_sentence to compute_output with var final_sentence
            print "Invalid sentence: "
            print var final_sentence
            print new line
            go to next
        done
        
        if var final_sentence matches /<[,]> 50/ do
            # TEXT
            # A Sentence must not end with e.g. dachte
            # CODE
            set var final_sentence to compute_output with var final_sentence
            print "Invalid sentence: "
            print var final_sentence
            print new line
            go to next
        done
        
        if var final_sentence matches /anyone/ do
            # TEXT
            # A Sentence must not end with e.g. dachte
            # CODE
            set var final_sentence to compute_output with var final_sentence
            print "Invalid sentence: "
            print var final_sentence
            print new line
            go to next
        done
        
        if var final_sentence matches /reasonof/ do
            # TEXT
            # A Sentence must not end with e.g. dachte
            # CODE
            set var final_sentence to compute_output with var final_sentence
            print "Invalid sentence: "
            print var final_sentence
            print new line
            go to next
        done
        
        if var final_sentence matches /[>][>][>]/ do
            # TEXT
            # A Sentence must not end with e.g. dachte
            # CODE
            set var final_sentence to compute_output with var final_sentence
            print "Invalid sentence: "
            print var final_sentence
            print new line
            go to next
        done
        
        if lc(var final_sentence) matches / (ist|sind|sein|equal.?.?.?) (ein.?.?)? (name|eigenname)/ do
            # TEXT
            # A Sentence must not end with e.g. dachte
            # CODE
            set var final_sentence to compute_output with var final_sentence
            print "Invalid sentence: "
            print var final_sentence
            print new line
            go to next
        done
        
        if var final_sentence matches / <[=]>/ do
            # TEXT
            # A Sentence must not have the verb "="
            # CODE
            set var final_sentence to compute_output with var final_sentence
            print "Invalid sentence: "
            print var final_sentence
            print new line
            go to next
        done
        
        if var final_sentence matches / opposite / do
            # TEXT
            # A Sentence must not have the verb "="
            # CODE
            set var final_sentence to compute_output with var final_sentence
            print "Invalid sentence: "
            print var final_sentence
            print new line
            go to next
        done
        
        if var final_sentence matches /\(good|bad\)/ do
            # TEXT
            # A Sentence must not have the verb "="
            # CODE
            set var final_sentence to compute_output with var final_sentence
            print "Invalid sentence: "
            print var final_sentence
            print new line
            go to next
        done
        
        # or from hash parsed item { 'verbs' } 1st item 1st item matches "ist"
        
        if ( var final_sentence matches /\s(bin|bist|kannst|darfst|musst)\s/ or var final_sentence matches /(iere|ierst) / ) and ( from hash parsed item { 'verbs' } 1st item matches "ist" ) do
            print "Cannot answer bin/bist when it has been asked for ist:"
            print new line
            print var final_sentence
            print new line
            
            go to next
        done
        
        set var final_sentence to compute_output with var final_sentence
        
        if var final_sentence matches /<[?]>/ do
            do regex with var final_sentence: /<[?]>/ -> "" :global
            set var final_sentence to var final_sentence concat "?"
        done
        
        do regex with var final_sentence: /<[,]>\s*?$/ -> "" :global
        do regex with var final_sentence: /<[,]>$/ -> "" :global
        
        push into array phrases, [ var primary_key, var final_sentence ]
    done
    
    do return using array phrases
done

define action filter_nothing with var text do
    if var text matches /nothing/ do
        do return with ""
    done
    do regex with var text: /<[;]>/ -> "" :global:i
    do regex with var text: /\/.*?$/ -> "" :global:i
    do return with var text
done

define action post_phrase with var lang, var path, var mode, hash parsed, array output do
    set new var primary_key to shift with items of array output
    
    set new var final_sentence to from array output 1st item

    # TEXT
    # Add linked sentences...
    # CODE
    if var primary_key do
        # TEXT
        # After the sentence.
        # CODE
        set new hash hash_link_order to an empty hash
        set from hash hash_link_order item { 'primary_key' } to var primary_key
        set new array results_link_order to logic with '', var lang, var path, hash hash_link_order
        if array results_link_order matches "TOOMUCH" do
            do return with var final_sentence
        done
        for each new array result_link_order in array results_link_order do
            set from array result_link_order 1st item to ''
        done
        set array results_link_order to phrase with var lang, var path, var mode, array results_link_order, hash parsed
        set new var i_random to rand with items of array results_link_order
        set new var result_link_order to from array results_link_order item [ var i_random ]
        if var result_link_order do
            set var final_sentence to var final_sentence concat ". " concat var result_link_order
        done

        # TEXT
        # Before the sentence.
        # CODE
        set new hash hash_link_order to an empty hash
        set from hash hash_link_order item { 'primary_key' } to 0 - var primary_key
        set new array results_link_order to logic with '', var lang, var path, hash hash_link_order
        if array results_link_order matches "TOOMUCH" do
            do return with var final_sentence
        done
        for each new array result_link_order in array results_link_order do
            set from array result_link_order 1st item to ''
        done
        set array results_link_order to phrase with var lang, var path, var mode, array results_link_order, hash parsed
        set new var i_random to rand with items of array results_link_order
        set new var result_link_order to from array results_link_order item [ var i_random ]
        if var result_link_order do
            set var final_sentence to var result_link_order concat ". " concat var final_sentence
        done
    done

    do return with var final_sentence
done

