#
# This file is part of FreeHAL 2010.
#
# Copyright(c) 2006, 2007, 2008, 2009, 2010 Tobias Schulz and contributors.
# http://freehal.org
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

set multi-line new global array collective_nouns to [
];

set multi-line new global array custom_names to [
];

set multi-line new global array builtin_female_names to [

];

set multi-line new global array builtin_male_names to [
          "aaron",
          "abraham",
          "achaz",
          "achim",
          "adalbert",
          "adam",
          "adelbert",
          "adelfried",
          "adelhard",
          "adi",
          "adolf",
          "adolph",
          "adrian",
          "aegidius",
          "agilbert",
          "agilmar",
          "alban",
          "albert",
          "albin",
          "albrecht",
          "alex",
          "alexander",
          "alf",
          "alfhard",
          "alfinus",
          "alfons",
          "alfred",
          "alfried",
          "alhard",
          "allmar",
          "alois",
          "aloisius",
          "aloys",
          "aloysius",
          "alphonsus",
          "alrik",
          "altfried",
          "alwin",
          "amadeus",
          "ambros",
          "ambrosius",
          "andr\ufffd",
          "andreas",
          "andree",
          "andy",
          "annik",
          "anrich",
          "ansbert",
          "anselm",
          "ansgar",
          "anton",
          "antonius",
          "arend",
          "aribert",
          "arist",
          "arkadius",
          "armin",
          "arnbert",
          "arnd",
          "arndt",
          "arne",
          "arnfred",
          "arnfried",
          "arnhart",
          "arnim",
          "arno",
          "arnold",
          "arnolf",
          "arnt",
          "arnulf",
          "aron",
          "arthur",
          "artur",
          "arved",
          "arwed",
          "arwid",
          "arwin",
          "ascan",
          "august",
          "augustin",
          "augustinus",
          "augustus",
          "axel",
          "baldur",
          "balthasar",
          "baptist",
          "bardo",
          "barnabas",
          "bartho",
          "barthold",
          "bartholomaeus",
          "bartold",
          "bartosch",
          "bastian",
          "beat",
          "benedict",
          "benedikt",
          "benediktus",
          "benjamin",
          "benno",
          "bernd",
          "berndt",
          "bernfried",
          "bernhard",
          "bernhardin",
          "bernhardt",
          "bernhart",
          "berni",
          "berno",
          "bernold",
          "bernulf",
          "bernward",
          "bert",
          "berthold",
          "berti",
          "bertin",
          "bertl",
          "bertold",
          "bertolt",
          "bertram",
          "bertwald",
          "bertwin",
          "birk",
          "bjoern",
          "blasius",
          "bodmar",
          "bodo",
          "bodomar",
          "bolko",
          "bonifaz",
          "boris",
          "boerries",
          "borromaeus",
          "borwin",
          "botho",
          "boto",
          "brandolf",
          "bringfried",
          "bruno",
          "burchard",
          "burckhard",
          "burckhardt",
          "burgfried",
          "burghard",
          "burghardt",
          "burghart",
          "burkard",
          "burkardt",
          "burkhard",
          "burkhardt",
          "burkhart",
          "cai",
          "carl",
          "carlheinz",
          "carsten",
          "caspar",
          "cay",
          "cersten",
          "chris",
          "christfried",
          "christhard",
          "christhardt",
          "christhart",
          "christhelm",
          "christian",
          "christmut",
          "christof",
          "christoph",
          "christopher",
          "christopherus",
          "christophorus",
          "christward",
          "claudius",
          "claus",
          "clemens",
          "conrad",
          "constantin",
          "corbinian",
          "cord",
          "cordian",
          "cordt",
          "cornelius",
          "cornell",
          "cuno",
          "curd",
          "curt",
          "cyrill",
          "dagobert",
          "dagomar",
          "damian",
          "daniel",
          "dankfried",
          "dankhard",
          "dankmar",
          "dankward",
          "dankwart",
          "danny",
          "darius",
          "david",
          "degenhard",
          "degenhardt",
          "degenhart",
          "delf",
          "denis",
          "dennis",
          "denny",
          "desiderius",
          "dethard",
          "detlef",
          "detlev",
          "detmar",
          "detrich",
          "didi",
          "diemo",
          "dierk",
          "dietbald",
          "dietbert",
          "dieter",
          "dieterich",
          "dietfried",
          "dietgar",
          "dietger",
          "diethard",
          "diethardt",
          "diethart",
          "diethelm",
          "diether",
          "diethmar",
          "dietmar",
          "dietmund",
          "dietolf",
          "dietram",
          "dietrich",
          "dietwald",
          "dietwalt",
          "dietwolf",
          "dietwulf",
          "dietz",
          "dimitri",
          "dionys",
          "dirk",
          "ditmar",
          "dittmar",
          "dominic",
          "dominik",
          "dominikus",
          "donat",
          "donatus",
          "eberhard",
          "eberhardt",
          "eberhart",
          "eckard",
          "eckardt",
          "eckart",
          "eckbert",
          "eckehard",
          "eckehardt",
          "eckehart",
          "eckert",
          "eckfried",
          "eckhard",
          "eckhardt",
          "eckhart",
          "eckhold",
          "eddi",
          "edelbert",
          "edelfried",
          "edelhard",
          "edelmut",
          "edelwald",
          "edgar",
          "edmar",
          "edmund",
          "eduard",
          "eduardt",
          "edwin",
          "egbert",
          "egidius",
          "eginald",
          "eginhard",
          "eginhardt",
          "egmont",
          "egomar",
          "egon",
          "ehrenfried",
          "ehrenreich",
          "ehrhard",
          "ehrhardt",
          "ehrmut",
          "eik",
          "eike",
          "einhard",
          "einhardt",
          "eitelbert",
          "eitelfritz",
          "ekhard",
          "ekhardt",
          "ekkard",
          "ekkardt",
          "ekkart",
          "ekkehard",
          "ekkehardt",
          "ekkehart",
          "elbert",
          "elkmar",
          "elmar",
          "emanuel",
          "emeram",
          "emerich",
          "emil",
          "emmeram",
          "emmeran",
          "emmerich",
          "engelbert",
          "engelbrecht",
          "engelhard",
          "engelhardt",
          "engelmar",
          "englbert",
          "enrico",
          "erdfried",
          "erdmann",
          "erdwin",
          "erfried",
          "erhard",
          "erhardt",
          "erhart",
          "eric",
          "erich",
          "erik",
          "erk",
          "erkmar",
          "erlfried",
          "ermenfried",
          "erni",
          "erno",
          "ernst",
          "ernstfried",
          "erwin",
          "eugen",
          "eustachius",
          "ewald",
          "eyck",
          "fabian",
          "falk",
          "falkhard",
          "falkmar",
          "falko",
          "felix",
          "ferdi",
          "ferdinand",
          "ferdinandus",
          "ferfried",
          "ferhard",
          "ferhart",
          "fidelius",
          "florentin",
          "florentius",
          "florenz",
          "florian",
          "folker",
          "folkhard",
          "folkhardt",
          "folkhart",
          "folko",
          "follrich",
          "frank",
          "frankmut",
          "franz",
          "franziskus",
          "franzl",
          "franzpeter",
          "fred",
          "freddy",
          "freimund",
          "freimut",
          "freimuth",
          "freiwald",
          "fridolin",
          "fridulf",
          "fried",
          "friedbald",
          "friedberg",
          "friedbert",
          "friedebert",
          "friedeborn",
          "friedel",
          "friedemann",
          "friedemar",
          "frieder",
          "friedewald",
          "friedhard",
          "friedhardt",
          "friedhart",
          "friedhelm",
          "friedhold",
          "friedjoerg",
          "friedl",
          "friedlieb",
          "friedmar",
          "friedmut",
          "friedmuth",
          "friedolf",
          "friedolin",
          "friedrich",
          "friedwald",
          "friedwin",
          "frithjof",
          "fritz",
          "frohmund",
          "frohmut",
          "frohwald",
          "frowin",
          "gabriel",
          "gangolf",
          "gebhard",
          "gebhart",
          "gelbert",
          "georg",
          "gerald",
          "gerd",
          "gerdfried",
          "gerdt",
          "gereon",
          "gerfried",
          "gerhard",
          "gerhardt",
          "gerhart",
          "gerlach",
          "german",
          "germar",
          "germo",
          "germut",
          "gernfried",
          "gernod",
          "gernot",
          "gernulf",
          "gero",
          "gerold",
          "gerolf",
          "gerrit",
          "gert",
          "gerthold",
          "gertmund",
          "gertwin",
          "gerwald",
          "gerwin",
          "giesbert",
          "gisbert",
          "giselbert",
          "giselher",
          "gismar",
          "godo",
          "golo",
          "gordian",
          "goswin",
          "gottfried",
          "gotthard",
          "gotthardt",
          "gotthart",
          "gotthelf",
          "gotthilf",
          "gotthold",
          "gottlieb",
          "gottlob",
          "gottreich",
          "gottwald",
          "gottwaldt",
          "gottwalt",
          "goetz",
          "gregor",
          "grimbert",
          "guido",
          "gundhard",
          "gundhart",
          "gundmar",
          "gundolf",
          "gunfried",
          "gunhard",
          "gunnar",
          "gunter",
          "guenter",
          "gunthard",
          "gunther",
          "guenther",
          "guntmar",
          "guntram",
          "gustav",
          "gustel",
          "gustl",
          "hadubert",
          "hagen",
          "haimo",
          "hanfried",
          "hannes",
          "hanno",
          "hanns",
          "hannsgeorg",
          "hannsjoerg",
          "hannsjuergen",
          "hannspeter",
          "hans",
          "hansdieter",
          "hansfried",
          "hansfriedrich",
          "hansgeorg",
          "hansgerd",
          "hansguenter",
          "hansguenther",
          "hansheinz",
          "hanshelmut",
          "hanshermann",
          "hansi",
          "hansjakob",
          "hansjoachim",
          "hansjochen",
          "hansjoerg",
          "hansjoern",
          "hansjuergen",
          "hanskarl",
          "hansl",
          "hansludwig",
          "hansmartin",
          "hansotto",
          "hanspeter",
          "hanswalter",
          "hanswerner",
          "hanswilhelm",
          "hanswolf",
          "harald",
          "hardi",
          "hardo",
          "hardy",
          "hariolf",
          "harri",
          "harribert",
          "harro",
          "harry",
          "hartfried",
          "hartger",
          "hartlieb",
          "hartmann",
          "hartmund",
          "hartmut",
          "hartmuth",
          "hartwald",
          "hartwig",
          "hartwin",
          "hasko",
          "hasso",
          "hatto",
          "haug",
          "haymo",
          "heidebert",
          "heiderich",
          "heidfried",
          "heiko",
          "heilmuth",
          "heilwig",
          "heimar",
          "heimbert",
          "heimfrid",
          "heimhart",
          "heimo",
          "heimwald",
          "heiner",
          "heinfried",
          "heini",
          "heino",
          "heinolf",
          "heinrich",
          "heintje",
          "heinz",
          "heinzdieter",
          "heinzfried",
          "heinzhermann",
          "heinzjoerg",
          "heinzjuergen",
          "heinzkarl",
          "heinzpeter",
          "heinzwerner",
          "helbert",
          "helfred",
          "helfrid",
          "helfried",
          "helge",
          "helgert",
          "helgomar",
          "hellfried",
          "hellmut",
          "hellmuth",
          "helm",
          "helmar",
          "helmbrecht",
          "helmfried",
          "helmo",
          "helmrich",
          "helmut",
          "helmuth",
          "helmward",
          "helwart",
          "helwig",
          "helwin",
          "hendrik",
          "henning",
          "henrik",
          "henry",
          "herald",
          "herbert",
          "herfried",
          "herger",
          "heribert",
          "herko",
          "hermann",
          "hermfried",
          "herold",
          "herrmann",
          "herwald",
          "herward",
          "herwart",
          "herwarth",
          "herwig",
          "heyko",
          "heyo",
          "hieronimus",
          "hieronymus",
          "hilar",
          "hilarius",
          "hildebert",
          "hildebrand",
          "hildemar",
          "hildmar",
          "hilfried",
          "hilmar",
          "hippolytus",
          "hoimar",
          "holger",
          "holk",
          "holm",
          "holmer",
          "horst",
          "horstfried",
          "horstmar",
          "hubert",
          "hubertus",
          "hugo",
          "humbert",
          "ignatz",
          "ignaz",
          "ilrich",
          "immanuel",
          "ingbert",
          "ingfried",
          "inghard",
          "ingmar",
          "ingo",
          "ingobert",
          "ingolf",
          "ingomar",
          "ingowart",
          "ingram",
          "inkmar",
          "innozenz",
          "irenaeus",
          "ireneus",
          "irmfried",
          "irmin",
          "irminfried",
          "irmo",
          "isbert",
          "isfried",
          "isidor",
          "iven",
          "ivo",
          "jacob",
          "jakob",
          "jan",
          "janfried",
          "jannick",
          "jean",
          "jens",
          "jo",
          "joachim",
          "jobst",
          "jochen",
          "joel",
          "johann",
          "johannes",
          "jonas",
          "jonathan",
          "jonny",
          "jons",
          "joerg",
          "joergfried",
          "joern",
          "joscha",
          "joschka",
          "josef",
          "joseph",
          "jost",
          "josua",
          "julian",
          "julius",
          "jupp",
          "juergen",
          "just",
          "justus",
          "kai",
          "kajetan",
          "karl",
          "karlernst",
          "karleugen",
          "karlfried",
          "karlfrieder",
          "karlfriedrich",
          "karlgeorg",
          "karlguenter",
          "karlhans",
          "karlheiner",
          "karlheinrich",
          "karlheinz",
          "karlhorst",
          "karli",
          "karlmann",
          "karlotto",
          "karlpeter",
          "karsten",
          "kasimir",
          "kaspar",
          "kay",
          "kersten",
          "kevin",
          "kilian",
          "klaudius",
          "klaus",
          "klausdieter",
          "klausjuergen",
          "klauspeter",
          "klemens",
          "knut",
          "knuth",
          "konrad",
          "konradin",
          "konstantin",
          "korbinian",
          "kord",
          "kornelius",
          "kristian",
          "kruno",
          "kunibert",
          "kuno",
          "kurd",
          "kurt",
          "kurth",
          "lambert",
          "landolf",
          "lars",
          "laurentius",
          "laurenz",
          "leander",
          "leberecht",
          "lebrecht",
          "lenard",
          "lenz",
          "leo",
          "leon",
          "leonhard",
          "leonhardt",
          "leopold",
          "leuthold",
          "lewin",
          "liborius",
          "liebhard",
          "liebhardt",
          "lienard",
          "lienhard",
          "lienhardt",
          "lindmar",
          "linhart",
          "lois",
          "loisl",
          "lorenz",
          "lothar",
          "louis",
          "lucas",
          "ludger",
          "ludolf",
          "ludwig",
          "luitpold",
          "luitwin",
          "lukas",
          "lutz",
          "maic",
          "maik",
          "malte",
          "manfred",
          "manfried",
          "manhard",
          "manhardt",
          "manhold",
          "manuel",
          "marbod",
          "marc",
          "marcel",
          "marcellus",
          "marco",
          "marcus",
          "marfried",
          "margolf",
          "marian",
          "mario",
          "marius",
          "mark",
          "marko",
          "markolf",
          "markus",
          "markward",
          "markwart",
          "marold",
          "martin",
          "marzel",
          "marzellus",
          "mathias",
          "mathis",
          "matthaeus",
          "matthias",
          "maurus",
          "max",
          "maximilian",
          "maximillian",
          "maxl",
          "mayk",
          "medard",
          "medardus",
          "meik",
          "meikel",
          "meinard",
          "meinfried",
          "meinhard",
          "meinhart",
          "meinold",
          "meinolf",
          "meinrad",
          "meinulf",
          "melchior",
          "merten",
          "micha",
          "michael",
          "michel",
          "michl",
          "mike",
          "mirco",
          "mirko",
          "mischel",
          "moritz",
          "nathanael",
          "neidhard",
          "neidhardt",
          "neithard",
          "neithart",
          "nepomuk",
          "nick",
          "nicki",
          "nicky",
          "nico",
          "nicolas",
          "nicolaus",
          "niels",
          "niklas",
          "niklaus",
          "niko",
          "nikodem",
          "nikodemus",
          "nikolas",
          "nikolaus",
          "nils",
          "norbert",
          "nordfried",
          "norfried",
          "norman",
          "norwin",
          "notfried",
          "notker",
          "nunzius",
          "odilo",
          "olaf",
          "olf",
          "oliver",
          "olli",
          "ornulf",
          "ortfried",
          "ortmund",
          "ortwin",
          "oskar",
          "osmund",
          "oswald",
          "oswin",
          "otbert",
          "otfried",
          "otger",
          "otheinrich",
          "othmar",
          "otmar",
          "ottfried",
          "otthard",
          "otthart",
          "otthein",
          "ottheinrich",
          "ottheinz",
          "otthold",
          "ottkar",
          "ottmar",
          "otto",
          "ottobert",
          "ottokar",
          "ottomar",
          "ottwin",
          "otwald",
          "otwin",
          "pankratius",
          "pankraz",
          "pascal",
          "patrick",
          "paul",
          "paulfried",
          "paulinus",
          "paulus",
          "peter",
          "philip",
          "philipp",
          "phillip",
          "phillipp",
          "phillippus",
          "pierre",
          "pirmin",
          "pius",
          "quintus",
          "quirin",
          "raik",
          "raimar",
          "raimer",
          "raimond",
          "raimund",
          "rainald",
          "rainer",
          "rainhard",
          "rainhardt",
          "rainmund",
          "ralf",
          "ralph",
          "randolf",
          "randolph",
          "raphael",
          "rasso",
          "raymund",
          "reginbert",
          "reginhardt",
          "reimo",
          "reimund",
          "reinald",
          "reinar",
          "reinbert",
          "reiner",
          "reinfried",
          "reinhard",
          "reinhardt",
          "reinhart",
          "reinhold",
          "reinholdt",
          "reinmar",
          "reino",
          "reinold",
          "reinulf",
          "reinwald",
          "rembert",
          "remigius",
          "renald",
          "renatus",
          "ren\ufffd",
          "renold",
          "rezzo",
          "richard",
          "rico",
          "rigbert",
          "rigo",
          "rigobert",
          "rimbert",
          "ringo",
          "robby",
          "robert",
          "roberto",
          "rochus",
          "roderich",
          "roger",
          "roland",
          "rolf",
          "roman",
          "romanus",
          "ronald",
          "ronny",
          "roselius",
          "rotger",
          "rothmund",
          "rouven",
          "ruben",
          "rudenz",
          "rudger",
          "rudi",
          "ruediger",
          "rudolf",
          "rudolph",
          "runald",
          "runfried",
          "rupert",
          "rupertus",
          "ruppert",
          "rupprecht",
          "ruprecht",
          "rutger",
          "ruetger",
          "ruthard",
          "samuel",
          "sascha",
          "schorsch",
          "sebald",
          "sebastian",
          "seibold",
          "sepp",
          "seppl",
          "sergius",
          "severin",
          "sibrand",
          "sidonius",
          "siegbert",
          "siegenot",
          "siegert",
          "siegfrid",
          "siegfried",
          "sieghard",
          "sieghardt",
          "sieghart",
          "sieghelm",
          "siegmar",
          "siegmund",
          "siegulf",
          "siegwald",
          "siegward",
          "siegwart",
          "sigbert",
          "sigenot",
          "sigfrid",
          "sigfried",
          "siggi",
          "sighard",
          "sighart",
          "sighelm",
          "sigi",
          "sigisbert",
          "sigishelm",
          "sigismund",
          "sigmar",
          "sigmund",
          "sigmut",
          "sigolf",
          "sigurd",
          "sigward",
          "sigwart",
          "silvester",
          "silvio",
          "simon",
          "simpert",
          "sixtus",
          "soenke",
          "sonnfried",
          "sonnhard",
          "sonnhardt",
          "soeren",
          "stanislaus",
          "stefan",
          "steff",
          "steffan",
          "steffen",
          "steph",
          "stephan",
          "stephanus",
          "steve",
          "steven",
          "sturmhard",
          "sturmius",
          "sven",
          "swen",
          "sylvester",
          "sylvio",
          "sylvius",
          "tankred",
          "tassilo",
          "tell",
          "thaddaeus",
          "thankmar",
          "thassilo",
          "theo",
          "theobald",
          "theobert",
          "theodor",
          "theofried",
          "theohold",
          "theophil",
          "theophilus",
          "thielo",
          "thiemo",
          "thilo",
          "thomas",
          "thoralf",
          "thorsten",
          "tiberius",
          "tiburtius",
          "tiemo",
          "til",
          "till",
          "tillmann",
          "tilman",
          "tilmann",
          "tilo",
          "tim",
          "timmo",
          "timo",
          "timon",
          "timotheus",
          "tino",
          "titus",
          "tobias",
          "tom",
          "tommy",
          "toni",
          "toens",
          "tony",
          "toralf",
          "torben",
          "torge",
          "torsten",
          "traugott",
          "trauhard",
          "treufried",
          "treuhard",
          "treuhart",
          "tristan",
          "trudbert",
          "trutz",
          "udo",
          "ulf",
          "ulfried",
          "uli",
          "ulli",
          "ullrich",
          "ulrich",
          "ulvi",
          "ulwin",
          "uranius",
          "urban",
          "ursus",
          "utho",
          "uto",
          "utto",
          "utz",
          "uve",
          "uwe",
          "valentin",
          "valerian",
          "veit",
          "veith",
          "velten",
          "viktor",
          "vincenz",
          "vinzent",
          "vinzenz",
          "vitalis",
          "vitus",
          "volkard",
          "volkart",
          "volkbert",
          "volker",
          "volkhard",
          "volkhardt",
          "volkhart",
          "volkher",
          "volkmar",
          "volkrad",
          "volkward",
          "volkwart",
          "vollrath",
          "volrad",
          "walbert",
          "waldemar",
          "waldfried",
          "walfried",
          "walter",
          "walther",
          "walti",
          "warnfried",
          "wastl",
          "wedig",
          "wedigo",
          "weikhard",
          "welf",
          "welfhard",
          "wendel",
          "wendelin",
          "wendelinus",
          "wendemar",
          "wennemar",
          "wenzel",
          "werner",
          "wernfried",
          "wernhard",
          "wernher",
          "wichard",
          "wido",
          "wiegand",
          "wiegbert",
          "wieghart",
          "wieland",
          "wiethold",
          "wigand",
          "wigbert",
          "wiglaf",
          "wilbert",
          "wilbrand",
          "wilbrandt",
          "wilderich",
          "wilfrid",
          "wilfried",
          "wilhard",
          "wilhardt",
          "wilhelm",
          "willehad",
          "willhart",
          "willi",
          "willibald",
          "willibert",
          "willmar",
          "willrich",
          "willy",
          "wilmar",
          "wilmhard",
          "wilmut",
          "winand",
          "winfrid",
          "winfried",
          "wingolf",
          "winnimar",
          "winrich",
          "withold",
          "witmar",
          "wittmar",
          "wladislaus",
          "woldemar",
          "wolf",
          "wolfbert",
          "wolfdieter",
          "wolfdietrich",
          "wolfeckart",
          "wolff",
          "wolfgang",
          "wolfguenter",
          "wolfhard",
          "wolfhardt",
          "wolfhart",
          "wolfhelm",
          "wolfhermann",
          "wolfmar",
          "wolfram",
          "wolfrid",
          "wolfried",
          "wolrad",
          "wulf",
          "wulfhard",
          "wulfhardt",
          "wunibald",
          "wunnibald",
          "xaver",
          "xaverius",
          "york",
          "zacharias",
          "zeno",
];

set multi-line new global array builtin_entity_ends_pair to [
          [ 'das', 'ein' ],
          [ 'das', 'eine' ],
          [ 0, 'geburtstag' ],
          [ 'dies', 0 ],
];

define action builtin_entity_does_not_end with var word do
    if var word matches /cial$/ do
        do return with 1
    done
    do return with 0
done

set multi-line new global hash builtin_entity_does_not_end to {
          'mac' => 1,

};

set multi-line new global hash builtin_entity_ends to {
          'i' => 1,
          'h' => 1,
          'g' => 1,
          'f' => 1,
          'e' => 1,
          'd' => 1,
          'c' => 1,
          'b' => 1,
          'he' => 1,
          'she' => 1,
          'it' => 1,
          'his' => 1,
          'her' => 1,
          'him' => 1,
          'myself' => 1,
          'yourself' => 1,
          'mine' => 1,
          'yours' => 1,
          'i' => 1,
          'you' => 1,
};

set multi-line new global hash builtin_time_place_adverbs to {
          'what' => 1,
          'who' => 1,
          'how' => 1,
          'where' => 1,
          'when' => 1,
          'why' => 1,
          'whom' => 1,
          'nicht' => 1,
          'not' => 1,
          '_(true)_' => 1,
          '_(maybe)_' => 1,
          '_(false)_' => 1,
          '_(logic)_' => 1,
          '_q_' => 1,
          'kenne' => 1,
          'vorhin' => 1,
          'nachher' => 1,
          'vorher' => 1,
          'spaeter' => 1,
          'eben' => 1,
          'nun' => 1,
          'schon' => 1,
          'auch' => 1,
          'noch' => 1,
          'etwa' => 1,
          'ungefaehr' => 1,
          'ca' => 1,
          'mal' => 1,
          'denn' => 1,
          'dann' => 1,
          'gerne' => 1,
          'spaet' => 1,
          'frueh' => 1,
          'frueher' => 1,
          'spaeter' => 1,
          'fast' => 1,
          'eben' => 1,
          'endlich' => 1,
          'anfangs' => 1,
          'bald' => 1,
          'damals' => 1,
          'dann' => 1,
          'eher' => 1,
          'heutzutage' => 1,
          'mittlerweile' => 1,
          'neulich' => 1,
          'nun' => 1,
          'seitdem' => 1,
          'zugleich' => 1,
          'zuletzt' => 1,
          'schlie\u00dflich' => 1,
          'seither' => 1,
          'heute' => 1,
          'morgen' => 1,
          'gestern' => 1,
          'inzwischen' => 1,
          'jetzt' => 1,
          '\u00fcbermorgen' => 1,
          'vorerst' => 1,
          'vorhin' => 1,
          'abends' => 1,
          'danach' => 1,
          'fr\u00fcher' => 1,
          'beizeiten' => 1,
          'h\u00e4ufig' => 1,
          'oft' => 1,
          'oftmals' => 1,
          'manchmal' => 1,
          'gelegentlich' => 1,
          'bisweilen' => 1,
          'zuweilen' => 1,
          'mitunter' => 1,
          'selten' => 1,
          'einmal' => 1,
          'zweimal' => 1,
          'dreimal' => 1,
          'mehrmals' => 1,
          'abends' => 1,
          'normalerweise' => 1,
          'nachts' => 1,
          'dienstags' => 1,
          'lange' => 1,
          'immer' => 1,
          'noch' => 1,
          'zeitlebens' => 1,
          'stets' => 1,
          'ewig' => 1,
          'always' => 1,
          'schon' => 1,
          'bisher' => 1,
          'weitgehend' => 1,
          'erstmals' => 1,
          'nahe' => 1,
          'lately' => 1,
          'never' => 1,
          'often' => 1,
          'rarely' => 1,
          'woanders' => 1,
          'kuenftig' => 1,
          'recently' => 1,
          'sometimes' => 1,
          'soon' => 1,
          'today' => 1,
          'tomorrow' => 1,
          'usually' => 1,
          'yesterday' => 1,
          'just' => 1,
};

set multi-line new global hash builtin_verb_prefixes to {
};

set multi-line new global hash builtin_auxiliary_verbs to {
          'am' => 1,
          'are' => 1,
          'is' => 1,
          'be' => 1,
          'was' => 1,
          'were' => 1,

          'have' => 1,
          'has' => 1,

          'become' => 1,
          'became' => 1,
          'becomes' => 1,

          'can' => 1,
          'could' => 1,
          'would' => 1,
          'may' => 1,

          'want' => 1,
          'wants' => 1,
          'wanted' => 1,

          'must' => 1,
          'should' => 1,
};

set multi-line new global hash builtin_part_of_speech to {
          '?' => "n",
          '$a$' => "n",
          '$b$' => "n",
          '$c$' => "n",
          '$d$' => "n",
          '$e$' => "n",
          '$f$' => "n",
          '$g$' => "n",
          '$h$' => "n",
          '$i$' => "n",
          '_(true)_' => "adj",
          '_(maybe)_' => "adj",
          '_(false)_' => "adj",
          '_(logic)_' => "adj",
          '_true_' => "adj",
          '_maybe_' => "adj",
          '_false_' => "adj",
          '_logic_' => "adj",
          'einem'  => "art",
          'eines'  => "art",
          'einer'  => "art",
          'einem'  => "art",
          'eine'  => "art",
          'ein'  => "art",
          'zier' => "n",
          'auf' => "prep",
          'hin' => "prep",
          'hinzu' => "prep",
          'dazu' => "prep",
          'rauf' => "prep",
          'herauf' => "prep",
          'hinab' => "prep",
          'hinunter' => "prep",
          'an' => "prep",
          'ab' => "prep",
          'zusammen' => "prep",
          'vor' => "prep",
          'nach' => "prep",
          'zurueck' => "prep",
          'weg' => "prep",
          'zer' => "prep",
          'her' => "prep",
          'in' => "prep",
          'ueber' => "prep",
          'no-question' => "qq",
          '_no-question_' => "qq",
          'unter' => "prep",
          'neben' => "prep",
          'herunter' => "prep",
          'mit' => "prep",
          'zwischen' => "prep",
          'um' => "prep",
          'durch' => "prep",
          'aus' => "prep",
          'fest' => "prep",
          'ent' => "prep",
          'frei' => "prep",
          'er' => "prep",
          'soweit' => "adj",
          'gilt'   => "v",
          'fuehlst' => "v",
          'fuehle' => "v",
          'allerdings' => "adj",
          'habe' => "v",
          'fern' => "adj",
          'lau' => "adj",
          'schaust' => "v",
          'schaue' => "v",
          'schauen' => "v",
          'dann' => "adj",
          'beschaeftigt' => "adj",
          'million' => "adj",
          'hat' => "v",
          'braucht' => "v",
          'jedoch' => "questionword",
          'leise' => "adj",
          'heutzutage' => "adj",
          'magst' => "v",
          'fremd' => "adj",
          'trees' => "n",
          'weh' => "adj",
          'klug' => "adj",
          'offen' => "adj",
          '==' => "v",
          'tiere' => "n",
          'boes' => "adj",
          'what' => "questionword",
          'what-nowiki' => "questionword",
          'mueden' => "adj",
          'ster' => "adj",
          'locker' => "adj",
          'lange' => "adj",
          'vorerst' => "adj",
          'bescheiden' => "adj",
          'mies' => "adj",
          'h\ufffdufig' => "adj",
          'fuenf' => "adj",
          'elfte' => "adj",
          'kuenftig' => "adj",
          'ewig' => "adj",
          'leichten' => "adj",
          'nett' => "adj",
          'of' => "prep",
          'bei' => "prep",
          'ohne' => "prep",
          'still' => "adj",
          'oft' => "adj",
          'dir' => "n",
          'lind' => "adj",
          'wieso' => "questionword",
          'bisweilen' => "adj",
          'will' => "v",
          'falsche' => "adj",
          'haupt' => "adj",
          'dumpf' => "adj",
          'leicht' => "adj",
          'when' => "questionword",
          'tlerweile' => "adj",
          'weshalb' => "questionword",
          'deutsche' => "adj",
          'das' => "art",
          'beste' => "adj",
          'spitz' => "adj",
          'kraus' => "adj",
          'selten' => "adj",
          'kalte' => "adj",
          'science' => "n",
          'project' => "n",
          'freehal' => "n",
          'zur' => "questionword",
          'mochten' => "v",
          'wild' => "adj",
          'where' => "questionword",
          'trocken' => "adj",
          'linkes' => "adj",
          'meins' => "n",
          'man' => "n",
          'forsch' => "adj",
          'fidel' => "adj",
          'heiser' => "adj",
          'unreifem' => "adj",
          'wichtigem' => "adj",
          'grob' => "adj",
          'bisher' => "adj",
          'jetzt' => "adj",
          'viel' => "adj",
          'berufst' => "v",
          'sauer' => "adj",
          'rarely' => "adj",
          'a' => "art",
          '(a)' => "art",
          '(the)' => "art",
          'genau' => "adj",
          'ein' => "art",
          'bloed' => "adj",
          'einmal' => "adj",
          'beruehmt' => "adj",
          'in' => "prep",
          'sowie' => "prep",
          'gemein' => "adj",
          'neulich' => "adj",
          'logic' => "n",
          'unreifer' => "adj",
          'niemand' => "n",
          '!=>' => "v",
          'links' => "adj",
          'edel' => "adj",
          'keineswegs' => "adj",
          'dieses' => "art",
          'traege' => "adj",
          'stark' => "adj",
          'jeweils' => "adj",
          'zweimal' => "adj",
          'mild' => "adj",
          'by' => "prep",
          'dem' => "art",
          'schroff' => "adj",
          'sind' => "v",
          'wuerden' => "v",
          'wo' => "questionword",
          'sechste' => "adj",
          'usually' => "adj",
          'fuenfzig' => "adj",
          'offiziell' => "adj",
          'fair' => "adj",
          'bleib' => "v",
          'bringen' => "v",
          'milliarde' => "adj",
          'tauche' => "v",
          'uhr' => "n",
          'meinen' => "art",
          'wegen' => "prep",
          'knapp' => "adj",
          'frankreich' => "n",
          'german' => "adj",
          'einerseits' => "adj",
          'blind' => "adj",
          'gestern' => "adj",
          'monoton' => "adj",
          'uebel' => "adj",
          'lax' => "adj",
          'zum' => "questionword",
          'simpel' => "adj",
          'acht' => "adj",
          'setzen' => "v",
          'beruf' => "n",
          'schnoede' => "adj",
          'meine' => "art",
          'damals' => "adj",
          'zwoelf' => "adj",
          'rank' => "adj",
          'fast' => "adj",
          'bett' => "n",
          'schneller' => "adj",
          'zweiter' => "adj",
          'sometimes' => "adj",
          'halten' => "v",
          'deinem' => "art",
          'warm' => "adj",
          'glatt' => "adj",
          'steil' => "adj",
          'kuehn' => "adj",
          'beschaedigt' => "adj",
          'welchen' => "questionword",
          'on' => "prep",
          'muedem' => "adj",
          'euers' => "art",
          'flau' => "adj",
          'monotone' => "adj",
          'huebsch' => "adj",
          'nackt' => "adj",
          'leck' => "adj",
          'wenn' => "questionword",
          'arm' => "adj",
          'nachts' => "adj",
          'lang' => "adj",
          'deine' => "art",
          'stes' => "adj",
          'meinem' => "art",
          'keinen' => "adj",
          'moechte' => "v",
          'nicht' => "adj",
          'kunst' => "n",
          'wach' => "adj",
          'neues' => "adj",
          'unreife' => "adj",
          'kaputt' => "adj",
          'duerr' => "adj",
          'uebernahm' => "v",
          'zaeh' => "adj",
          'duester' => "adj",
          'zwei' => "adj",
          'rechten' => "adj",
          'welk' => "adj",
          'schlau' => "adj",
          'wichtigen' => "adj",
          'schlie\ufffdlich' => "adj",
          'warum' => "questionword",
          'brav' => "adj",
          'teuer' => "adj",
          'dreizehnte' => "adj",
          'nahm' => "v",
          'welcher' => "questionword",
          'dreissig' => "adj",
          'echt' => "adj",
          'jungen' => "adj",
          'klein' => "adj",
          'zart' => "adj",
          'haben' => "v",
          'ca' => "adj",
          'meint' => "v",
          'denn' => "adj",
          'dritten' => "adj",
          'recht' => "adj",
          'weit' => "adj",
          'jaeh' => "adj",
          'now' => "adj",
          'neunzig' => "adj",
          'geil' => "adj",
          'china' => "n",
          'seiner' => "art",
          'durch' => "prep",
          'es' => "n",
          'mochte' => "v",
          'heise' => "v",
          'gross' => "adj",
          'j' => "n",
          'tal' => "n",
          'oder' => "linking",
          'andere' => "adj",
          'ihres' => "n",
          'bis' => "prep",
          'about' => "prep",
          'sich' => "n",
          'wer' => "questionword",
          'muessten' => "v",
          'allgemeiner' => "adj",
          'dengleichen' => "adj",
          'laut' => "adj",
          'fett' => "adj",
          'how' => "questionword",
          'geht' => "v",
          'tausende' => "adj",
          'dere' => "adj",
          'baut' => "v",
          'taucht' => "v",
          'schneiden' => "v",
          'schuetter' => "adj",
          '&' => "linking",
          'their' => "art",
          'ders' => "adj",
          'best' => "adj",
          'deins' => "n",
          'gelegentlich' => "adj",
          'besonderes' => "adj",
          'taub' => "adj",
          'doppelt' => "adj",
          'mag' => "v",
          'wollte' => "v",
          'sue?' => "adj",
          'unterwegs' => "adj",
          'schnell' => "adj",
          'starr' => "adj",
          'liegt' => "v",
          'stumpf' => "adj",
          'dieser' => "art",
          'danach' => "adj",
          'bald' => "adj",
          'wann' => "questionword",
          'worum' => "questionword",
          'sobald' => "questionword",
          'gesamt' => "adj",
          'spd' => "n",
          'zahm' => "adj",
          'werden' => "v",
          'rot' => "adj",
          'schwer' => "adj",
          'von' => "prep",
          'down' => "prep",
          'doof' => "adj",
          'harsch' => "adj",
          'vielleicht' => "adj",
          'hand' => "n",
          'vielen' => "adj",
          'oftmals' => "adj",
          'reich' => "adj",
          'mal' => "adj",
          'zehntausend' => "adj",
          'which' => "questionword",
          'kann' => "v",
          'einer' => "art",
          'bar' => "adj",
          'tauchen' => "v",
          'pur' => "adj",
          'anhalte' => "v",
          'neuer' => "adj",
          'mich' => "n",
          'kurz' => "adj",
          'fahl' => "adj",
          'sehr' => "adj",
          'wenigerals' => "prep",
          'just' => "adj",
          'achtzehnte' => "adj",
          'drittem' => "adj",
          'ersten' => "adj",
          'stirbt' => "v",
          'bieder' => "adj",
          'hackt' => "v",
          'halb' => "adj",
          'ueben' => "v",
          'and' => "linking",
          'monotones' => "adj",
          'nass' => "adj",
          'erstmals' => "adj",
          'zwischen' => "prep",
          'darf' => "v",
          'karg' => "adj",
          'jeder' => "adj",
          'gegenueber' => "prep",
          'wem' => "questionword",
          'schwuel' => "adj",
          'is' => "v",
          'welchem' => "questionword",
          'schlecht' => "adj",
          'beruehmtest' => "adj",
          'linken' => "adj",
          'zusammen' => "adj",
          'wohnt' => "v",
          'online' => "adj",
          'schnecken' => "n",
          'often' => "adj",
          'neunte' => "adj",
          'verfuegbar' => "adj",
          'finster' => "adj",
          'hauptstadt' => "n",
          'siehst' => "v",
          'hei?' => "adj",
          'blau' => "adj",
          'seinen' => "art",
          'tief' => "adj",
          'offenbar' => "adj",
          'nst' => "adj",
          'um' => "prep",
          'leichtem' => "adj",
          'heissen' => "v",
          'zehn' => "adj",
          'eueres' => "art",
          'lately' => "adj",
          'neun' => "adj",
          'rasch' => "adj",
          'soll' => "v",
          'klamm' => "adj",
          'ueber' => "prep",
          'seins' => "n",
          'c' => "n",
          'hold' => "adj",
          'vierzehnte' => "adj",
          'hell' => "adj",
          'fest' => "adj",
          'you' => "n",
          'dies' => "art",
          'achtzehn' => "adj",
          'heikel' => "adj",
          'toll' => "adj",
          'ihrer' => "art",
          'hunderttausend' => "adj",
          'neunzehn' => "adj",
          'monotonen' => "adj",
          'abends' => "adj",
          'munter' => "adj",
          'nach' => "prep",
          'weiss' => "adj",
          'weitgehend' => "adj",
          'farbe' => "n",
          'deiner' => "art",
          'schoen' => "adj",
          'm' => "questionword",
          'milliarden' => "adj",
          'allgemeine' => "adj",
          'liege' => "v",
          'sanft' => "adj",
          'f=>' => "v",
          'waerst' => "v",
          'nothing' => "n",
          'sen' => "adj",
          'vierzig' => "adj",
          '~~~' => "v",
          '~' => "v",
          '==' => "v",
          '=>' => "v",
          '=' => "v",
          'is-a' => "v",
          'is-part' => "v",
          'is-own' => "v",
          '=' => "v",
          '>>>' => "v",
          '->' => "v",
          '!=>' => "v",
          '?=>' => "v",
          'opposite' => "v",
          'ihr' => "art",
          'rauh' => "adj",
          'ob' => "questionword",
          'hoch' => "adj",
          'berufe' => "v",
          'that' => "art",
          'drei' => "adj",
          'besondere' => "adj",
          'anhalten' => "v",
          'our' => "art",
          'beruht' => "v",
          'halte' => "v",
          'fesch' => "adj",
          'berufen' => "v",
          'zuletzt' => "adj",
          'barock' => "n",
          'schlaff' => "adj",
          'nah' => "adj",
          'dreizehn' => "adj",
          'nen' => "adj",
          'moechten' => "v",
          'b' => "n",
          'uebt' => "v",
          'gst' => "n",
          'steif' => "adj",
          'satt' => "adj",
          'duerfte' => "v",
          'wirr' => "adj",
          'dunkel' => "adj",
          'bist' => "v",
          'doch' => "inter",
          'zone' => "n",
          'besonderem' => "adj",
          'anderen' => "adj",
          'neue' => "adj",
          'unseres' => "art",
          'bereits' => "adj",
          'vorwaerts' => "adj",
          'to' => "prep",
          'endlich' => "adj",
          'existiert' => "v",
          'ebenfalls' => "adj",
          'eurem' => "art",
          'film' => "n",
          'dein' => "art",
          'zwanzigste' => "adj",
          'siebzehn' => "adj",
          'beiden' => "adj",
          'herb' => "adj",
          'rund' => "adj",
          'bekannt' => "adj",
          'linkem' => "adj",
          'seit' => "prep",
          'seinem' => "art",
          'auf' => "prep",
          'hin' => "adj",
          'eher' => "adj",
          'den' => "art",
          'stumm' => "adj",
          'besonderer' => "adj",
          'auch' => "adj",
          'sechzehn' => "adj",
          'an' => "prep",
          'against' => "prep",
          'gerne' => "adj",
          'der' => "art",
          'erstem' => "adj",
          'page' => "n",
          'benachbarte' => "adj",
          'tumb' => "adj",
          'eigen' => "adj",
          'untertauchen' => "v",
          'seine' => "art",
          'wenig' => "adj",
          'or' => "linking",
          'soon' => "adj",
          'willst' => "v",
          'mehrmals' => "adj",
          'berg' => "n",
          'haeltst' => "v",
          'duerfen' => "v",
          'verwendet' => "v",
          'hirn' => "n",
          'er' => "n",
          '(hoh)' => "adj",
          'per' => "prep",
          'kannst' => "v",
          'kann' => "v",
          'eng' => "adj",
          'sproede' => "adj",
          'eine' => "art",
          'tomorrow' => "adj",
          'jungem' => "adj",
          'gehst' => "v",
          'als' => "prep",
          'mir' => "n",
          'deren' => "adj",
          'mittlerweile' => "adj",
          'wuerdest' => "v",
          'neben' => "prep",
          'are' => "v",
          'liegst' => "v",
          'wichtig' => "adj",
          'bring' => "v",
          'unreif' => "adj",
          'leer' => "adj",
          'fein' => "adj",
          'offline' => "adj",
          'hase' => "n",
          'woanders' => "adj",
          'link' => "adj",
          'fine' => "adj",
          'worauf' => "questionword",
          'dass' => "questionword",
          'tapfer' => "adj",
          'between' => "prep",
          'seitdem' => "adj",
          'nun' => "adj",
          'flach' => "adj",
          'obschon' => "questionword",
          'aber' => "questionword",
          'interessieren' => "v",
          'sicher' => "adj",
          'zuweilen' => "adj",
          'gute' => "adj",
          'stolz' => "adj",
          'heisse' => "v",
          'my' => "art",
          '_to_' => "questionword",
          'erstes' => "adj",
          'weder' => "prep",
          'intakt' => "adj",
          'gutem' => "adj",
          'hautfarbe' => "n",
          'ihre' => "art",
          'haetten' => "v",
          'heute' => "adj",
          'zeichen' => "n",
          'e' => "n",
          'oede' => "adj",
          'mitten' => "prep",
          'frueh' => "adj",
          'feucht' => "adj",
          'gehe' => "v",
          'scharf' => "adj",
          'leichter' => "adj",
          'alle' => "adj",
          'moechtest' => "v",
          'beiderseits' => "adj",
          'gelb' => "adj",
          'stem' => "adj",
          'sehe' => "v",
          'insoweit' => "adj",
          'ueberhaupt' => "adj",
          'sten' => "adj",
          'schneidet' => "v",
          'lasch' => "adj",
          'XXtoXX' => "questionword",
          'welsch' => "adj",
          'rar' => "adj",
          'heisst' => "v",
          'rechtem' => "adj",
          'schlapp' => "adj",
          'allgemeinem' => "adj",
          'andererseits' => "adj",
          'voll' => "adj",
          'teressiere' => "v",
          'und' => "linking",
          'erbaut' => "v",
          'rege' => "adj",
          'reasonof' => "v",
          'keines' => "adj",
          'diese' => "art",
          'innen' => "adj",
          'diesen' => "art",
          'euren' => "art",
          'schon' => "adj",
          'bin' => "v",
          'gab' => "v",
          'arg' => "adj",
          'zwanzig' => "adj",
          'barsch' => "adj",
          'schmal' => "adj",
          'pulls' => "v",
          '$$anyone$$' => "n",
          '$$aswellas$$' => "n",
          '$$notaswellas$$' => "adj",
          'tag' => "n",
          'allgemeines' => "adj",
          'erst' => "adj",
          'ich' => "n",
          'junger' => "adj",
          'teils' => "prep",
          'stmals' => "adj",
          'wird' => "v",
          'hart' => "adj",
          'ab' => "prep",
          'dumm' => "adj",
          'freehal' => "n",
          'licht' => "adj",
          'lieb' => "adj",
          'faul' => "adj",
          'aussen' => "adj",
          'des' => "art",
          'diesem' => "art",
          'seh' => "v",
          'spaeter' => "adj",
          'letzt' => "adj",
          'schraeg' => "adj",
          'schlank' => "adj",
          'krude' => "adj",
          'am' => "v",
          'read' => "v",
          'reads' => "v",
          'krumm' => "adj",
          'volle' => "adj",
          'flink' => "adj",
          'vorher' => "adj",
          'untertauchst' => "v",
          'wurden' => "v",
          'alt' => "adj",
          'wurde' => "v",
          'sieben' => "adj",
          '>>>' => "v",
          'wurdest' => "v",
          'takt' => "adj",
          'falsch' => "adj",
          'bitter' => "adj",
          'wohne' => "v",
          'normalerweise' => "adj",
          'werde' => "v",
          'eines' => "art",
          'suchst' => "v",
          'prall' => "adj",
          'unreifen' => "adj",
          'why' => "questionword",
          'siebte' => "adj",
          'mit' => "prep",
          'anders' => "adj",
          'statt' => "prep",
          'tree' => "n",
          'du' => "n",
          'waehrend' => "questionword",
          'has' => "v",
          'deutsch' => "adj",
          'd' => "n",
          'enden' => "v",
          'angst' => "n",
          'plump' => "adj",
          'eben' => "adj",
          'stets' => "adj",
          'lahm' => "adj",
          'tauchst' => "v",
          'denselben' => "adj",
          'out' => "prep",
          'ist' => "v",
          'kuehl' => "adj",
          'vorhin' => "adj",
          'meisten' => "adj",
          'ends' => "adj",
          'monotonem' => "adj",
          'schwarz' => "adj",
          'welch' => "questionword",
          'ungefaehr' => "adj",
          'sowohl' => "prep",
          'telligent' => "adj",
          'kahl' => "adj",
          'woran' => "questionword",
          'unter' => "prep",
          'gehirn' => "n",
          'falls' => "questionword",
          'allgemein' => "adj",
          'pages' => "n",
          'must' => "v",
          'equal' => "adj",
          'mueder' => "adj",
          'essen' => "v",
          'wir' => "n",
          'ihren' => "art",
          'breit' => "adj",
          'keiner' => "adj",
          'allgemeinen' => "adj",
          'schwach' => "adj",
          'anfangs' => "adj",
          'weich' => "adj",
          'haette' => "v",
          'universitaet' => "n",
          'druesenendstueck' => "n",
          'sechs' => "adj",
          'keine' => "adj",
          'mehr' => "adj",
          'hast' => "v",
          'rechts' => "adj",
          'atomaren' => "adj",
          'halben' => "adj",
          'jedes' => "adj",
          'zeitlebens' => "adj",
          'einem' => "art",
          'dreist' => "adj",
          'spricht' => "v",
          'gut' => "adj",
          'beschlossen' => "v",
          'leichte' => "adj",
          'erste' => "adj",
          'gruen' => "adj",
          'liegen' => "v",
          'beschlagnahmt' => "adj",
          'rein' => "adj",
          'blank' => "adj",
          'wichtige' => "adj",
          'schier' => "adj",
          'hatte' => "v",
          'recently' => "adj",
          'waerts' => "adj",
          'eins' => "adj",
          'jung' => "adj",
          'ernst' => "adj",
          'zweites' => "adj",
          'nur' => "adj",
          'im' => "prep",
          'xxtoxx' => "questionword",
          'woher' => "questionword",
          'en' => "n",
          'suche' => "v",
          'vor' => "prep",
          'aus' => "prep",
          'fromm' => "adj",
          'whether' => "questionword",
          'monotoner' => "adj",
          'zu' => "prep",
          'feig' => "adj",
          'duenn' => "adj",
          '->' => "v",
          'dreimal' => "adj",
          'weil' => "questionword",
          'unsere' => "art",
          'wohl' => "adj",
          'tot' => "adj",
          'welches' => "questionword",
          'morgen' => "adj",
          'schwul' => "adj",
          'sechzig' => "adj",
          'q=>' => "v",
          'junges' => "adj",
          'soviel' => "adj",
          'beizeiten' => "adj",
          'elf' => "adj",
          'weise' => "adj",
          'schlimm' => "adj",
          'mund' => "n",
          'bildet' => "v",
          'rau' => "adj",
          'hunderte' => "adj",
          'krank' => "adj",
          'etwa' => "adj",
          'bilden' => "v",
          'was' => "questionword",
          'waschen' => "v",
          'schief' => "adj",
          'bringst' => "v",
          'fuenfzehn' => "adj",
          'meiste' => "adj",
          '\ufffdbermorgen' => "adj",
          'sondern' => "prep",
          'ste' => "adj",
          'dritter' => "adj",
          'mitunter' => "adj",
          'linke' => "adj",
          'deinen' => "art",
          'meiner' => "art",
          'weilen' => "adj",
          'nieder' => "adj",
          'if' => "questionword",
          'guten' => "adj",
          'leichtes' => "adj",
          'achzig' => "adj",
          'komma' => 10,
          'always' => "adj",
          'vierte' => "adj",
          'unserem' => "art",
          'name' => "n",
          'keusch' => "adj",
          'hager' => "adj",
          'trueb' => "adj",
          'erfunden' => "adj",
          'untertaucht' => "v",
          'besetzt' => "adj",
          'derb' => "adj",
          'your' => "art",
          'neuen' => "adj",
          'stet' => "adj",
          'fuenfzehnte' => "adj",
          'wen' => "questionword",
          'wohin' => "questionword",
          'eures' => "art",
          'hautfarben' => "n",
          'fuenfte' => "adj",
          'manchmal' => "adj",
          'die' => "art",
          'findet' => "v",
          'streng' => "adj",
          'gutes' => "adj",
          'cdu' => "n",
          'cooles' => "adj",
          'arena' => "n",
          'have' => "v",
          'ist-mit' => "v",
          'rechtes' => "adj",
          'hehr' => "adj",
          'inzwischen' => "adj",
          'sacht' => "adj",
          'fies' => "adj",
          'anstatt' => "questionword",
          'schmuck' => "adj",
          'gesund' => "adj",
          'scheel' => "adj",
          'erfunden' => "v",
          'erfand' => "v",
          'gegen' => "prep",
          'wolltest' => "v",
          'frech' => "adj",
          'today' => "adj",
          'nahe' => "adj",
          'uebst' => "v",
          'unreifes' => "adj",
          'wichtiger' => "adj",
          'roh' => "adj",
          'frei' => "adj",
          'grundlegend' => "adj",
          'darfst' => "v",
          'heisser' => "adj",
          'natural' => "adj",
          'spaet' => "adj",
          'nachher' => "adj",
          'damit' => "questionword",
          'vieler' => "adj",
          'bestehen' => "v",
          'wuerde' => "v",
          'gro?' => "adj",
          'besonders' => "adj",
          'studiert' => "v",
          'keinem' => "adj",
          'hohl' => "adj",
          'zweiten' => "adj",
          'fix' => "adj",
          'immer' => "adj",
          'dererseits' => "adj",
          'wirst' => "v",
          'intelligent' => "adj",
          'vereinigten' => "adj",
          'untertauche' => "v",
          'hattest' => "v",
          'euer' => "art",
          'mehrals' => "prep",
          'zugleich' => "adj",
          'dicht' => "adj",
          'teressierst' => "v",
          'beispielsweise' => "adj",
          'erster' => "adj",
          'war' => "v",
          'treu' => "adj",
          'aerobe' => "n",
          'fr\ufffdher' => "adj",
          'wegs' => "adj",
          'elend' => "adj",
          'kalt' => "adj",
          'heil' => "adj",
          'bloss' => "adj",
          'ganz' => "adj",
          'sauber' => "adj",
          '=>' => "v",
          'beruehmte' => "adj",
          'welche' => "questionword",
          'fangs' => "adj",
          'biszu' => "prep",
          'wahr' => "adj",
          'interessiere' => "v",
          'millionen' => "adj",
          'folgende' => "adj",
          'muedes' => "adj",
          'moegen' => "v",
          'because' => "questionword",
          'grosses' => "adj",
          'dritte' => "adj",
          'muede' => "adj",
          'tausend' => "adj",
          'wacker' => "adj",
          'gleich' => "adj",
          'lauter' => "adj",
          'gratis' => "adj",
          'schwanger' => "adj",
          'muerbe' => "adj",
          'not' => "adj",
          'vierzehn' => "adj",
          'fuer' => "prep",
          'nachdem' => "questionword",
          'einen' => "art",
          'who' => "questionword",
          'jede' => "adj",
          'wert' => "adj",
          'kess' => "adj",
          'wie' => "questionword",
          'vier' => "adj",
          'siebzig' => "adj",
          'bilde' => "v",
          'eingenommen' => "v",
          'ts' => "adj",
          'schenke' => "v",
          'klar' => "adj",
          'schrill' => "adj",
          'uebe' => "v",
          'simple' => "adj",
          'kein' => "adj",
          'guter' => "adj",
          'siebzehnte' => "adj",
          'waere' => "v",
          'did' => "v",
          'wuest' => "adj",
          'does' => "v",
          'do' => "v",
          'drittes' => "adj",
          'benachbart' => "adj",
          'besonderen' => "adj",
          'ten' => "prep",
          'interessierst' => "v",
          'atomar' => "adj",
          'rechte' => "adj",
          'ihrem' => "art",
          'bringt' => "v",
          'mager' => "adj",
          'sein' => "v",
          'froh' => "adj",
          'her' => "adj",
          'achte' => "adj",
          'fade' => "adj",
          'viele' => "adj",
          'blass' => "adj",
          'jeden' => "adj",
          'mond' => "n",
          'the' => "art",
          'haettest' => "v",
          'sagen' => "v",
          'sagst' => "v",
          'sage' => "v",
          'schick' => "adj",
          'eueren' => "art",
          'done' => "adj",
          'mein' => "art",
          'kenn' => "v",
          'kenne' => "v",
          'kennst' => "v",
          'anhaeltst' => "v",
          'bisauf' => "prep",
          'sechzehnte' => "adj",
          'teressieren' => "v",
          'zehnte' => "adj",
          'hundert' => "adj",
          'bisin' => "prep",
          'barocke' => "adj",
          'rueckwaerts' => "adj",
          'wien' => "n",
          'seither' => "adj",
          'waerest' => "v",
          'zwoelfte' => "adj",
          'gehoeren' => "v",
          'jeck' => "adj",
          'bern' => "n",
          'io' => "n",
          'bewahren' => "v",
          'this' => "art",
          '?=>' => "v",
          'heiter' => "adj",
          'for' => "prep",
          'nehme' => "v",
          'jedem' => "adj",
          'neu' => "adj",
          'macht' => "v",
          'vieles' => "adj",
          'zweelement' => "adj",
          'dich' => "n",
          'wichtiges' => "adj",
          'dienstags' => "adj",
          'be' => "v",
          'linker' => "adj",
          'zonen' => "n",
          'funden' => "adj",
          'neunzehnte' => "adj",
          'anhaben' => "v",
          'uns' => "n",
          'yesterday' => "adj",
          'selbe' => "adj",
          'r' => "questionword",
          'zweite' => "adj",
          'morsch' => "adj",
          'beruhen' => "v",
          'never' => "adj",
          'krass' => "adj",
          'h' => "n",
          'frueher' => "adj",
          'schuechtern' => "adj",
          'gern' => "adj",
          'gehoert' => "v",
          'f' => "n",
          'unseren' => "art",
          'schenkte' => "v",
          'sie' => "n",
          'mochtest' => "v",
          'noch' => "adj",
          'blo?' => "adj",
          'dick' => "adj",
          'wohingegen' => "questionword",
          'wund' => "adj",
          'geh' => "v",
          'stur' => "adj",
          'weltweit' => "adj",
          'wohnst' => "v",
          'schnecke' => "n",
          'neuem' => "adj",
          'rechter' => "adj",
          'jedoch'  => "adj",
          'finden'  => "v",
};

set multi-line new global hash builtin_time_relations to {
        "today" =>                  [ 24*60*60,      0      ],
        "yesterday" =>              [ 24*60*60,      -1     ],
        "tomorrow" =>               [ 24*60*60,      +1     ],
        "in-days" =>                [ 24*60*60,      +1     ],
        "ago-days" =>               [ 24*60*60,      -1     ],

        "this week" =>              [ 7*24*60*60,    0      ],
        "current week" =>           [ 7*24*60*60,    0      ],
        "last week" =>              [ 7*24*60*60,    -1     ],
        "previous week" =>          [ 7*24*60*60,    -1     ],
        "next week" =>              [ 7*24*60*60,    +1     ],
        "following week" =>         [ 7*24*60*60,    +1     ],
        "in-weeks" =>               [ 7*24*60*60,    +1     ],
        "ago-weeks" =>              [ 7*24*60*60,    -1     ],

        "in a quarter" =>              [ 15*60,         +1     ],
        "in a quarter-hour" =>         [ 15*60,         +1     ],
        "in a quarter of an hour" =>   [ 15*60,         +1     ],
        "in quarter" =>                [ 15*60,         +1     ],
        "in quarter-hour" =>           [ 15*60,         +1     ],
        "in quarter of an hour ago" => [ 15*60,         +1     ],
        "a quarter ago" =>             [ 15*60,         +1     ],
        "a quarter-hour ago" =>        [ 15*60,         +1     ],
        "a quarter of an hour ago" =>  [ 15*60,         +1     ],
        "quarter ago" =>               [ 15*60,         +1     ],
        "quarter-hour ago" =>          [ 15*60,         +1     ],
        "quarter of an hour ago" =>    [ 15*60,         +1     ],
        "in half an hour" =>           [ 30*60,         +1     ],
        "half an hour ago" =>          [ 30*60,         -1     ],
        "in half a hour" =>            [ 30*60,         +1     ],
        "half a hour ago" =>           [ 30*60,         -1     ],
        "in hour" =>                   [ 60*60,         +1     ],
        "ago hour" =>                  [ 60*60,         -1     ],
        "in-hours" =>                  [ 60*60,         +1     ],
        "ago-hours" =>                 [ 60*60,         -1     ],

};

set new global array builtin_time_relations_names to an empty array
set elements of global array builtin_time_relations_names to keys with elements of hash builtin_time_relations

define action time_pre_transformations with var sentence, var lang, var path do
    do regex with var sentence: /(in|ago)\s*?(?:a|an)\s*?(<[a-zA-Z]>*?hour<[a-zA-Z]>*?)(\s|$)/ -> "$0 $1$2" :global:i
    do regex with var sentence: /(in|ago)\s*?(<[0-9]>+?)\s*?(hour|hours|week|weeks|day|days)/ -> "$1* $0-$2" :global:i
    do regex with var sentence: /(<[0-9]>+?)\s*?(hour|hours|week|weeks|day|days) ago/ -> "$0* ago-$1" :global:i
    do regex with var sentence: /beginning of (last|previous|next|following)\s*?(hour|hours|week|weeks|day|days)/ -> "$0" :global:i
    do regex with var sentence: /end of (last|previous|next|following)\s*?(hour|hours|week|weeks|day|days)/ -> "$0" :global:i
    do regex with var sentence: /(^|\s)(on|at) (\d+?\<[-.\/]>\d+?\<[-.\/]>\d+?)(\s|$)/ -> " on-$1 " :global:i
    do regex with var sentence: /(^|\s)(?:since|from) (\d+?\<[-.\/]>\d+?\<[-.\/]>\d+?)(\s|$)/ -> " from-$1 " :global:i
    do regex with var sentence: /(^|\s)(to|until|till) (\d+?\.\d+?\.\d+?)(\s|$)/ -> " to-$1 " :global:i

    do return with var sentence
done

define action add_undefined_time with array clause do
    do return with array clause
done

define action phrases_error_toomuch without arguments do
    set new array phrases to an empty array
    push into array phrases, [ 0, "Sorry, but there's too much data about that topic." ]
    do return with array phrases
done


#define action guess_part_of_speech with var word do
#    set new var guessed to 'n'
#    if var word matches /ste$/ do
#        set var guessed to 'adj'
#    done
#
#    do return using var guessed
#done

define action get_article with var genus, var part_of_sentence, var def do
    if var def matches /indef/ do
        do return with "a"
    done
    else do
        do return with "the"
    done

    do return with ""
done

define action get_person with var _noun do
    set new var noun to lc with var _noun

    if var noun matches "i" do
        do return with "1s"
    done
    if var noun matches "you" do
        do return with "2s"
    done
    if var noun matches /^(he|she|it)$/ do
        do return with "3s"
    done
    if var noun matches "we" do
        do return with "1p"
    done
    if var noun matches "you" do
        do return with "2p"
    done
    if var noun matches "they" do
        do return with "3p"
    done

    do return with "3s"
done

define action get_plural with var str do
    do return with var str
done

define action get_pos_word with var str do
    if var str matches /^v/ do
        do return with "verb"
    done
    if var str matches /^n/ do
        do return with "noun"
    done
    if var str matches /^adj/ do
        do return with "adjective"
    done
    do return with ""
done

define action get_verb with var verb, var person do

    if var verb matches "be" do
        if var person matches "1s" do
            return "am"
        done
        if var person matches "2s" do
            return "are"
        done
        if var person matches "3s" do
            return "is"
        done
        if var person matches "1p" do
            return "are"
        done
        if var person matches "2p" do
            return "are"
        done
        if var person matches "3p" do
            return "are"
        done
    done

    if var verb matches "have" do
        if var person matches "1s" do
            return "have"
        done
        if var person matches "2s" do
            return "have"
        done
        if var person matches "3s" do
            return "has"
        done
        if var person matches "1p" do
            return "have"
        done
        if var person matches "2p" do
            return "have"
        done
        if var person matches "3p" do
            return "have"
        done
    done

    if var verb matches "want" do
        do return with var verb
    done

    if var verb matches "must" do
        do return with var verb
    done

    if var verb matches "can" do
        do return with var verb
    done

    if var verb matches "may" do
        do return with var verb
    done

    if var verb matches "should" do
        do return with var verb
    done

    if var verb matches "is-same-as" do
        if var person matches "1s" do
            do return with "means"
        done
        else do
            do return with "mean"
        done
    done

    if var verb matches "is-part" do
        if var person matches "1s" do
            do return with "am a part of"
        done
        if var person matches "3s" do
            do return with "is a part of"
        done
        do return with "are a part of"
    done

    if var verb matches "is-own" do
        if var person matches "1s" do
            do return with "am owned by"
        done
        if var person matches "3s" do
            do return with "is owned by"
        done
        do return with "are owned by"
    done

    return ""
done

define action replace_general_reflexive_pronoun with var text, var person do
    set new var general_pronoun to "sich"
    set new var better_pronoun to "sich"

    if var person matches "1s" do
        set var better_pronoun to "mich"
    done
    if var person matches "2s" do
        set var better_pronoun to "dich"
    done
    if var person matches "3s" do
        set var better_pronoun to "sich"
    done
    if var person matches "1p" do
        set var better_pronoun to "uns"
    done
    if var person matches "2p" do
        set var better_pronoun to "euch"
    done
    if var person matches "3p" do
        set var better_pronoun to "sich"
    done

    do regex with var text: /\svar general_pronoun$/ -> " var better_pronoun" :global:i
    do regex with var text: /^var general_pronoun\s/ -> "var better_pronoun " :global:i
    do regex with var text: /^var general_pronoun$/ -> "var better_pronoun" :global:i

    do return with var text
done

define action compute_output with var output do
    do regex with var output: /f=>/ -> "" :global:i
    do regex with var output: /!=>/ -> "" :global:i
    if var output matches /q=>/ do
        do regex with var output: /q=>/ -> "" :global:i
        set var output to var output concat "?"
    done
    do regex with var output: /=>/ -> "" :global:i

    set new array verb_prefixes to elements-returning keys with elements of hash builtin_verb_prefixes

    for each new var prefix in array verb_prefixes do
        do regex with var output: /\s($prefix)(<[a-zA-Z0-9]>*?)\s(<[a-zA-Z0-9]>*?)\s/ -> " $1 $2 $0 " :global
        do regex with var output: /\s($prefix)(<[a-zA-Z0-9]>*?)$/ -> " $1 $0" :global
    done

    set new var random_number to rand using elements of array builtin_male_names
    set new var name to from array builtin_male_names element [ var random_number ]

    do regex with var output: /\$\$randomname\$\$/ -> "var name" :global:i
    do regex with var output: /<[*]>/ -> "var name" :global:i

    do regex with var output: / von den / -> " der " :global:i
    do regex with var output: / von dem / -> " des " :global:i

    set new var time_now to time without arguments
    set new array date_time_array to elements-returning localtime with var time_now
    set new var sec to from array date_time_array element [ 0 ]
    set new var min to from array date_time_array element [ 1 ]
    set new var hour to from array date_time_array element [ 2 ]
    set new var mday to from array date_time_array element [ 3 ]
    set new var mon to from array date_time_array element [ 4 ]
    set new var year to from array date_time_array element [ 5 ]
    set new var wday to from array date_time_array element [ 6 ]
    set new var yday to from array date_time_array element [ 7 ]
    set new var isdst to from array date_time_array element [ 8 ]

    set new var weekday to 'nothing'
    if var wday is 0 do
        set var weekday to "Sonday"
    done
    if var wday is 1 do
        set var weekday to "Monday"
    done
    if var wday is 2 do
        set var weekday to "Tuesday"
    done
    if var wday is 3 do
        set var weekday to "Wednesday"
    done
    if var wday is 4 do
        set var weekday to "Thirsday"
    done
    if var wday is 5 do
        set var weekday to "Friday"
    done
    if var wday is 6 do
        set var weekday to "Saturday"
    done

    set var year to var year + 1900

    do regex with var output: /\$\$ uhr/ -> "\$\$" :global:i
    do regex with var output: /\$\$time\$\$/ -> "var hour:var min:var sec" :global:i
    do regex with var output: /\$\$wday\$\$/ -> "var weekday" :global:i
    do regex with var output: /\$\$mday\$\$/ -> "var mday" :global:i
    do regex with var output: /\$\$month\$\$/ -> "var mon" :global:i
    do regex with var output: /\$\$year\$\$/ -> "var year" :global:i
    do regex with var output: /\$\$date\$\$/ -> "var mday.var mon.var year" :global:i

    do regex with var output: / be / -> " " :global:i



    do regex with var output: /_/ -> " " :global:i
    # Time From <-> time from
    do regex with var output: /time(<[\s]>|<[_]>|<[-]>)from(<[\s]>|<[_]>|<[-]>)/ -> "time from " :global:i
    do regex with var output: /time from\s+/ -> "time from " :global:i
    # Time To   <-> time to
    do regex with var output: /time(<[\s]>|<[_]>|<[-]>)to(<[\s]>|<[_]>|<[-]>)/ -> "time to " :global:i
    do regex with var output: /time to\s+/ -> "time to " :global:i

    set new var time_now to time without arguments
    set new var time_begin to time without arguments
    set new var time_end to 0
    if var output matches /time_from-(<[0-9]>+?)(\s|$)/ do
        set var time_begin to $0
    done
    if var output matches /time from (<[0-9]>+?)(\s|$)/ do
        set var time_begin to $0
    done
    if var output matches /time_to-(<[0-9]>+?)(\s|$)/ do
        set var time_end to $0
    done
    if var output matches /time to (<[0-9]>+?)(\s|$)/ do
        set var time_end to $0
    done

    set new array date_time_array to elements-returning localtime with var time_begin
    set new var sec to from array date_time_array element [ 0 ]
    set new var min to from array date_time_array element [ 1 ]
    set new var hour to from array date_time_array element [ 2 ]
    set new var mday to from array date_time_array element [ 3 ]
    set new var mon to from array date_time_array element [ 4 ]
    set new var year to from array date_time_array element [ 5 ]
    set new var wday to from array date_time_array element [ 6 ]
    set new var yday to from array date_time_array element [ 7 ]
    set new var isdst to from array date_time_array element [ 8 ]

    if not var min matches /../ do
        set var min to "0" concat var min
    done
    if not var sec matches /../ do
        set var sec to "0" concat var sec
    done
    if not var hour matches /../ do
        set var hour to "0" concat var hour
    done

    set new var weekday to 'nichts'
    if var wday is 0 do
        set var weekday to "Sonntag"
    done
    if var wday is 1 do
        set var weekday to "Montag"
    done
    if var wday is 2 do
        set var weekday to "Dienstag"
    done
    if var wday is 3 do
        set var weekday to "Mittwoch"
    done
    if var wday is 4 do
        set var weekday to "Donnerstag"
    done
    if var wday is 5 do
        set var weekday to "Freitag"
    done
    if var wday is 6 do
        set var weekday to "Samstag"
    done

    set var year to var year + 1900
    set var mon to var mon + 1
    if var mon matches /^.$/ do
        set var mon to "0" concat var mon
    done
    if var mday matches /^.$/ do
        set var mday to "0" concat var mday
    done

    do regex with var output: /\$\$time\$\$/ -> "var hour:var min:var sec" :global:i
    do regex with var output: /\$\$wday\$\$/ -> "var weekday" :global:i
    do regex with var output: /\$\$mday\$\$/ -> "var mday" :global:i
    do regex with var output: /\$\$month\$\$/ -> "var mon" :global:i
    do regex with var output: /\$\$year\$\$/ -> "var year" :global:i
    do regex with var output: /\$\$date\$\$/ -> "var mday\/var mon\/var year" :global:i

    do regex with var output: /array\(.*?\)/ -> "" :global:i

    do regex with var output: /<[~]>time.*/ -> "" :global:i


    if var time_end + 24*60*60 is var time_begin do
        set new var temp to var time_end
        set var time_end to var time_begin
        set var time_begin to var temp
    done

    if var time_begin + 24*60*60 is var time_end do
        if var output matches /time from (<[0-9]>+?)(\s|$)/ do
            set new var replacement to ''
            if not ( var time_now < var time_end and var time_now > var time_begin ) do
                set var replacement to var replacement concat ' on ' concat var mday concat '.' concat var mon concat '.' concat var year
            done
            if var hour or var min or var sec do
                set var replacement to var replacement concat ' at ' concat var hour concat ':' concat var min
            done
            do regex with var output: /time from (<[0-9]>+?)(\s|$)/ -> "var replacement" :global:i
            do regex with var output: /time to (<[0-9]>+?)(\s|$)/ -> "" :global:i
        done
    done
    else do
        if var output matches /time from (<[0-9]>+?)(\s|$)/ do
            print "From: " concat var mday concat '.' concat var mon concat '.' concat var year concat ' ' concat var hour concat ':' concat var min concat new line
            set new var replacement to ''
            if not ( var time_now < var time_end and var time_now > var time_begin ) do
                set var replacement to var replacement concat ' from ' concat var mday concat '.' concat var mon concat '.' concat var year
            done
            else if var hour or var min or var sec do
                set var replacement to var replacement concat ' until ' concat var hour concat ':' concat var min
            done
            do regex with var output: /time from (<[0-9]>+?)(\s|$)/ -> "var replacement" :global:i
        done

        set new array date_time_array to elements-returning localtime with var time_end
        set new var sec to from array date_time_array element [ 0 ]
        set new var min to from array date_time_array element [ 1 ]
        set new var hour to from array date_time_array element [ 2 ]
        set new var mday to from array date_time_array element [ 3 ]
        set new var mon to from array date_time_array element [ 4 ]
        set new var year to from array date_time_array element [ 5 ]
        set new var wday to from array date_time_array element [ 6 ]
        set new var yday to from array date_time_array element [ 7 ]
        set new var isdst to from array date_time_array element [ 8 ]

        if not var min matches /../ do
            set var min to "0" concat var min
        done
        if not var sec matches /../ do
            set var sec to "0" concat var sec
        done
        if not var hour matches /../ do
            set var hour to "0" concat var hour
        done

        set var year to var year + 1900
        set var mon to var mon + 1
        if var mon matches /^.$/ do
            set var mon to "0" concat var mon
        done
        if var mday matches /^.$/ do
            set var mday to "0" concat var mday
        done

        if var output matches /time to (<[0-9]>+?)(\s|$)/ do
            print "To:   " concat var mday concat '.' concat var mon concat '.' concat var year concat ' ' concat var hour concat ':' concat var min concat new line
            set new var replacement to ''
            if var hour matches "00" and var min matches "00" and var sec matches "00" do
                set var replacement to var replacement concat ' until ' concat var mday concat '.' concat var mon concat '.' concat var year
            done
            else if var hour or var min or var sec do
                set var replacement to var replacement concat ' until ' concat var hour concat ':' concat var min
            done
            do regex with var output: /time to (<[0-9]>+?)(\s|$)/ -> "var replacement" :global:i
        done
    done



    do regex with var output: /NULL/ -> "" :global:i
    do regex with var output: /<[;]>/ -> " " :global:i
    do regex with var output: / = / -> " means " :global:i
    do regex with var output: /_/ -> " " :global:i
    do regex with var output: /\s+/ -> " " :global:i
    do regex with var output: /\s+<[,]>/ -> "," :global:i
    do regex with var output: /\s\s/ -> " " :global:i
    do regex with var output: /^\s/ -> "" :global:i
    do regex with var output: /\s$/ -> "" :global:i
    set var output to ucfirst with var output

    if not var output matches /<[?!]>/ do
        set var output to var output concat "."
    done

    do return with var output
done

define action check_for_as_well_as with var text, var adverbs, var lang, var path do
    if var text matches /\$\$aswellas\$\$/ do
        do regex with var text: /\$\$aswellas\$\$/ -> " as well as " :i
        do regex with var text: /\s+/ -> " " :i
    done
    if var text matches /\$\$notaswellas\$\$/ do
        set var text to "neither " concat var text
        do regex with var text: /\$\$aswellas\$\$/ -> " nor " :i
        do regex with var text: /\s+/ -> " " :i
    done
    do return with var text
done

define action toggle_verbs with array verbs, array entities do
    set new flag continue to 0
    for each new array entity_array in array entities is rw do
        set new var entity to from array entity_array 1st element

        if lc(var entity) matches /(^|\s)(i|you|me|myself|yourself)(\s|$)/ do
            set flag continue to 1
        done
    done

    if not flag continue do
        do return with array verbs
    done

    for each new array verb_array in array verbs is rw do
        set new var verb to from array verb_array 1st element
        if var verb matches "is" do
            go to next
        done
        if var verb matches /^am$/ do
            do regex with var verb: /^am$/ -> "are" :global:i
        done
        else if var verb matches /^are$/ do
            do regex with var verb: /^are$/ -> "am" :global:i
        done
        set from array verb_array 1st element to var verb
    done
    do return with array verbs
done

define action toggle_entities with array entities do
    for each new array entity_array in array entities is rw do
        set new var entity to from array entity_array 1st element
        if lc(var entity) matches /(^|\s)you($|\s)/ do
            do regex with var entity: /(^|\s)you($|\s)/ -> "${1}i$2" :global:i
        done
        else if lc(var entity) matches /(^|\s)i($|\s)/ do
            do regex with var entity: /(^|\s)i($|\s)/ -> "${1}you$2" :global:i
        done
        else if lc(var entity) matches /(^|\s)your($|\s)/ do
            do regex with var entity: /(^|\s)your($|\s)/ -> "${1}my$2" :global:i
        done
        else if lc(var entity) matches /(^|\s)my($|\s)/ do
            do regex with var entity: /(^|\s)my($|\s)/ -> "${1}your$2" :global:i
        done
        else if lc(var entity) matches /(^|\s)mine($|\s)/ do
            do regex with var entity: /(^|\s)mine($|\s)/ -> "${1}yours$2" :global:i
        done
        else if lc(var entity) matches /(^|\s)yours($|\s)/ do
            do regex with var entity: /(^|\s)yours($|\s)/ -> "${1}mine$2" :global:i
        done
        set from array entity_array 1st element to var entity
    done
    do return with array entities
done

define action adjust_truth with array result, var truth, var number_of_clause, var number_of_subclause do
    if var truth not matches "" and var truth < 0.5 do
        if from array result element [ var number_of_clause ] element [ 2 + (7*var number_of_subclause) ] matches /^a/ do
            do regex with from array result element [ var number_of_clause ] element [ 2 + (7*var number_of_subclause) ]: /^a(.?.?.?)$/ -> "no$0" :global:i
            do regex with from array result element [ var number_of_clause ] element [ 2 + (7*var number_of_subclause) ]: /^a(.?.?.?)\s/ -> "no$0 " :global:i
        done
        else if from array result element [ var number_of_clause ] element [ 1 + (7*var number_of_subclause) ] matches /^ein/ do
            do regex with from array result element [ var number_of_clause ] element [ 1 + (7*var number_of_subclause) ]: /^a(.?.?.?)$/ -> "no$0" :global:i
            do regex with from array result element [ var number_of_clause ] element [ 1 + (7*var number_of_subclause) ]: /^a(.?.?.?)\s/ -> "no$0 " :global:i
        done
        else do
            set from array result element [ var number_of_clause ] element [ 3  + (7*var number_of_subclause)] to "not " concat from array result element [ var number_of_clause ] element [ 3 + (7*var number_of_subclause) ]
        done
    done
done

define action builtin_has_time_place_adverbs_suffix with var word do
    if var word matches /ly$/ do
        do return with 1
    done
    if var word matches /time_/ do
        do return with 1
    done
    do return with 0
done

define action stem_nouns with array phrases do
    for each new var phrase in array phrases is rw do
        set new array words to split using /\s/, var phrase
        for each new var noun in array words is rw do
            # TEXT
            # Delete articles...
            # CODE
            if var noun matches /^\(a\)$/ do
                do regex with var noun: /^\(a\)$/ -> "*" :global:i
            done
            if var noun matches /^a$/ do
                do regex with var noun: /^a$/ -> "*" :global:i
            done
            if var noun matches /(the|that|this)$/ do
                do regex with var noun: /(the|that|this)$/ -> "*" :global:i
            done

            if length(var noun) <= 3 do
                go to next
            done

            # TEXT
            # That's the stemming algorithm
            # CODE
            if var noun matches /ers$/ do
                do regex with var noun: /ers$/ -> "*" :global:i
            done
            if var noun matches /e<[mnrs]>$/ do
                do regex with var noun: /e<[mnrs]>$/ -> "*" :global:i
            done
            if var noun matches /s$/ do
                do regex with var noun: /s$/ -> "*" :global:i
            done
            if var noun matches /<[bdfghklmnrt]>s$/ do
                do regex with var noun: /s$/ -> "*" :global:i
            done
            if var noun matches /est$/ do
                do regex with var noun: /est$/ -> "*" :global:i
            done
            if var noun matches /e<[nr]>$/ do
                do regex with var noun: /e<[nr]>$/ -> "*" :global:i
            done
            if var noun matches /<[bdfghklmnt]>st$/ do
                if length(var noun) > 5 do
                    do regex with var noun: /st$/ -> "*" :global:i
                done
            done
            if var noun matches /(end|ung)$/ do
                do regex with var noun: /(end|ung)$/ -> "*" :global:i

                if var noun matches /ig$/ and not var noun matches /eig$/ do
                    do regex with var noun: /ig$/ -> "*" :global:i
                done
            done
            if var noun matches /(ig|ik|isch)$/ and not var noun matches /e(ig|ik|isch)$/ do
                do regex with var noun: /(ig|ik|isch)$/ -> "*" :global:i
            done
            if var noun matches /(lich|heit)$/ do
                do regex with var noun: /(lich|heit)$/ -> "*" :global:i
            done
            if var noun matches /(lich|ig)?keit$/ do
                do regex with var noun: /(lich|ig)?keit$/ -> "*" :global:i
            done
        done
        set var phrase to join using " ", elements of array words

        do regex with var phrase: /<[*]>\s/ -> "*" :global
        do regex with var phrase: /\s<[*]>/ -> "*" :global
    done

    return array phrases
done

define action check_for_math with var input do
    set new var math to var input

    do regex with var math: /<[=?!.]>/ -> "" :global:i
    do regex with var math: /hoch/ -> "**" :global:i
    do regex with var math: /\^/ -> "**" :global:i
    do regex with var math: /wie/ -> "" :global:i
    do regex with var math: /viel/ -> "" :global:i
    do regex with var math: /was/ -> "" :global:i
    do regex with var math: /ergebnis/ -> "" :global:i
    do regex with var math: /von/ -> "" :global:i
    do regex with var math: /ist/ -> "" :global:i
    do regex with var math: /sind/ -> "" :global:i
    do regex with var math: /what/ -> "" :global:i
    do regex with var math: /is/ -> "" :global:i
    do regex with var math: /does/ -> "" :global:i
    do regex with var math: /makes/ -> "" :global:i
    do regex with var math: /ergibt/ -> "" :global:i
    do regex with var math: /gibt/ -> "" :global:i
    do regex with var math: /aus/ -> " " :global:i
    do regex with var math: /sich/ -> " " :global:i
    do regex with var math: /der|die|das/ -> " " :global:i
    do regex with var math: / plus / -> "+" :global:i
    do regex with var math: / half of (\d+)/ -> "( $1 \/ 2 )" :global:i
    do regex with var math: / minus / -> "-" :global:i
    set new var slash to "/"
    do regex with var math: / geteilt durch / -> "var slash" :global:i
    do regex with var math: / dividiert durch / -> "var slash" :global:i
    do regex with var math: / durch / -> "var slash" :global:i
    do regex with var math: / mal / -> "*" :global:i
    do regex with var math: /x/ -> "*" :global:i
    do regex with var math: /\s+/ -> "" :global:i
    do regex with var math: /wurzel/ -> "sqrt " :global:i
    do regex with var math: /<[,]>/ -> "." :global:i
    set new var value to undef

    if var math matches /^(<[\d+\-*.\/\s)(]>|(sqrt)|(sin)|(cos)|(tan)|(cot))+$/ do
        do regex with var math: /(sin|cos|tan|cot)(<[\d]>+)/ -> "$1($2)" :global:i
        do eval with 'var value = ' concat var math concat ';'
        if var value do
            return [ 0, var math concat " = " concat var value concat "." ]
        done
        else do
            return 0
        done
    done
    return 0
done

define action check_for_thanks with var input do
    set new array thanks_from_user to an empty array
    push into array thanks_from_user, 'thanks'
    push into array thanks_from_user, 'thank you'

    for each new var thank in array thanks_from_user do
        if lc(var input) matches /((\s)|<[,.\-!?]>|^)var thank((\s)|<[,.\-!?]>|$)/ do
            return 1
        done
    done

    return 0
done

define action say_answer_thanks with var user do
    set new array answers to an empty array
    push into array answers, "Okay"
    set new var random_number to rand using elements of array answers
    set new var answer to from array answers element [ var random_number ]

    do return with [ 0, var answer ]
done

define action check_for_greeting with var input do
    set new array greetings_from_user to an empty array
    push into array greetings_from_user, 'hello'
    push into array greetings_from_user, 'good day'
    push into array greetings_from_user, 'good morning'
    push into array greetings_from_user, 'good evening'
    push into array greetings_from_user, 'good night'
    push into array greetings_from_user, 'good afternoon'
    push into array greetings_from_user, 'hi'
    push into array greetings_from_user, 'welcome'

    for each new var greeting in array greetings_from_user do
        if lc(var input) matches /((\s)|<[,.\-!?]>|^)var greeting((\s)|<[,.\-!?]>|$)/ do
            return 1
        done
    done

    return 0
done

define action greet with var user do
    set new array time_now to elements-returning localtime without arguments
    set new var hour to from array time_now element [ 2 ]

    if var user do
        if var hour >= 0 and var hour < 5 do
            do return with [ 0, "Hi, " concat var user concat "." ]
        done
        if var hour >= 5 and var hour < 12 do
            do return with [ 0, "Good morning, " concat var user concat "." ]
        done
        if var hour >= 12 and var hour < 17 do
            do return with [ 0, "Good afternoon, " concat var user concat "." ]
        done
        if var hour >= 17 and var hour < 24 do
            do return with [ 0, "Good night, " concat var user concat "." ]
        done
    done
    else do
        if var hour >= 0 and var hour < 5 do
            do return with [ 0, "Hello." ]
        done
        if var hour >= 5 and var hour < 12 do
            do return with [ 0, "Good morning." ]
        done
        if var hour >= 12 and var hour < 17 do
            do return with [ 0, "Good afternoon." ]
        done
        if var hour >= 17 and var hour < 24 do
            do return with [ 0, "Good night." ]
        done
    done
done

define action make_parsable with var input do
    do regex with var input: / weil / -> ", weil " :global:i
    do regex with var input: / dass / -> ", dass " :global:i
    do regex with var input: / wenn / -> ", wenn " :global:i
    do regex with var input: / falls / -> ", falls " :global:i
    do regex with var input: / dann / -> ", dann " :global:i
    do regex with var input: /<[,]>\s*?<[,]>/ -> "," :global:i
    do regex with var input: /<[,]>\s*?<[,]>/ -> "," :global:i
    do regex with var input: /<[,]>\s*?<[,]>/ -> "," :global:i
    do regex with var input: /<[,]>\s*?<[,]>/ -> "," :global:i

    do return with var input
done

define action multiple_choices_verb with var verb do
    set new array choices to an empty array
    set new array endings to an empty array

    push into array endings, "en"
    push into array endings, "st"
    push into array endings, "t"
    push into array endings, "n"
    push into array endings, "e"
    push into array endings, ""

    for each new var ending in array endings do
        set new var copied_ending to var ending
        do regex with var verb: /var ending$/ -> "" :i
        if not var copied_ending matches var ending do
            go to last
        done
    done

    if var verb matches "bi" or var verb matches "is" or var verb matches /heis/ do
        push into array choices, "bin"
        push into array choices, "bist"
        push into array choices, "ist"
        push into array choices, "sind"
        push into array choices, "seid"
        push into array choices, "heisst"
        push into array choices, "heisse"
        push into array choices, "heissen"
    done
    else do
        for each new var ending in array endings do
            push into array choices, var verb concat var ending
        done
    done

    set new var verbs to join with "|", elements of array choices
    do return with var verbs
done

define action modify_input with var input, var current_language, var path do
    if length(var input) < 10 and var input matches /why/ do
        set new var input_handle to handle for file name var path concat '/lang_' concat var current_language concat '/output.history', read
        set new var last_output to ''
        for each new var line from var input_handle do
            set var last_output to var line
        done

        if var last_output do
            set var input to "why " concat var last_output concat "?"
        done
    done
    if var input matches /^because/ do
        set new var input_handle to handle for file name var path concat '/lang_' concat var current_language concat '/input.history', read
        set new var last_input to ''
        for each new var line from var input_handle do
            set var last_input to var line
        done

        if var last_input do
            set var input to var last_input concat " " concat var input
        done
    done

    return var input
done

define action find_mode_of_input with var input, var only_learn, var lang, var path do
    if var input matches /<[?]>/ do
        print "Sentence contains a question mark"
        print new line

        do return with "question"
    done
    else if lc(" " concat var input concat " ") matches /(<[,]>)|(komma)/ and (" " concat var input concat " ") matches /((\swhat\s)|(\swho\s)|(\show\s)|(\swhere\s)|(\swhen\s)|(\swhy\s)|(\swhom\s)).*?(<[,]>|(komma))/ do
        print "Sentence contains a question word and sub clauses"
        print new line

        do return with "question"
    done
    else if (" " concat var input concat " ") matches /(\swhat\s)|(\swho\s)|(\show\s)|(\swhere\s)|(\swhen\s)|(\swhy\s)|(\swhom\s)/ and not lc(" " concat var input concat " ") matches /(<[,]>)|(komma)/ do
        print "Sentence contains a question word"
        print new line

        do return with "question"
    done
    do return with "statement"
done

define action but_feature_is_useful with var input do
    if (" " concat var input concat " ") matches /(\swhat\s)|(\swho\s)|(\show\s)|(\swhere\s)|(\swhen\s)|(\swhy\s)|(\swhom\s)/ and not lc(" " concat var input concat " ") matches /(<[,]>)|(komma)/ do
        do return with 0
    done

    do return with 1
done

define action use_bug_feature with array results, hash parsed do
    do return with array results
done

define action use_random with var input, var current_language, var path, var mode do
    set new array random to an empty array

    print "Mode is: "
    print var mode
    print new line

    if var mode matches "statement" do
        push into array random, "Hmm."
        push into array random, "Ah."
        push into array random, "Aha."
        push into array random, "Hmm."
        push into array random, "Well."
        push into array random, "Yes."
        push into array random, "Oh."
        push into array random, "Okay."
    done
    else do
        print "Input is: "
        print var input
        print new line
        if lc(" " concat var input concat " ") matches /(\syes\s)|(\sno\s)|(\sok\s)|(\sis\sright\s)/ do
            push into array random, "Yes."
            push into array random, "Well."
            push into array random, "Okay."
            push into array random, "Of course."
            push into array random, elements of array random
        done
        else if lc(" " concat var input concat " ") matches /(\swho\s)|(\swhat\s)|(\show\s)|(\swhere\s)|(\swhen\s)|(\swhy\s)|(\swhose\s)|(\swhom\s)/ do
            push into array random, "I don't know."
            push into array random, "I don't know..."
            push into array random, "I don't know."
            push into array random, "I don't know."
            push into array random, "I don't know."
            push into array random, "I don't know."
            push into array random, "I don't know."
            push into array random, "I don't know."
            push into array random, "I really don't know."
            push into array random, "I don't know."
            push into array random, "I have never heard about that."
            push into array random, "I have never heard about it."
            push into array random, "I have never heard about this."
            push into array random, "Can you tell me?"
            push into array random, elements of array random
        done
        else do
            push into array random, "No."
            push into array random, "No."
            push into array random, "Ah?"
            push into array random, "Aha?"
            push into array random, "Hmm?"
            push into array random, "Hmm."
            push into array random, "Hm."
            push into array random, "No."
            push into array random, "No."
            push into array random, "No, I cannot believe."
            push into array random, "No."
            push into array random, "No."
            push into array random, "No."
            push into array random, "No, I can't imagine."
            push into array random, "No."
        done
    done


    for each new var r in array random do
        set var r to [ 0, var r ]
    done

    do return with array random
done

define action check_sentence_for_weather with var input do
    do return with ''
done

define action check_for_weather with var place, var lang, var path do
    do return without arguments
done

define action replace_he with var text, var replacement do
    do regex with var text: /\s+?(he)\s+?/ -> " var replacement " :global:i
    do return with var text
done

define action replace_she with var text, var replacement do
    do regex with var text: /\s+?(she)\s+?/ -> " var replacement " :global:i
    do return with var text
done

define action verb_category with var verb do
    if var verb matches /\// do
        do return with ""
    done

    if var verb matches /(must)/ do
        do return with "must"
    done
    if var verb matches /(want|wants|wanted|like|likes|liked)/ do
        do return with "want"
    done
    if var verb matches /(can|could)/ do
        do return with "can"
    done
    if var verb matches /(may|might)/ do
        do return with "may"
    done
    if var verb matches /(should)/ do
        do return with "should"
    done

    do return with ""
done

define action noun_for_anonymous without arguments do
    do return with "one"
done

define action adj_for_already without arguments do
    do return with "already"
done

define action adj_for_still without arguments do
    do return with "still"
done

define action adj_for_not without arguments do
    do return with "not"
done

define action upper_case_correction with var phrase, hash tags, var lang, var path do
    do return with var phrase
done

define action to_verb_prefix with var verb, var lang, var path do
    do return with ""
done

define action to_verb_root with var verb, var lang, var path do
    do return with var verb
done

define action to_verb_conjugation with var verb, var pre, var lang, var path do

    set new var past to var verb
    set new var participle to var verb

    if var participle matches /e$/ do
        set var participle to var participle concat "d"
    done
    else do
        set var participle to var participle concat "ed"
    done

    do return with [ var pre concat var verb, var past, var participle ]
done

define action make_participle with var participle, var lang, var path do
    do regex with var participle: /<[-]>/ -> "" :global
    do return with var participle
done

define action get_modal_verb_for_verb with var verb, var lang, var path do
    if var verb matches /go|do|did|does|is|are|am|strum|trip/ do
        do return with "be"
    done
    do return with "have"
done


define action get_score_answer without arguments do
    return [ 0, "Bewertung erfolgreich." ]
done

define action transform_to_name with var text do

    set new flag article_undef to 0
    if var text matches /(^|\s)(a|an)\s/ do
        set flag article_undef to 1
    done
    do regex with var text: /^(a|an)\s/ -> " " :global:i

    set new flag article_def to 0
    if var text matches /(^|\s)(the|that|this)/ do
        set flag article_def to 1
    done
    do regex with var text: /^(the|that|this)\s/ -> " " :global:i

    do regex with var text: /^\s+?/ -> "" :global:i
    do regex with var text: /\s+?$/ -> "" :global:i
    do regex with var text: /\s/ -> "_" :global:i

    set var text to "_" concat var text concat "_"
    if flag article_undef do
        set var text to "(a) " concat var text
    done
    if flag article_def do
        set var text to "(the) " concat var text
    done

    do return with var text
done

define action remove_adverbs with var text, var adverbs do
    if var text matches /^(.*?)\s(of)(.*?)$/ do
        set var text to $0
        if var adverbs do
            set var adverbs to var adverbs concat " "
        done
        set var adverbs to var adverbs concat $1 concat $2
    done

    do return using [ var text, var adverbs ]
done

