#
# This file is part of FreeHAL 2010.
#
# Copyright(c) 2006, 2007, 2008, 2009, 2010 Tobias Schulz and contributors.
# http://freehal.org
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#


set global hash sym_noun
set global hash sym_prep
set global hash sym_questionword
set global hash sym_verb
set global hash sym_inter
set global hash sym_adj
set global hash sym_pp
set global hash sym_unimportant
set global hash sym_linking
set global hash sym_art
set global hash sym_entity
set global hash sym_keyword
set global hash val_omit
set global const TYPE
set global const GENUS
set global var ident
set global array cache_memory
set global array standard_suffixes
set global var be_slow__last_time

compile source hal2009-defs.hal
require source hal2009-defs.hal


define action input_data_for_bottom_up_parser with array words, hash tags, var lang, var path do
    set new array data to an empty array

    for each new var word in array words do
        set new array current_tag to from hash tags element { var word }
        set new var tag to "q"

        if from hash sym_noun element { from array current_tag first element } do
            set new flag is_a_noun to is_name with var lang, var word
            if flag is_a_noun is true do
                set var tag to "d-title"
            done
            else do
                set var tag to "d-noun"
            done
        done
        if from hash sym_verb element { from array current_tag first element } do
            set var tag to "d-verb"
        done
        if from hash sym_art element { from array current_tag first element } do
            set var tag to "d-article"
        done
        if from hash sym_adj element { from array current_tag first element } do
            set var tag to "d-adjective"
        done
        if from hash sym_prep element { from array current_tag first element } do
            set var tag to "d-preposition"
        done
        if from hash sym_questionword element { from array current_tag first element } do
            set var tag to "d-questionword"
        done
        if from hash sym_linking element { from array current_tag first element } do
            set var tag to "d-linking"

            set var word to find_logical_operator with var word, var lang, var path
        done

        push into array data, [ var word, var tag ]
    done

    # no d-title's twice
    set new var i to 0
    while from array data element [ var i ] do
        set new var tag_prev to from array data element [ var i - 1 ] second element
        set new var tag_this to from array data element [ var i ] second element
        if var tag_this matches "d-title" and var tag_prev matches "d-title" do
            set from array data element [ var i - 1 ] second element to "d-noun"
        done

        set var i to var i + 1
    done

    # no d-title's twice
    set new var end_i to var i
    set var i to 0
    while from array data element [ var i ] do
        if var i + 1 is var end_i - 1 do
            set new var tag_prev to from array data element [ var i - 1 ] second element
            set new var tag_last to from array data element [ var i + 1 ] second element
            set new var tag_this to from array data element [ var i ] second element
            if var tag_last matches "d-noun" and var tag_this matches "d-title" and var tag_prev matches "d-linking" do
                set from array data element [ var i ] second element to "d-noun"
            done

        done
        set var i to var i + 1
    done

    do return with array data
done

define action elements_of_array_match with array data, var i do
    for each new var __data in array data do
        if var __data matches /^var i/ do
            do return with 1
        done
    done

    do return with 0
done

define action elements_of_array with array data, var i do
    set new array _data to an empty array

    for each new array __data in array data do
        push into array _data, from array __data element [ var i ]
    done

    do return with array _data
done

define action extend_array with array data do
    set new array __data to an empty array

    for each new array _data in array data do
        push into array __data, [ array _data, 0 ]
    done

    do return with array __data
done

set new hash cache__every_except to an empty hash
define action every_except_first with array data do
    if from hash cache__every_except element { array data } do
        do return with from hash cache__every_except element { array data }
    done

    set new var i to 0
    set new array _data to an empty array

    for each new var __data in array data do
        set var i to var i + 1

        if var i > 1 do
            push into array _data, var __data
        done
    done

    set from hash cache__every_except element { array data } to array _data

    do return with array _data
done

set new hash cache__from_grammar to an empty hash
define action from_grammar with array grammar, var name do
    if from hash cache__from_grammar element { var name } do
        do return with from hash cache__from_grammar element { var name }
    done

    for each new array _grammar in array grammar do
        if from array _grammar 1st element matches var name do

            set from hash cache__from_grammar element { var name } to array _grammar

            do return with array _grammar
        done
    done

    set new array _grammar to [ var name, [ var name ] ]

    set from hash cache__from_grammar element { var name } to array _grammar

    do return with array _grammar
done

define action match_in_replaced_history with array replaced_history, array data_pos, array data_words do
    set new array subjects to an empty array
    set new array objects to an empty array
    set new array verbs to an empty array
    set new array verbprefixes to an empty array
    set new array adverbs to an empty array
    set new array questionwords to an empty array
    set new array extra to an empty array

    set new var i to 0
    for each new array _symbol in array replaced_history do
        set new var symbol to from array _symbol first element
        set new var words_str to from array _symbol second element
        set new array words to split with " ", var words_str

        if var symbol matches /v-subject/ do
            push into array subjects, elements of array words
        done
        if var symbol matches /v-object/ do
            push into array objects, elements of array words
        done
        if var symbol matches /s-verb/ and var symbol not matches /s-verbprefix/ do
            push into array verbs, elements of array words
        done
        if var symbol matches /s-verbprefix/ do
            push into array verbprefixes, elements of array words
        done
        if var symbol matches /s-(long)?adverb$/ do
            if size of array adverbs do
                push into array adverbs, ";"
            done
            push into array adverbs, elements of array words
        done
        if var symbol matches /v-questionword/ do
            push into array questionwords, elements of array words
        done
        if var symbol matches /v-extra-after/ do
            push into array extra, elements of array words
        done
        if var symbol matches /v-extra-before/ do
            do unshift with elements of array adverbs, elements of array words
        done

        set var i to var i + 1
    done

    print new line

    if size of array verbs > 1 do
        push into array adverbs, items of array verbprefixes
    done
    else do
        set from array verbs 1st item to from array verbprefixes 1st item concat from array verbs 1st item
    done

    print "subjects: "
    do print_array with array subjects
    print new line
    print "objects: "
    do print_array with array objects
    print new line
    print "verbs: "
    do print_array with array verbs
    print new line
    print "adverbs: "
    do print_array with array adverbs
    print new line
    print "questionwords: "
    do print_array with array questionwords
    print new line
    print "extra: "
    do print_array with array extra
    print new line

    set new hash parsed to an empty hash
    set from hash parsed element { 'verbs' } to extend_array with array verbs
    set from hash parsed element { 'subjects' } to extend_array with array subjects
    set from hash parsed element { 'objects' } to extend_array with array objects
    set from hash parsed element { 'clauses' } to an empty array
    set from hash parsed element { 'adverbs' } to extend_array with array adverbs
    set from hash parsed element { 'questionword' } to extend_array with array questionwords
    set from hash parsed element { 'extra' } to extend_array with array extra
    do return with hash parsed
done

define action list_grammar with array grammar do

    set new hash rules to an empty hash
    set new flag found_replace_parts to 1
    while flag found_replace_parts do
        set flag found_replace_parts to 0

        for each new array _grammar in array grammar do
            set new var symbol to from array _grammar first element

            set new array replacements to every_except_first with array _grammar
            set new array new_replacements to an empty array
            for each new array replacement in array replacements do

                # array replacement: ['...', '...']

#                            print var part_of_replacement concat " "

                set new array _new_replacements to [ [] ]
                for each new var part_of_replacement in array replacement do
                    if var part_of_replacement matches /^(r-.*?)$/ do
                        set new var search_symbol to $0
                        set flag found_replace_parts to 1

                            do print_array with array replacement
                            print new line

                        set new array _new_replacements_tmp to an empty array
                        set elements of array _new_replacements_tmp to elements of array _new_replacements
                        set array _new_replacements to an empty array

                        set new array reduced_list to from_grammar with array grammar, var search_symbol
                        set new array _replacements to every_except_first with array reduced_list
                        for each new array _parts_of_replacement in array _replacements do

                            for each new array _new_replacement in array _new_replacements_tmp do
                                push into array _new_replacements, [ elements of array _new_replacement, elements of array _parts_of_replacement ]
                            done

                        done

                    done
                    else do
                        for each new array _new_replacement in array _new_replacements do
                            push into array _new_replacement, var part_of_replacement
                        done
                    done
                done
                push into array new_replacements, elements of array _new_replacements
            done

            if elements of array new_replacements do
                set elements of array _grammar to (var symbol, elements of array new_replacements)
            done
        done

        set hash cache__every_except to an empty hash
    done

    #set new array reduced_list to from_grammar with array grammar, "s-all"
    #set new array _replacements to every_except_first with array reduced_list
    #for each new array __replacements in array _replacements do
    #    do print_array with array __replacements
    #    print new line
    #done
    #do exit with 0

    for each new array _grammar in array grammar do
        set new var symbol to from array _grammar first element

        set new array replacements to every_except_first with array _grammar
        for each new array replacement in array replacements do

            set new var conclusion to var symbol concat " ~"
            set new var premise_str to ""
            set new var i to 1
            for each new var part_of_replacement in array replacement do
                set new var virtual_replacement to ""
                if var part_of_replacement matches /^(.*?)\/(.*?)$/ do
                    set var part_of_replacement to $0
                    set var virtual_replacement to $1
                done

                if var premise_str do
                    set var premise_str to var premise_str concat "\\s?"
                done
                set var premise_str to var premise_str concat var part_of_replacement concat " ~([^~]*?)~"
                if var i <= 9 do
                    if var virtual_replacement do
                        set var conclusion to var conclusion concat "var virtual_replacement <\\" concat var i concat "> "
                    done
                    else do
                        set var conclusion to var conclusion concat "\\" concat var i concat " "
                    done
                done
                set var i to var i + 1
            done

            set var conclusion to var conclusion concat "~"

#            set var conclusion to var symbol concat " ~\\1 \\2 \\3 \\4 \\5 \\6 \\7 \\8 \\9~"

            if var conclusion matches /^s-all/ do
                set var premise_str to "^\\s*?" concat var premise_str concat "\\s*?\$"
            done

#            print var premise_str concat " ------ " concat var conclusion concat new line  

            if var premise_str and var symbol not matches /r-/ do
                if not from hash rules element { var premise_str } do
                    set from hash rules element { var premise_str } to an empty array
                done
                push into that array: from hash rules element { var premise_str }, var conclusion
            done
        done
    done

    set new array premises to an empty array
    set elements of array premises to keys with elements of hash rules
    for each new var premise in array premises do
        set new array conclusions to from hash rules element { var premise }
        set new hash _unique_conclusions to an empty hash
        for each new var conclusion in array conclusions do
            set from hash _unique_conclusions element { var conclusion } to 1
        done
        set elements of array conclusions to keys with elements of hash _unique_conclusions
        set from hash rules element { var premise } to array conclusions
    done

    do return with hash rules
done

define action count_spaces_regexp with var data do
    set new array __data to split with " ", var data
    do return with size of array __data
done

define action match_in_grammar with hash rules, array data_pos, array data_words, array data do

    set new var data_pos_str to ""
    for each new array data_element in array data do
        set new var symbol to from array data_element second element
        set new var word to from array data_element first element
        set var data_pos_str to var data_pos_str concat " " concat var symbol concat " ~" concat var word concat "~"
    done
    set var data_pos_str to var data_pos_str concat " "
    print var data_pos_str concat new line

    set new array _premises to an empty array
    set elements of array _premises to keys with elements of hash rules
    set elements of array _premises to sort {count_spaces_regexp(var b) <=> count_spaces_regexp(var a)} with elements of array _premises
    set new array premises_other to an empty array
    set new array premises_final to an empty array
    for each new var premise in array _premises do
        set new array conclusionss to from hash rules element { var premise }
        set new flag final to 0

        for each new var conclusions in array conclusionss do
            if var conclusions matches /s-all/ do
                set flag final to 1
            done
        done

        if flag final is true do
            push into array premises_final, var premise
        done
        else do
            push into array premises_other, var premise
        done
    done

    set new array data_pos_list to [ [ var data_pos_str, []] ]
    set new array data_pos_list to reduce_with_rules with array premises_other, hash rules, array data_pos_list, array data_pos, array data_words, 50, 0

    print new line concat new line concat new line

    set new array replaced_history to reduce_with_rules with array premises_final, hash rules, array data_pos_list, array data_pos, array data_words, 50, 1

    if array replaced_history is false do
        do return with 0
    done

    set new hash parsed to match_in_replaced_history with array replaced_history, array data_pos, array data_words
    do return with hash parsed
done

define action reduce_with_rules with array premises, hash rules, array data_pos_list, array data_pos, array data_words, var maxdepth, flag final do
    if var maxdepth <= 0 do
        do return with 0
    done

    set new hash unique_data_pos_list to an empty hash
    for each new array data_pos_element in array data_pos_list do
        set from hash unique_data_pos_list item { array data_pos_element 1st element } to array data_pos_element
    done
    set elements of array data_pos_list to values with elements of hash unique_data_pos_list

    print "reduce_with_rules:  "
    set new array data_pos_list_symbols to elements_of_array with array data_pos_list, 0
    do print_array with array data_pos_list_symbols
    print " (size: " concat size of array data_pos_list concat ")" concat new line
    print new line


    for each new var premise in array premises do
        if not var premise do
            go to next
        done

        set new array data_pos_list_tmp to an empty array
        set elements of array data_pos_list_tmp to elements of array data_pos_list
        set array data_pos_list to an empty array

        set new var successful to 0
        for each new array data_pos_element in array data_pos_list_tmp do
            set new var data_pos_str to from array data_pos_element 1st element

            if var data_pos_str matches /var premise/ do
                print "found: " concat var premise concat new line

                set new var successful_replacements to 0

                set new array conclusions to from hash rules element { var premise }
                for each new var _conclusion in array conclusions do
                    print "rule:               '" concat var premise concat "' '" concat var _conclusion concat "'" concat new line

                    set new var _data_pos_str to var data_pos_str
                    while var _data_pos_str matches /var premise/ do
                        set new var _0 to $0
                        set new var _1 to $1
                        set new var _2 to $2
                        set new var _3 to $3
                        set new var _4 to $4
                        set new var _5 to $5
                        set new var _6 to $6
                        set new var _7 to $7
                        set new var _8 to $8
                        set new var _9 to $9

                        set new var conclusion to var _conclusion
                        do regex with var conclusion: /\\1/ -> "var _0"
                        do regex with var conclusion: /\\2/ -> "var _1"
                        do regex with var conclusion: /\\3/ -> "var _2"
                        do regex with var conclusion: /\\4/ -> "var _3"
                        do regex with var conclusion: /\\5/ -> "var _4"
                        do regex with var conclusion: /\\6/ -> "var _5"
                        do regex with var conclusion: /\\7/ -> "var _6"
                        do regex with var conclusion: /\\8/ -> "var _7"
                        do regex with var conclusion: /\\9/ -> "var _8"
                        do regex with var _data_pos_str: /var premise/ -> " var conclusion"
                        do regex with var _data_pos_str: /\s+/ -> " " :global
                        do regex with var _data_pos_str: /[~]([^\s]*?)\s[~]/ -> "~$0~" :global

                        if var data_pos_str ne var _data_pos_str do
                            print "before reduction:  " concat var data_pos_str concat new line
                            print "after reduction:   " concat var _data_pos_str concat new line
                            print new line

                            set var successful_replacements to var successful_replacements + 1
                            set var successful to 1

                            set new array replaced_history to an empty array
                            set elements of array replaced_history to elements of that array: from array data_pos_element 2nd element end of elements
                            set new var history_premise to var premise
                            do regex with var history_premise: /.*/ -> "var _0 var _1 var _2 var _3 var _4 var _5 var _6 var _7 var _8 var _9"
                            do regex with var history_premise: /\s+$/ -> ""
                            set new var history_conclusion to var conclusion
                            do regex with var history_conclusion: /[~].*/ -> ""
                            do regex with var history_conclusion: /\s+$/ -> ""
                            print "history_conclusion: " concat var history_conclusion concat new line
                            print "conclusion: " concat var conclusion concat new line
                            print "history_premise: " concat var history_premise concat new line
                            push into array replaced_history, [ var history_conclusion, var history_premise ]

                            
                            set var history_conclusion to var conclusion
                            if var history_conclusion matches /^\s*?(s-all)\s*?[~]/ do
                                do regex with var history_conclusion: /^[^~]*?[~]/ -> ""
                                do regex with var history_conclusion: /[~][^~]*?$/ -> ""
                                do regex with var history_conclusion: /^\s+/ -> ""
                                do regex with var history_conclusion: /\s+$/ -> ""
                                print "history_conclusion: " concat var history_conclusion concat new line
                                while var history_conclusion matches /(^|\s)([^<>\s]*?)\s?<([^>]*?)>/ do
                                    push into array replaced_history, [ $1, $2 ]
                                    do regex with var history_conclusion: /(^|\s)([^<>\s]*?)\s?<([^>]*?)>/ -> ""
                                done
                            done

                            push into array data_pos_list, [ var _data_pos_str, array replaced_history ]

                            for each new array replaced_history_element in array replaced_history do
                                print "- "
                                do print_array with array replaced_history_element
                                print new line
                            done
                        done
                    done
                done

                if not var successful_replacements do
                    push into array data_pos_list, array data_pos_element
                done
            done
            else do
                push into array data_pos_list, array data_pos_element
            done
        done

        if var successful do
            set new array replaced_history to reduce_with_rules with array premises, hash rules, array data_pos_list, array data_pos, array data_words, var maxdepth - 1, flag final
            if array replaced_history is true do
                do return with array replaced_history
            done
        done
    done

    if flag final do
        set new array replaced_histories to an empty array
        
        for each new array data_pos_element in array data_pos_list do
            set new var data_pos_str to from array data_pos_element 1st element

# only if s-all rule has no ^ and $
#            if var data_pos_str matches /^\s*?s-all [~][^~]*?[~]\s*?$/ do
            if var data_pos_str matches /^\s*?s-all/ do
                set new array replaced_history to from array data_pos_element 2nd element
                for each new array replaced_history_element in array replaced_history do
                    do print_array with array replaced_history_element
                    print new line
                done
                print new line

                push into array replaced_histories, array replaced_history
            done
        done
        
        # prefer results which have an "extra" entry!
        if size of array replaced_histories do
            for each new array replaced_history in array replaced_histories do
                for each new array replaced_history_element in array replaced_history do
                    if from array replaced_history_element 1st item matches "s-extra-after" do
                        do return with array replaced_history
                    done
                done
            done
            do return with from array replaced_histories 1st item
        done
    done
    else do
        do return with array data_pos_list
    done

    do return with 0
done

define action new_parser_start with array grammar, array data, var lang, var path do

    set new array data_words to elements_of_array with array data, 0
    set new array data_pos to elements_of_array with array data, 1

    set new hash rules to list_grammar with array grammar
    set new hash parsed to match_in_grammar with hash rules, array data_pos, array data_words, array data

    do return with hash parsed
done


set multi-line new global array grammar to [

    [ "s-all",
        [ "r-sentence", ],
    ],

    [ "r-sentence",
        [ "r-adverbs",                        "r-sentence-spo", ],
        [ "r-adverbs",                        "r-sentence-pso", ],
        [ "r-adverbs",                        "r-sentence-sop", ],
        [ "r-adverbs",                        "r-sentence-ps", ],
        [ "r-adverbs",                        "r-sentence-sp", ],
        [ "r-adverbs",                        "r-sentence-p", ],
        [ "r-adverbs", "s-questionword-part", "r-sentence-spo", ],
        [ "r-adverbs", "s-questionword-part", "r-sentence-pso", ],
        [ "r-adverbs", "s-questionword-part", "r-sentence-sop", ],
        [ "r-adverbs", "s-questionword-part", "r-sentence-ps", ],
        [ "r-adverbs", "s-questionword-part", "r-sentence-sp", ],
        [ "r-adverbs", "s-questionword-part", "r-sentence-p", ],
    ],

    [ "s-questionword-part",
        [ "r-extra-before", "r-questionword", "r-extra-after" ],
        [ "r-questionword", "r-extra-after" ],
        [ "r-questionword", ],
    ],

    [ "r-questionword",
        [ "d-questionword/v-questionword", ],
    ],
    [ "r-extra-after",
        [ "d-adjective/v-extra-after", ],
        [ "d-noun/v-extra-after", ],
    ],
    [ "r-extra-before",
        [ "d-preposition/v-extra-before", ],
    ],

    [ "r-sentence-spo",
        [ "s-nounphrases/v-subject", "r-longadverbs", "s-verb", "r-adverbs", "r-objects", "r-longadverbs", "r-verbprefix", ],
        [ "s-nounphrases/v-subject", "r-longadverbs", "s-verb", "r-adverbs", "r-objects", "r-longadverbs", "s-verb", "r-longadverbs", "r-verbprefix", ],
    ],
    [ "r-sentence-ps",
        [ "s-verb",    "r-adverbs", "s-nounphrases/v-subject", "r-longadverbs", ],
    ],
    [ "r-sentence-sp",
        [ "s-nounphrases/v-subject", "r-longadverbs", "s-verb", "r-longadverbs", "r-verbprefix", ],
    ],
    [ "r-sentence-pso",
        [ "s-verb",    "r-adverbs", "s-nounphrases/v-subject", "r-adverbs", "r-objects", "r-longadverbs", ],
        [ "s-verb",    "r-adverbs", "s-nounphrases/v-subject", "r-adverbs", "r-objects", "r-longadverbs", "s-verb", "r-longadverbs", ],
    ],
    [ "r-sentence-sop",
        [ "s-nounphrases/v-subject", "r-adverbs", "r-objects", "r-longadverbs", "s-verb", "r-longadverbs",   ],
    ],
    [ "r-sentence-p",
        [ "s-verb",    "r-longadverbs", ],
    ],

    [ "r-objects",
        [ "s-nounphrases/v-object", ],
        [ "s-nounphrases/v-object", "s-nounphrases/v-object", ],
        [ "s-nounphrases/v-object", "s-nounphrases/v-object", "s-nounphrases/v-object", ],
    ],

    [ "s-nounphrases",
        [ "r-nounphrase", ],
        [ "s-nounphrases", "d-linking", "s-nounphrases", ],
    ],

    [ "r-nounphrase",
        [ "d-title", ],
        [ "d-noun", ],
        [ "d-title", "d-noun", ],
        [ "d-title", "d-title", "d-noun", ],
        [ "d-adjective", "d-noun", ],
        [ "d-article", "d-noun", ],
        [ "d-article", "d-adjective", "d-noun", ],
    ],

    [ "r-verbprefix",
        [ "s-verbprefix", ],
        [  ],
    ],

    [ "s-verbprefix",
        [ "d-preposition" ],
    ],

    [ "r-longadverbs",
        [ "s-longadverbs", ],
        [ "s-adverbs", ],
        [  ],
    ],

    [ "s-longadverbs",
        [ "s-longadverb", ],
        [ "s-longadverb", "s-longadverb", ],
        [ "s-longadverb", "s-longadverb", "s-longadverb", ],
        [ "s-longadverb", "s-longadverb", "s-longadverb", "s-longadverb", ],
    ],

    [ "s-longadverb",
        [ "d-preposition", "s-nounphrases", "s-nounphrases", ],
    ],

    [ "r-adverbs",
        [ "s-adverbs", ],
        [  ],
    ],

    [ "s-adverbs",
        [ "s-adverb", ],
        [ "s-adverb", "s-adverb", ],
        [ "s-adverb", "s-adverb", "s-adverb", ],
        [ "s-adverb", "s-adverb", "s-adverb", "s-adverb", ],
    ],

#    [ "s-adverbs",
#        [ "r-adverb", ],
#        [ "r-adverb", "r-adverb", ],
#        [ "r-adverb", "r-adverb", "r-adverb", ],
#        [ "r-adverb", "r-adverb", "r-adverb", "r-adverb", ],
#    ],

    [ "s-adverb",
        [ "d-preposition", "s-nounphrases", ],
        [ "d-adjective", ],
        [ "d-adjective", "d-adjective", ],
    ],

    [ "s-verb",
        [ "d-verb", ],
    ],
];

# set new array data to [ ["der", "d-article"], ["test", "d-noun"], ["ist", "d-verb"], ["ein", "d-article"], ["mensch", "d-noun"] ];
# set new array data to [ ["fressen", "d-verb"], ["die", "d-article"], ["ziegen", "d-noun"], ["gras", "d-noun"] ];
# set new array data to [ ["frisst", "d-verb"], ["tobias", "d-title"], ["schulz", "d-noun"] ];
# set new array data to [ ["wie", "d-questionword"], ["fressen", "d-verb"], ["die", "d-article"], ["ziegen", "d-noun"], ["gras", "d-noun"] ];
# set new array data to [ ["wie", "d-questionword"], ["fressen", "d-verb"], ["die", "d-article"], ["ziegen", "d-noun"], ["im", "d-preposition"], ["winter", "d-noun"], ["gras", "d-noun"] ];

# set new array data to [ ["welche", "d-questionword"], ["stadt", "d-noun"], ["liegt", "d-verb"], ["in", "d-preposition"], ["deutschland", "d-noun"] ];

# do new_parser_start with global array grammar, array data, "de", "."
