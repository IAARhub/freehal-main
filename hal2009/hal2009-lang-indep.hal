#
# This file is part of FreeHAL 2010.
#
# Copyright(c) 2006, 2007, 2008, 2009, 2010 Tobias Schulz and contributors.
# http://freehal.org
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

set new global array replace_array to an empty array

define action divide_input with var input is rw, var lang, var path do
    set new var verb_be_3rd_person_singular to get_verb with "be", "3s"
    
    do regex using var input: /[=][=][=][>]/, " reasonof ", :global:i
    do regex using var input: /[-][-][-][>]/, " reasonof ", :global:i
    do regex using var input: /[=][=][>]/, " reasonof ", :global:i
    do regex using var input: /[-][-][>]/, " reasonof ", :global:i
    do regex using var input: /[=][>]/, " reasonof ", :global:i
    do regex using var input: /[-][>]/, " reasonof ", :global:i
    do regex using var input: /\(reasonof\)/, " reasonof ", :global:i
    do regex using var input: /\(reason\)/, " reasonof ", :global:i
    do regex using var input: /\(r\)/, " reasonof ", :global:i
    if var input matches /reasonof/ do
        do regex using var input: /\s+?reasonof\s+?/, "reasonof", :global:i
        do regex using var input: /reasonof/, "@", :global:i
        set new array words to split with /[@]/, var input
        set var input to ""
        
        set new var i to 0
        for each new var word_1 in array words do
            set new var j to 0
            for each new var word_2 in array words do
                if var i is var j - 1 do
                    do regex using var word_1: /STOP/, "", :global
                    do regex using var word_2: /STOP/, "", :global
                    do regex using var word_1: /^\s+/, "", :global
                    do regex using var word_2: /^\s+/, "", :global
                    do regex using var word_1: /\s+$/, "", :global
                    do regex using var word_2: /\s+$/, "", :global
                    do regex using var word_1: /\s+/, "_", :global
                    do regex using var word_2: /\s+/, "_", :global
                    set new var temp to '"'
                    do regex using var word_1: /<[var temp]>/, "", :global
                    do regex using var word_2: /<[var temp]>/, "", :global
                    set var input to var input concat "_" concat var word_1 concat "_ reasonof _" concat var word_2 concat "_ STOP "
                done
                set var j to var j + 1
            done
            set var i to var i + 1
        done
    done
    
    if lc(var input) matches /[=].*?[=]/ do
        do regex using var input: /\s+?[=]\s+?/, "=", :global:i
        do regex using var input: /[=]/, "@", :global:i
        set new array words to split with /[@]/, var input
        set var input to ""
        for each new var word_1 in array words do
            for each new var word_2 in array words do
                if not var word_1 matches var word_2 do
                    set var input to var input concat "_" concat var word_1 concat "_ = _" concat var word_2 concat "_ STOP "
                done
            done
        done
    done

    if lc(var input) matches /learn:/ do
        do regex using var input: /[,]/, "@", :global:i
        do regex using var input: /learn:/, "", :global:i
        do regex using var input: /^\s+/, "", :global:i
        do regex using var input: /\s*@\s+/, "@", :global:i
        do regex using var input: /\s+/, "_", :global:i
        set new array words to split with /[@]/, var input
        set var input to ""
        for each new var word_1 in array words do
            for each new var word_2 in array words do
                if not var word_1 matches var word_2 do
                    set var input to var input concat "_" concat var word_1 concat "_ = _" concat var word_2 concat "_ STOP "
                done
            done
        done
    done

    if lc(var input) matches /properties: (.*?): / do
        do regex using var input: /[,]/, "@", :global:i
        do regex using var input: /properties:(.*?):/, "", :global:i
        set new var word_1 to $0
        do regex using var word_1: /^\s+/, "", :global:i
        do regex using var input: /^\s+/, "", :global:i
        do regex using var input: /\s*@\s+/, "@", :global:i
        do regex using var input: /\s+/, " ", :global:i
        set new array words to split with /[@]/, var input
        set var input to ""
        for each new var word_2 in array words do
            if not var word_1 matches var word_2 do
                set var input to var input concat var word_1 concat " " concat var verb_be_3rd_person_singular concat " " concat var word_2 concat " STOP "
            done
        done
    done
    
    print "Input (separated sentences): "
    print var input
    print new line
    
    do return with var input
done

define action compute_input with var input is rw, var lang, var path do
    set new var no_change_pronouns to 0
    
    set new var flowchart_log to handle for file name var path concat '/flowchart.log', append
    print into var flowchart_log data "begin box"
    print into var flowchart_log data new line
    print into var flowchart_log data "bckgrndcolr FFFFD0"
    print into var flowchart_log data new line
    print into var flowchart_log data "bordercolor FFFFD0"
    print into var flowchart_log data new line
    print into var flowchart_log data "linesoftext 2"
    print into var flowchart_log data new line
    print into var flowchart_log data "draw"
    print into var flowchart_log data new line
    print into var flowchart_log data "setinput    " concat var input
    print into var flowchart_log data new line
    print into var flowchart_log data "textcontent 000000 Input:\t" concat var input
    print into var flowchart_log data new line
    do close with var flowchart_log

    print "Computed input (no. 1) ... "
    print var input
    print new line

    set var input to make_ascii with var input

    print "Computed input (no. 2) ... "
    print var input
    print new line

    do regex using var input: /9637/, "\$\$", :global:i
    do regex using var input: /9489/, "\$\$", :global:i
    do regex using var input: /<[?]><[=]><[>]>/, " questionnext ", :global:i
    do regex using var input: /<[!]><[=]><[>]>/, " factnext ", :global:i
    do regex using var input: /<[=]><[>]>/, " questionnext ", :global:i
    do regex using var input: /<[?]>/, " ?", :global:i
    do regex using var input: /^[und]<ws><[,]><ws>/, "", :global:i
    if var lang matches "en" do
        do regex using var input: /(^|\s)?an\s/, "$0a ", :global:i
    done
    do regex using var input: /<[,]>/, " , ", :global:i
    do regex using var input: /\s+/, " ", :global:i
    do regex using var input: /<ws><[,]><ws>(und|oder|or|and)/, " $0", :global:i
    do regex using var input: /^na<ws><[,]><ws>/, "", :global:i
    do regex using var input: /^naja<ws><[,]><ws>/, "", :global:i
    do regex using var input: /^und<[,]><ws>/, "", :global:i
    do regex using var input: /^na<[,]><ws>/, "", :global:i
    if length(var input) < 8 do
        do regex using var input: /^und\s+/, "", :global:i
        do regex using var input: /^ok\s+/, "", :global:i
        do regex using var input: /^gut\s+/, "", :global:i
    done
    do regex using var input: /^nein\s+/, "", :global:i
    if length(var input) > 5 do
        do regex using var input: /^ja\s+/, "", :global:i
    done
    do regex using var input: /^oder\s+/, "", :global:i
    do regex using var input: /^na\s+/, " ", :global:i
    do regex using var input: /^naja\s+/, " ", :global:i
    do regex using var input: /^h<[m]>+?\s+/, " ", :global:i
    do regex using var input: /^(wie|was)<ws>?<[,]><ws>?/, " ", :global:i
    do regex using var input: /\s\s/, " ", :global:i
    do regex using var input: /^<[,]>/, " ", :global:i
    do regex using var input: /\s\s/, " ", :global:i
    
    do regex using var input: /^du\s(<[a-zA-Z0-9]>+?.?.?)$/, "$0", :global:i
    
    do regex using var input: /\(true\)/, "_(true)_", :global:i
    do regex using var input: /\(maybe\)/, "_(maybe)_", :global:i
    do regex using var input: /\(false\)/, "_(false)_", :global:i
    do regex using var input: /\(logic\)/, "_(logic)_", :global:i

    do regex using var input: /(^|\s)es\s(.*?\s)zu\s(.?ein)em\s(.*?)\s((?:kommt)|(?:kommen))/, "$0$1 $2 $3 ist", :global:i
    do regex using var input: /(^|\s)es\s(.*?\s)zu\s(.?ein)em\s(.*?)\s((?:gekommen ist)|(?:gekommen war)|(?:kam))/, "$0$1 $2 $3 war", :global:i
    do regex using var input: /(^|\s)es\s(.*?\s)zu\s(.?ein)er\s(.*?)\s((?:kommt)|(?:kommen))/, "$0$1 $2 $3 ist", :global:i
    do regex using var input: /(^|\s)es\s(.*?\s)zu\s(.?ein)er\s(.*?)\s((?:gekommen ist)|(?:gekommen war)|(?:kam))/, "$0$1 $2e $3 war", :global:i

    do regex using var input: /jeden Tag /, "_jeden_tag_ ", :global:i

    do regex using var input: /Sie(<[^a-zA-Z]>)/, "du$0", :global
    do regex using var input: /Ihnen(<[^a-zA-Z]>)/, "dir$0", :global
    do regex using var input: /ihnen(<[^a-zA-Z]>)/, "dir$0", :global

    do regex using var input: /eine Menge/, "viele", :global
    do regex using var input: /(\d)\.(\d)/, "$0$1", :global

    if lc(var input) matches /^(ist|war|sind|waren)\s/ do
        set new var verb to lc with $0
        do regex using var input: /^(ist|war|sind|waren)\s/, "var verb ", :global:i
    done
    do regex using var input: /^(ist|war|sind|waren)\s(<[a-z]>+?)\s(ein.?.?)\s(<[A-Z]><[a-z]>+?)(\s?<[?]>?)$/, "$0 _$1_ $2 $3 $4", :global

    do regex using var input: /^(.*?)du mir deinen Namen.*?$/, "Wie ist dein Name? ", :global:i
    do regex using var input: /^(.*?)du mir.*?deinen Namen.*?$/, "Wie ist dein Name? ", :global:i
    
    if var input matches /\(bad\)/ do
        do regex using var input: /\s*?\(bad\)/, "", :global:i
        do regex using var input: /^\s+/, "", :global:i
        do regex using var input: /\s+$/, "", :global:i
        do regex using var input: /\s+ /, "_", :global:i
        set var input to "_" concat var input concat "_ = _(bad)_"
    done
    if var input matches /\(good\)/ do
        do regex using var input: /\s*?\(good\)/, "", :global:i
        do regex using var input: /^\s+/, "", :global:i
        do regex using var input: /\s+$/, "", :global:i
        do regex using var input: /\s+ /, "_", :global:i
        set var input to "_" concat var input concat "_ = _(good)_"
    done

    do regex using var input: /sowohl\s(.+?)als auch(<[a-z0-9\s]>*?<[A-Z]><[a-z]+?)(\s|$)/, "$0 \$\$aswellas\$\$ $1$2", :global:i
    do regex using var input: /sowohl\s(.+?)als auch(.*)/, "$0 \$\$aswellas\$\$ $1", :global:i
    do regex using var input: /weder\s(.+?)noch(<[a-z0-9\s]>*?<[A-Z]><[a-z]+?)(\s|$)/, "nicht $0 \$\$aswellas\$\$ $1$2", :global:i
    do regex using var input: /weder\s(.+?)noch(.*)/, "nicht $0 \$\$aswellas\$\$ $1", :global:i

    
    do regex using var input: /(Anfang|Ende) (januar|jaenner|februar|maerz|april|mai|juni|juli|august|september|oktober|november|dezember)/, "in dem _$1_", :global:i

    set new var c_time to time without arguments
    set new array date_time_array to items-returning localtime with var c_time
    set new var year to from array date_time_array item [ 5 ]
    set var year to var year + 1900

    do regex using var input: /jaenner/, "januar", :global:i
    set new var months_str to "januar|jaenner|februar|maerz|april|mai|juni|juli|august|september|oktober|november|dezember"
    set new array months to split using /<[|]>/, var months_str
    set new var month_num to 1
    for each new var month in array months do
        do regex using var input: /(seit|bis) var month (<[0-9]>+)/, "$0 01.var month_num.$1s", :global:i
        do regex using var input: /(seit|bis) var month/, "$0 01.var month_num.var year", :global:i
        set var month_num to var month_num + 1
    done


    do regex using var input: /(^)(<[A-Z]><[a-z]>+?en) (ist) /, "$0_$1_ $2 ", :global:i
    
    do regex using var input: /(^|\s)genauso (.*?) wie /, "$0genauso $1 wie{{{adj}}} ", :global:i
    do regex using var input: /(^|\s)so (.*?) wie /, "$0so $1 wie{{{adj}}} ", :global:i


    do regex using var input: /was ist /, "was ist ", :global:i
    do regex using var input: /was ist (<[A-Z]><[a-z]+?)(<[\.?!+,;-\s]>*?)$/, "was ist _$0_$1", :global
    
    do regex using var input: /wie war /, "wie ist ", :global:i
    do regex using var input: /\s+kein/, " nicht ein", :global:i
    do regex using var input: /(^|\s)?und sonst(\s|\$)/, " wie geht es dir ", :global:i
    do regex using var input: /(^|\s)?bevor\s/, " , bevor ", :global:i
    do regex using var input: /(^|\s)?kurz \, bevor\s/, " , kurz bevor ", :global:i
    do regex using var input: /^ \,/, " ", :global:i
    do regex using var input: /^\,/, " ", :global:i
    do regex using var input: / mehr als /, " mehr als{{{adj}}} ", :global:i
    do regex using var input: / lust zu /, " lust , zu ", :global:i
    do regex using var input: / weisst du was (.*) ist /, " was ist $0 ", :global:i
    if length(var input) < 14 do
        do regex using var input: / weisst du /, " weisst du , ", :global:i
    done
    do regex using var input: / weniger als /, " wenigerals ", :global:i
    do regex using var input: / bis zu /, " biszu ", :global:i
    do regex using var input: / bis in /, " bisin ", :global:i
    do regex using var input: / bis auf /, " bisauf ", :global:i
    do regex using var input: /^bis zu /, " biszu ", :global:i
    do regex using var input: /^bis in /, " bisin ", :global:i
    do regex using var input: /^bis auf /, " bisauf ", :global:i
    do regex using var input: /^kein(.*)/, "ein$0 nicht", :global:i
    do regex using var input: /wozu braucht man /, "was ist ", :global:i
    do regex using var input: /(brauch)(st|e|en)(.*?)zu\s(haben)/, "$0$1$2 $3/, "
    
    do regex using var input: /(tag|datum|monat|woche|jahr) war\s/, "$0 ist ", :global:i
    do regex using var input: /welche uhrzeit\s/, "wie uhr ", :global:i
    do regex using var input: /\suhr\shaben\swir\s/, " uhr ist es ", :global:i
    do regex using var input: /\suhr\shaben\swir<[?]>/, " uhr ist es?", :global:i
    do regex using var input: /aneinander /, "aneinander", :global:i
    do regex using var input: /\shaben\swir\sheute/, " haben wir ", :global:i
    do regex using var input: /\sist\sheute/, " ist ", :global:i
    do regex using var input: /welchen\stag\shaben\swir\s/, "welch Datum haben wir ", :global:i
    do regex using var input: /welcher\stag\sist\s/, "welch Datum haben wir ", :global:i

    do regex using var input: / hab /, " habe ", :global:i

    if var input not matches /(heiss|name)/ do
        do regex using var input: / FreeHAL(.?.?.?.?)$/, " $0", :global:i
    done

    set var input to ' ' concat var input concat ' '
    do regex using var input: /\snoch\s(nie|nicht)(<[\s!.,?]>+)/, " noch-$0$1", :global:i
    do regex using var input: /\snoch(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snoch[-](nie|nicht)(<[\s!.,?]>+)/, " noch $0$1", :global:i
    do regex using var input: /(^|<[\s!.,?]>+)(so)\setwas(<[\s!.,?]>+)/, "$0_$1_etwas_$2", :global:i
    do regex using var input: /(^|<[\s!.,?]>+)(so)was(<[\s!.,?]>+)/, "$0_$1_etwas_$2", :global:i
    do regex using var input: /\sauch(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\setwa(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sungefaehr(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdenn(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sueberhaupt(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\salsbald(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sbald(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sbei zeiten(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sbeinahe(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sbeizeiten(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdemnach(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\seinwenig(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sfast(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sfortan(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgegebenenfalls(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgleichwohl(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sguenstigenfalls(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\shierauf(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\shierbei(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\shierdurch(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\shoechstens(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sirgenwann einmal(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sirgendwanneinmal(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sjedenfalls(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sjemals(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\skeinesfalls(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\skopfueber(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\skurzerhand(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\smanchmal(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snebenbei(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snoetigenfalls(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snormalerweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sschlimmstenfalls(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\ssehr(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\ssoeben(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\ssogleich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sstets(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\suebrigens(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\svermutlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sbisweilen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\szeitlebens(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sabsolut(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sabsoluter(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\saesserst(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\salledem(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sallenfalls(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sallenthalben(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sallerdings(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sallerseits(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sallgemein(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sallmaehlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sall zusehr(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sallzusehr(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sallsdann(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sandauernd(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sangeblich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sanscheinend(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sansonsten(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sastrein(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\saugenblicklich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sausnahmslos(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sausreichend(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sausserdem(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sbedauerlicherweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sbedenkenlos(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sbemerkenswerterweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sbetraechtlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdann und wann(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdamit(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdemnaechst(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdennoch(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdermassen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sderzeit(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdes weiteren(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdeswegen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdochnoch(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgar(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdurchwegs(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sebenfalls(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sehemals(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\seigentlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sein bisschen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\seinigermassen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\seinstweilen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\seinwandfrei(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sendgueltig(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sdagegen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sendlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\senorm(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\serfreulicherweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sernsthaft(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\serstaunlicherweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\seventuell(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sfreundlicherweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgerechterweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgewissermassen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgewoehnlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgleichermassen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgluecklicherweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgroesstenteils(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgrundlegend(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sgrundsaetzlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\shauptsaechlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\shingegen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sidealerweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\simmerfort(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\simmerhin(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\simnachhinein(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\simuebrigen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\simwesentlichen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sinetwa(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sinfolgedessen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sinsbesondere(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sinsgesamt(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\skeinesfalls(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\skeineswegs(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\slediglich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sleider(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sletztendlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\smerkwuerdigerweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\smindestens(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\smitnichten(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\smitunter(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\smoeglicherweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\smomentan(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snachtraeglich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snachwievor(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snatuerlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sneuerdings(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snichtstetotrotz(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snichtstetoweniger(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snotwenigerweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sobwohl(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\soffenbar(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\soffensichtlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\softmals(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sohnedies(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sohneweiteres(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\spraktisch(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sproblemlos(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sregelrecht(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\srelativ(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sringsherum(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sschlussendlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sseitdem(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sseltsamerweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\ssicherlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\ssozusagen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sstattdessen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\statsaechlich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\stoerichterweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sueberaus(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\suebermassig(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sueberraschenderweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sueblicherweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sumsomehr(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sunteranderem(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\surspruenglich(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sunterdessen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sunverstaendlicherweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sunzweifelhaft(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\svergleichsweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\svollkommen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\svor allem(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\svorallem(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\svorzugsweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\swaehrenddessen(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sweiterhin(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\swiederum(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\szeitlebens(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\szunehmend(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\szunaechst(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\szwangslaeufig(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\szweifellos(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sbloederweise(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /^\s+?und(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\saber(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sa so(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sach so(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sachso(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sach(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\saehm(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\saha(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\salso(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\shay(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\shey(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\shuch(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sma(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sna(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sna du(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sna na(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sna ja(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snana(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snaja(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snene(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sne ne(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snun ja(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\soh(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\soh wei(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\soje(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\solola(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\soops(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\stja(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sui(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sui je(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\smeist(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\szumeist(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\salso(<[\s!.,?]>+)/, "$0", :global:i
    
    do regex using var input: /\swell(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\sso(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /do you know /, "", :global:i
    do regex using var input: /^\s+/, "", :global
    do regex using var input: /^you know (wh)/, "$0", :global:i
    
    do regex using var input: /world wide web/, "_world_wide_web_", :global:i
    do regex using var input: /Hersteller von/, "Hersteller fuer", :global:i

    do regex using var input: /mein name/, "_mein_name_", :global:i
    do regex using var input: /dein name/, "_dein_name_", :global:i
    

    do regex using var input: /(^|\s)(\d+?)\.\s*?januar(\s|$)/, "$0$1.01.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?jaenner(\s|$)/, "$0$1.01.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?februar(\s|$)/, "$0$1.02.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?maerz(\s|$)/, "$0$1.03.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?april(\s|$)/, "$0$1.04.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?mai(\s|$)/, "$0$1.05.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?juni(\s|$)/, "$0$1.06.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?juli(\s|$)/, "$0$1.07.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?august(\s|$)/, "$0$1.08.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?september(\s|$)/, "$0$1.09.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?oktober(\s|$)/, "$0$1.10.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?november(\s|$)/, "$0$1.11.$3", :global:i
    do regex using var input: /(^|\s)(\d+?)\.\s*?dezember(\s|$)/, "$0$1.12.$3", :global:i
    
    do regex using var input: /(^|\s)(\d)\.(\d+?)\.(\d+?)(\s|$)/, "$0 0$1.$2.$3$4", :global:i
    do regex using var input: /(^|\s)(\d+?)\.(\d)\.(\d+?)(\s|$)/, "$0$1.0$2.$3$4", :global:i
    do regex using var input: /(^|\s)(\d+?)\.(\d+?)\.(\d\d)(\s|$)/, "$0$1.$2.19$3$4", :global:i
    do regex using var input: /(^|\s)(\d+?)\.(\d+?)\.(\d+?)(\s|$)/, "$1.$2.$3$4", :global
    do regex using var input: /(^|\s)(\d+?)\.(\d+?)\.?(\s|$)/, "$1.$2.0000$4", :global
    
    do regex using var input: /^\s+/, "", :global
    
    if not ( var input matches /(^|\s)(von|fuer)(\s|$)/ or var input matches /<[?]>/ or var input matches /<[,]>/ ) do
        do regex using var input: /^((?:ein|eine)\s+?)(.+?)\s+?(ist|sind)\s+?((?:ein|eine)\s+?)(.+?)$/, "$1 = $4", :global:i
        do regex using var input: /^((?:der|die|das)\s+?)(.+?)\s+?(ist|sind)\s+?((?:der|die|das)\s+?)(.+?)$/, "$1 = $4", :global:i
        do regex using var input: /^(.+?)\s+?(ist|sind)\s+?((?:ein|eine|der|die|das)\s+?)(.+?)$/, "$0 = $3", :global:i
    done

    do regex using var input: /(^|\s)du hast (.*?) aus /, "$0du bekommst $1 aus ", :global:i
    do regex using var input: /(^|\s)woher hast du /, "$0woher bekommst du ", :global:i
    do regex using var input: /(^|\s)woher hast du /, "$0woher bekommst du ", :global:i
    
    do regex using var input: / wehnig /, " wenig ", :global:i
    do regex using var input: /niss(\s|$)/, "nis$0", :global:i
    do regex using var input: /^wovon /, "was ", :global:i
    do regex using var input: / wovon /, " was ", :global:i
    do regex using var input: /^von was /, "was ", :global:i
    do regex using var input: / von was /, " was ", :global:i

    do regex using var input: /^(<[A-Z]><[a-z]>+?en) ist /, "_$0_ ist ", :global:i

    do regex using var input: / wirst du genannt/, " heisst du ", :global:i
    do regex using var input: / wird (.*?) genannt/, " $0 ist ", :global:i
    
    do regex using var input: /^das\s(<[a-z]>+?)\s(ich|du)/, "$1 $0 das ", :global:i
    
    do regex using var input: / ein jeder /, " _jeder_ ", :global:i
    do regex using var input: / sinn des lebens/, " _sinn_des_lebens_ ", :global:i
    
    #do regex using var input: / (<[a-z]>+?)<[-]> (und|oder) (<[a-z]>+?)(haltig|artig|ig|haft)(es|er|en|em|e|) /, " $0$3$4 $1 $2$3$4 ", :global:i
    
    #do regex using var input: / (<[a-z]><[a-z]><[a-z]><[a-z]>+?)<[,\sund]>*?\s(<[a-z]><[a-z]><[a-z]><[a-z]>+?) und (<[a-z]><[a-z]><[a-z]><[a-z]>+?) (<[A-Z]><[a-z]><[a-z]><[a-z]>+?) /, " $0 $1 $2 $3 ", :global:i
    #do regex using var input: / (<[a-z]><[a-z]><[a-z]><[a-z]>+?) und (<[a-z]><[a-z]><[a-z]><[a-z]>+?) (<[A-Z]><[a-z]><[a-z]><[a-z]>+?) /, " $0 $1 $2 ", :global:i

    do regex using var input: / du jetzt /, " du ", :global:i
    do regex using var input: / ich jetzt /, " ich ", :global:i
    
    do regex using var input: / befindet sich /, " liegt ", :global:i
    do regex using var input: / befinden sich /, " liegen ", :global:i
    do regex using var input: / befinde mich /, " liege ", :global:i
    do regex using var input: / befindest dich /, " liegst ", :global:i
    do regex using var input: / sich befindet /, " liegt ", :global:i
    do regex using var input: / sich befinden /, " liegen ", :global:i
    do regex using var input: / mich befinde /, " liege ", :global:i
    do regex using var input: / dich befindest /, " liegst ", :global:i
    
    do regex using var input: /(^|\s)da(<[r]>?)(durch|auf|fuer|an|um) /, " $2 _das_ ", :global:i

    do regex using var input: /(<[0-9]>)(<[a-z]>|<[A-Z]>)/, "$0 $1", :global:i
    do regex using var input: /(<[a-z]>|<[A-Z]>)(<[0-9]>)/, "$0 $1", :global:i
    do regex using var input: /(<[0-9]>)\.(<[a-zA-Z]>)/, "$0 $1", :global:i
    do regex using var input: /(<[a-z]>|<[A-Z]>)\.(<[0-9]>)/, "$0 $1", :global:i

    do regex using var input: /\smacht man mit\s/, " ist ", :global:i
    do regex using var input: /\sist mit\s/, " ist-mit ", :global:i

    do regex using var input: /Was fuer (.*?) kennst du.*/, "was ist $0 ?", :global:i

    do regex using var input: /dem Begriff der /, "der ", :global:i
    do regex using var input: /den Begriff der /, "die ", :global:i
    do regex using var input: /der Begriff der /, "die ", :global:i
    do regex using var input: /dem Begriff des /, "dem ", :global:i
    do regex using var input: /den Begriff des /, "das ", :global:i
    do regex using var input: /der Begriff des /, "das ", :global:i

    for 1 .. 1 do
        do regex using var input: /(<[-_a-zA-Z]>+?\s+?<[-_a-zA-Z]>+?)\s*?<[,]>\s*?(<[-_a-zA-Z]>+?\s+?<[-_a-zA-Z]>+?)\s*?(und|oder)\s*?(<[-_a-zA-Z]>+?\s+?<[-_a-zA-Z]>+?)/, "$0 $2 $1 $2 $3", :global:i
        do regex using var input: /(<[-_a-zA-Z]>+?)\s*?<[,]>\s*?(<[-_a-zA-Z]>+?\s+?<[-_a-zA-Z]>+?)\s*?(und|oder)\s*?(<[-_a-zA-Z]>+?\s+?<[-_a-zA-Z]>+?)/, "$0 $2 $1 $2 $3", :global:i
        do regex using var input: /(<[-_a-zA-Z]>+?\s+?<[-_a-zA-Z]>+?)\s*?<[,]>\s*?(<[-_a-zA-Z]>+?\s+?<[-_a-zA-Z]>+?)\s*?(und|oder)\s*?(<[-_a-zA-Z]>+?)/, "$0 $2 $1 $2 $3", :global:i
        do regex using var input: /(<[-_a-zA-Z]>+?)\s*?<[,]>\s*?(<[-_a-zA-Z]>+?)\s*?(und|oder)\s*?(<[-_a-zA-Z]>+?\s+?<[-_a-zA-Z]>+?)/, "$0 $2 $1 $2 $3", :global:i
        do regex using var input: /(<[-_a-zA-Z]>+?)\s*?<[,]>\s*?(<[-_a-zA-Z]>+?\s+?<[-_a-zA-Z]>+?)\s*?(und|oder)\s*?(<[-_a-zA-Z]>+?)/, "$0 $2 $1 $2 $3", :global:i
        do regex using var input: /(<[-_a-zA-Z]>+?\s+?<[-_a-zA-Z]>+?)\s*?<[,]>\s*?(<[-_a-zA-Z]>+?)\s*?(und|oder)\s*?(<[-_a-zA-Z]>+?)/, "$0 $2 $1 $2 $3", :global:i
        do regex using var input: /(<[-_a-zA-Z]>+?)\s*?<[,]>\s*?(<[-_a-zA-Z]>+?)\s*?(und|oder)\s*?(<[-_a-zA-Z]>+?)/, "$0 $2 $1 $2 $3", :global:i
        
    end for

    do regex using var input: /^was\sgeht<ws><[?]>/, "wie geht es dir?", :global:i
    do regex using var input: /^was\sgeht$/, "wie geht es dir?", :global:i
    do regex using var input: /^was\sgeht\sab<ws><[?]>/, "wie geht es dir?", :global:i
    do regex using var input: /^was\sgeht\sab$/, "wie geht es dir?", :global:i
    
    do regex using var input: /^wie\slang\s/, "wie ", :global:i
    do regex using var input: /^wie\slange\s/, "wie ", :global:i
    
    do regex using var input: /Ihnen/, "dir", :global:i
    do regex using var input: /\sdenn<ws>?<[?]>/, " ?", :global:i
    do regex using var input: /\sdenn<[?]>/, " ?", :global:i
    do regex using var input: /\sdann<ws>?<[?]>/, " ?", :global:i
    do regex using var input: /\sdann<[?]>/, " ?", :global:i
    do regex using var input: /St\./, "St", :global:i
    do regex using var input: /bitte (sag|erzaehl)/, "$0", :global:i
    do regex using var input: /Kannst du mir sagen<[,]>+/, "", :global:i
    do regex using var input: /Kannst du mir sagen/, "", :global:i
    do regex using var input: /sage mir /, "was ist ", :global:i
    do regex using var input: /sag was /, "was ist ", :global:i
    do regex using var input: /sag etwas /, "was ist ", :global:i
    do regex using var input: /sag /, "was ist ", :global:i
    #do regex using var input: / du heute /, " du ", :global:i
    do regex using var input: /(ich glaube) (<[a-zA-Z]>)/, "$0 , $1", :global:i
    do regex using var input: /(ich denke) (<[a-zA-Z]>)/, "$0 , $1", :global:i
    do regex using var input: /stelle mir eine frage/, "was ist ", :global:i
    do regex using var input: /stell mir eine frage/, "was ist ", :global:i
    do regex using var input: /stelle eine frage/, "was ist ", :global:i
    do regex using var input: /stell eine frage/, "was ist ", :global:i
    do regex using var input: /Was kannst du mir ueber (.*?) sagen/, "was ist $0", :global:i
    do regex using var input: /Was weisst du ueber (.*?)$/, "was ist $0", :global:i
    do regex using var input: /Was kannst du mir ueber (.*?) erzaehlen/, "was ist $0", :global:i
    do regex using var input: /Was kannst du ueber (.*?) sagen/, "was ist $0", :global:i
    do regex using var input: /Was weisst du alles/, "was ist", :global:i
    #do regex using var input: /^.*?Was weisst du.*?$/, "was ist ?", :global:i
    #do regex using var input: /^.*?Was du .*? weisst.*?$/, "was ist ?", :global:i
    do regex using var input: /frag mich was/, "was ist", :global:i
    do regex using var input: /frag mich etwas/, "was ist", :global:i
    do regex using var input: /frag mich<ws>?<[,]>/, "", :global:i
    do regex using var input: /was ist (<[dsmk]>?ein)(<[a-zA-Z]>+?)\s/, "was ist $0$1 ", :global:i
    do regex using var input: /was denkst du ueber /, "was ist ", :global:i
    do regex using var input: /wie denkst du ueber /, "was ist ", :global:i
    do regex using var input: /was haeltst du von /, "was ist ", :global:i
    do regex using var input: /was haelst du von /, "was ist ", :global:i
    do regex using var input: /erzaehl mir was(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehl mir etwas(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehle mir was(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehle mir etwas(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehl mir bitte was(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehl mir bitte etwas(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehle mir bitte was(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehle mir bitte etwas(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzael mir was(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzael mir etwas(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaele mir was(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaele mir etwas(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehl was(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehl etwas(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehle was(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaehle etwas(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzael was(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzael etwas(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaele was(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /erzaele etwas(?:(<[\s!?.]>?.*?$)|$)/, "was ist $0 ?", :global:i
    do regex using var input: /Erzaehlst du .*/, "was ist?", :global:i
    do regex using var input: /was ist\s+?ueber /, "was ist ", :global:i
    
    if lc(var input) matches /(was heisst) (<[a-z]>)/ do
        set new var temp to ucfirst with $1
        do regex using var input: /(was heisst) (<[a-z]>)/, "$0 var temp", :global:i
    done

    do regex using var input: /(was\sheisst\s)/, "was heisst ", :global:i
    do regex using var input: /(was\sheisst\s)(<[A-Z]><[a-z]>+?\s<[a-z]>+?)((?:\s.?.?.?.?.?)|$)/, "$0 _$1_$2", :global

    do regex using var input: /(ich weiss nicht)\s+?(?:(wie|wer|was|wo|wann|warum|wieso|weshalb) (.*?))($|[.,])/, "_$1_ _no-question_ $2 , weiss ich nicht$3", :global:i
    do regex using var input: /(du weisst nicht)\s+?(?:(wie|wer|was|wo|wann|warum|wieso|weshalb) (.*?))($|[.,])/, "_$1_ _no-question_ $2 , weisst du nicht$3", :global:i
    do regex using var input: /(weiss ich)\s+?(wie|wer|was|wo|wann|warum|wieso|weshalb)/, "$0 , $1", :global:i
    do regex using var input: /(weisst du)\s+?(wie|wer|was|wo|wann|warum|wieso|weshalb)/, "$0 , $1", :global:i

    if var input not matches /_no-question_/ and lc(var input) matches /^\s*?(wie|wer|was|wo|wann|warum|wieso|weshalb)\s/ do
        do regex using var input: /<[?]>/, "", :global:i
        set var input to var input concat " ?"
    done
    
    do regex using var input: /(was (?:machst|tust) du).*?(heute|jetzt|momentan|gerade|grade).*?$/, "$0 ?", :global:i
    do regex using var input: /(das weiss ich,)$/, "$0 ?", :global:i
    do regex using var input: /(das weiss ich)$/, "$0 ?", :global:i
    do regex using var input: /sag mir /, "", :global:i
    do regex using var input: /sag mir<[,]>/, "", :global:i
    do regex using var input: /^<ws>?ob\s/, "", :global:i
    do regex using var input: /can you remmember that /, "", :global:i
    do regex using var input: /do you know whether /, "", :global:i
    do regex using var input: /you know whether /, "", :global:i
    do regex using var input: /von wo /, "woher ", :global:i
    do regex using var input: /(^|\s)was fuer eine\s/, " welche ", :global:i
    do regex using var input: /(^|\s)was fuer einen\s/, " welchen ", :global:i
    do regex using var input: /(^|\s)was fuer einem\s/, " welchem ", :global:i
    do regex using var input: /(^|\s)was fuer ein\s/, " welches ", :global:i
    do regex using var input: /(^|\s)was fuer\s/, " welch ", :global:i
    do regex using var input: /was (.+?) fuer eine\s(.+)/, "welche $1 $0", :global:i
    do regex using var input: /was (.+?) fuer einen\s(.+)/, "welchen $1 $0", :global:i
    do regex using var input: /was (.+?) fuer einem\s(.+)/, "welchem $1 $0", :global:i
    do regex using var input: /was (.+?) fuer ein\s(.+)/, "welches $1 $0", :global:i
    do regex using var input: /was (.+?) fuer\s(.+)/, "welch $1 $0", :global:i
    do regex using var input: /can you tell me whether\s/, "", :global:i
    do regex using var input: /can you tell me (who|how|where|when|if|what)/, "$0 ", :global:i
    do regex using var input: /can you tell me\s/, "what is ", :global:i
    #do regex using var input: /gemacht\s+?<[?]>/, " ?", :global:i
    
    do regex using var input: /^sobald\s*?(.*),\s*?(.*)$/, "$0, wenn $1", :global:i
    do regex using var input: /^(.*),\s*?sobald\s*?(.*)$/, "$1, wenn $0", :global:i
    do regex using var input: /^wenn\s*?(.*),\s*?(.*)$/, "$1, wenn $0", :global:i

#    do regex using var input: / so /, " ", :global:i

    if not var input matches / aus.?.?.?.?$/ do
        do regex using var input: /kennst du /, "was ist ", :global:i
    done
    
    do regex using var input: /wie heisst du mit /, "du ", :global:i
    
    do regex using var input: / (<[A-Z]><[a-zA-Z0-9]><[a-zA-Z0-9]>+?er)\s+?(<[A-Z]><[a-z]>+?) /, " _$0_$1_ ", :global
    
    do regex using var input: /was macht /, "was ", :global:i
    
    do regex using var input: /kannst du (.*?isch)($|(?:.?.?.?.?$))/, "kannst du $0 sprechen $1", :global:i
    do regex using var input: /kann ich (.*?isch)($|(?:.?.?.?.?$))/, "kann ich $0 sprechen $1", :global:i

    do regex using var input: /(^|\s)?wie wird /, "$0 wie ist ", :global:i
    do regex using var input: /Wie ist das Wetter heute/, "Wie ist das Wetter ", :global:i
    do regex using var input: /dir heute/, "dir /, "
    if length(var input) > 10 do
        do regex using var input: / ja /, " /, "
    done

    do regex using var input: /es ist<ws>?$/, "ist es ", :global:i
    do regex using var input: /es ist<ws>?<[?]><ws>?$/, "ist es ?", :global:i

    print "Computed input (no. 3) ... ", var input
    print new line
    
    if var input matches /\s(|d|m|k)ein\s([a-z]+?en)(\s|$)/ do
        set new var noun to ucfirst with $1
        do regex using var input: /\s(|d|m|k)ein\s([a-z]+?en)(\s|$)/, " $0ein var noun$2", :global
    done

    if var input matches /((<[?]>)|(\swas\s)|(\swer\s)|(\swie\s)|(\swo\s)|(\swann\s)|(\swieso\s)|(\swarum\s)|(\swes)|(\swen\s)|(\swem\s))/ do
        do regex using var input: / (seinen|ihren|seiner|ihrer|seines|ihres|seine|ihre) /, " das ", :global:i
    done

    do regex using var input: /Weisst du etwas ueber /, "was ist ", :global:i
    do regex using var input: /was weisst du ueber /, "was ist ", :global:i
    do regex using var input: /heise/, "heisse", :global:i
    do regex using var input: /heist/, "heisst", :global:i
    do regex using var input: / has to /, " must ", :global:i
    do regex using var input: / have to /, " must ", :global:i
    do regex using var input: / had to /, " must ", :global:i
    do regex using var input: / is able to /, " can ", :global:i
    do regex using var input: / am able to /, " can ", :global:i
    do regex using var input: /m able to /, " can ", :global:i
    do regex using var input: / are able to /, " can ", :global:i
    do regex using var input: / were able to /, " can ", :global:i
    do regex using var input: / was able to /, " can ", :global:i
    do regex using var input: / has been able to /, " can ", :global:i
    do regex using var input: / have been able to /, " can ", :global:i
    do regex using var input: /don<['`']>t/, "do not", :global:i
    do regex using var input: /hasn<['`']>t/, "has not", :global:i
    do regex using var input: /havn<['`']>t/, "have not", :global:i
    do regex using var input: /didn<['`']>t/, "did not", :global:i
    do regex using var input: /mustn<['`']>t/, "must not", :global:i
    do regex using var input: /n<['`']>t/, " not", :global:i
    do regex using var input: /gehts/, "geht es", :global:i
    do regex using var input: /geht<['`']>s/, "geht es", :global:i
    do regex using var input: /^(.?.?)gibt es /, "$0was ist ", :global:i
    do regex using var input: /^(.?.?)gibt es/, "$0was ist", :global:i
    do regex using var input: /was ist neues/, "was gibt es neues", :global:i
    set var input to var input concat ' '
    do regex using var input: /geht es so<[?\s]>/, "geht es$0", :global:i
    do regex using var input: /wie geht es <[?]>/, "wie geht es dir ?", :global:i
    do regex using var input: /wie geht es\s*?$/, "wie geht es dir ?", :global:i
    do regex using var input: /wie geht es<ws>?$/, "wie geht es dir ?", :global:i

    print "Computed input (no. 4) ... ", var input
    print new line

    for 1 .. 20 do
        do regex using var input: /(<[a-zA-Z0-9_]>+)<ws><[,]><ws>(<[a-zA-Z0-9_]>+)\s+(und|oder|or|and)<ws>/, "$0 $2 $1 $2 ", :global:i
        do regex using var input: /<ws><[,]><ws>(<[a-zA-Z0-9_]>+\s+<[a-zA-Z0-9_]>+)\s+(und|oder|or|and)<ws>/, " $1 $0 $1 ", :global:i
    end for
    do regex using var input: /heisse\sich/, "ist _mein_name_", :global:i
    do regex using var input: /ich\sheisse/, "_mein_name_ ist", :global:i
    do regex using var input: /wie heisst\sdu/, "wer bist du", :global:i
    do regex using var input: /wie heisse\s/, "wer bin ", :global:i
    do regex using var input: /heisst\sdu/, "ist _dein_name_", :global:i
    do regex using var input: /du\sheisst/, "_dein_name_ ist", :global:i

    
    do regex using var input: /(ist) (<[A-Z]><[a-z]>+?) (ein)/, "$0 _$1_ $2", :global
    
    do regex using var input: /, die du kennst\s/, " ", :global:i
    do regex using var input: /die du kennst\s/, " ", :global:i
    
    do regex using var input: /(^|\s)es leben/, "$0leben", :global:i
    
    do regex using var input: / (\d+?)\s*?(gb|gigabyte|mb|megabyte|kb|kilobyte|byte)\s*?(ram|arbeitsspeicher|festplatte|speicher)/, " _$0_$1_$2_ ", :global:i
    
    do regex using var input: / brauchst du /, " du brauchst ", :global:i
    do regex using var input: / brauche ich /, " ich brauche ", :global:i

    do regex using var input: /nenne mir (.*)/, "zaehle $0 auf", :global:i
    do regex using var input: /nenne (.*)/, "zaehle $0 auf", :global:i

    do regex using var input: /Zaehle mir alle (.*)en auf.*/, "ENUMALL ein $0e", :global:i
    do regex using var input: /Zaehle mir die (.*)en auf.*/, "ENUMALL eine $0e", :global:i
    do regex using var input: /Zaehle mir den (.*)en auf.*/, "ENUMALL ein $0e", :global:i
    do regex using var input: /Zaehle mir das (.*)en auf.*/, "ENUMALL ein $0e", :global:i
    do regex using var input: /Zaehle alle (.*)en auf.*/, "ENUMALL ein $0e", :global:i
    do regex using var input: /Zaehle die (.*)en auf.*/, "ENUMALL eine $0e", :global:i
    do regex using var input: /Zaehle den (.*)en auf.*/, "ENUMALL ein $0e", :global:i
    do regex using var input: /Zaehle das (.*)en auf.*/, "ENUMALL ein $0e", :global:i
    
    do regex using var input: /Zaehle mir alle (.*)n auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle mir die (.*)n auf.*/, "ENUMALL eine $0", :global:i
    do regex using var input: /Zaehle mir den (.*)n auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle mir das (.*)n auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle alle (.*)n auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle die (.*)n auf.*/, "ENUMALL eine $0", :global:i
    do regex using var input: /Zaehle den (.*)n auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle das (.*)n auf.*/, "ENUMALL ein $0", :global:i
    
    do regex using var input: /Zaehle mir alle (.*)s auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle mir die (.*)s auf.*/, "ENUMALL eine $0", :global:i
    do regex using var input: /Zaehle mir den (.*)s auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle mir das (.*)s auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle alle (.*)s auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle die (.*)s auf.*/, "ENUMALL eine $0", :global:i
    do regex using var input: /Zaehle den (.*)s auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle das (.*)s auf.*/, "ENUMALL ein $0", :global:i
    
    do regex using var input: /Zaehle mir alle (.*) auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle mir die (.*) auf.*/, "ENUMALL eine $0", :global:i
    do regex using var input: /Zaehle mir den (.*) auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle mir das (.*) auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle alle (.*) auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle die (.*) auf.*/, "ENUMALL eine $0", :global:i
    do regex using var input: /Zaehle den (.*) auf.*/, "ENUMALL ein $0", :global:i
    do regex using var input: /Zaehle das (.*) auf.*/, "ENUMALL ein $0", :global:i
    
    do regex using var input: /Zaehle (.*) auf.*/, "ENUMALL $0", :global:i
    do regex using var input: /ENUMALL mir (.*?) auf.*/, "ENUMALL $0", :global:i
    do regex using var input: /ENUMALL mir (.*)/, "ENUMALL $0", :global:i

    do regex using var input: /(wie|wer|was|wo|wann|warum|wieso|weshalb|welch)(.*?)(Farbe|Sekunde|Minute|Stunde|Tag|Woche|Monat|Jahr)(.?.?.?\s)+hat\s+/, "$0$1$2$3 ist ", :global:i

    #    do regex using var input: /http<[ do_]>\/, "\/, "/, "http___", :global:i
    do regex using var input: /http[<[ do]>]+/, "http_", :global:i

    for 0 .. 20 do
        do regex using var input: /http(.*?)\//, "http$0_", :global:i
    end for

    do regex using var input: /(^|\s)(eigentlich|wirklich|doch|nun|wenigstens|schliesslich|denn)(\s|$)/, "$0$2", :global:i

    do regex using var input: / das verlangen /, " das _verlangen_ ", :global:i

    do regex using var input: /wie viel uhr/, "wie uhr", :global:i
    do regex using var input: /wie viel<[a-zA-Z]>*\s/, "wie ", :global:i
    do regex using var input: /wieviel<[a-zA-Z]>*\s/, "wie ", :global:i
    do regex using var input: /wie spaet/, "wie uhr", :global:i
    do regex using var input: /wie frueh/, "wie uhr", :global:i
    do regex using var input: /<[=]>/, " = ", :global:i
    do regex using var input: /opposite/, " opposite ", :global
    do regex using var input: /wofuer steht /, "was ist ", :global:i
    do regex using var input: / schon mal /, " ", :global:i
    do regex using var input: /hast du schon mal von (.*?) gehoert/, "was ist $0", :global:i
    do regex using var input: /hast du schon von (.*?) gehoert/, "was ist $0", :global:i
    do regex using var input: /hast du von (.*?) gehoert/, "was ist $0", :global:i
    do regex using var input: /hast du mal von (.*?) gehoert/, "was ist $0", :global:i
    do regex using var input: /hast du schon mal was von (.*?) gehoert/, "was ist $0", :global:i
    do regex using var input: /hast du schon was von (.*?) gehoert/, "was ist $0", :global:i
    do regex using var input: /hast du was von (.*?) gehoert/, "was ist $0", :global:i
    do regex using var input: /hast du was mal von (.*?) gehoert/, "was ist $0", :global:i
    do regex using var input: /^(...*?) hast du /, "du hast $0 ", :global:i
    do regex using var input: /^(...*?) habe ich /, "ich habe $0 ", :global:i
    
    if length(var input) > 24 and var input matches /(question|fact)next/ do
        do regex using var input: /^weisst du<ws><[,]>*<ws>/, "", :global:i
        do regex using var input: /^weisst du/, "", :global:i
    done
    do regex using var input: /^weisst du<ws><[,]>*<ws>/, "", :global:i
    do regex using var input: /^weisst du/, "", :global:i
    
    set var input to ' ' concat var input concat ' '
    do regex using var input: /\snoch\s(nie|nicht)(<[\s!.,?]>+)/, " noch-$0$1", :global:i
    do regex using var input: /\snoch(<[\s!.,?]>+)/, "$0", :global:i
    do regex using var input: /\snoch[-](nie|nicht)(<[\s!.,?]>+)/, " noch $0$1", :global:i
    do regex using var input: /(^|<[\s!.,?]>+)(so)\setwas(<[\s!.,?]>+)/, "$0_$1_etwas_$2", :global:i
    do regex using var input: /(^|<[\s!.,?]>+)(so)was(<[\s!.,?]>+)/, "$0_$1_etwas_$2", :global:i

    if length(var input) > 24 and var input matches /<[?]>/ do
        do regex using var input: /\sgerne(<[\s!.,?]>+)/, "$0", :global:i
    done

    do regex using var input: /\s(kein|keine|keinen|keiner|keinem|nicht)\skein(|e|en|er|em)\s/, " kein$1 ", :global:i
    do regex using var input: /\s(kein|keine|keinen|keiner|keinem|nicht)\snicht\s/, " $0 ", :global:i
    do regex using var input: /(^|\s)?k(ein|eine|einen|einer|einem)\s/, "$0nicht $1 ", :global:i
    do regex using var input: /\sim\s/, " in dem ", :global:i
    do regex using var input: /\sbeim\s/, " bei dem ", :global:i
    if var lang matches "de" do
        do regex using var input: /\sam\s(<[a-zA-Z]>*?)ten($|\s|<[,]>)/, " am_$0ten{{{adj}}} $1 ", :global:i
        do regex using var input: /\sam\s/, " an dem ", :global:i
        do regex using var input: /\sins\s/, " in das ", :global:i
        do regex using var input: /^im\s/, " in dem ", :global:i
        do regex using var input: /^am\s/, " an dem ", :global:i
        do regex using var input: /^ins\s/, " in das ", :global:i
    done

    if var input matches /\szu<[mr]>\s+(<[a-zA-Z_]>+)\s+(<[a-zA-Z_]>+)(<ws>?<[,.?!]>*?<ws>?)$/ do
        if not $1 matches /t$/ do

            do regex using var input: /\szu(<[mt]>)\s+(<[a-zA-Z_]>+)\s+(<[a-zA-Z_]>+)(<ws>?<[,.?!]>*?<ws>?)$/, " zu$0_\l$1_\l$2 $3", :global:i
        done
    done
    
    do regex using var input: /\szu(<[mr]>)\s+(<[a-zA-Z_]>+)\s+(<[A-Z_]><[a-zA-Z_]>+)/, " zu$0_\l$1_\l$2 ", :global:i
    do regex using var input: /\szu(<[mr]>)\s+(<[a-zA-Z_]>+)/, " zu$0_\l$1 ", :global:i
    do regex using var input: /^zu(<[mr]>)\s+(<[a-zA-Z_]>+)/, " zu$0_\l$1 ", :global:i
    do regex using var input: /<[,]>\s+<[,]>/, ",", :global:i
    do regex using var input: /^wozu\s/, "wie ", :global:i
    do regex using var input: /\swozu\s/, " wie ", :global:i
    do regex using var input: /\soppo\s/, " opposite ", :global:i
    do regex using var input: /\s.?.?opposite.?.?\s/, " opposite ", :global:i
    
    if var input matches / opposite / do
        do regex using var input: /^\s+/, "", :global
        do regex using var input: /\s+$/, "", :global
        do regex using var input: /\s+/, "_", :global
        set new array opposites to split using /_opposite_/, var input
        set var input to "_" concat from array opposites 1st item concat "_ opposite _" concat from array opposites 2nd item concat "_"
    done
    
    do regex using var input: /\szu\s(<[a-z]>+?)\s(<[a-z]>+?)(.?.?.?)$/, " $1 , _to_ $0 $2", :global

    set new array clauses to split using /(<[,]>|KOMMA)/, var input
    for each new var clause in array clauses do
        if var clause matches /\szu\s(<[a-z]>+?en)\s/ do
            print "found 'zu'."
            set new var zu_verb to $0
            set new array words to split using /\s+/, var clause
            set new flag found_other_verb to 0
            set new flag found_zu_verb to 0
            for each new var word in array words do
                if var word do
                    if var word not matches var zu_verb do
                        set new array tag to compute_tags with var word, var lang, var path
                        if from hash sym_linking item { from array tag 1st item } do
                            if flag found_zu_verb is true do
                                go to last
                            done
                        done
                        if from hash sym_verb item { from array tag 1st item } do
                            set flag found_other_verb to 1
                            print "other verb: " concat var word concat new line
                        done
                    done
                    else do
                        set flag found_zu_verb to 1
                    done
                done
            done
            print "found an other verb: " concat flag found_other_verb concat new line

            if flag found_other_verb do
                do regex using var input: /\szu\s(<[a-z]>+?en)\s/, " , _to_ $0 ", :global
            done
            else do
                do regex using var input: /\szu\s(<[a-z]>+?en)\s/, " _to_ $0 ", :global
            done
        done
    done


    if var input matches /ist es.*?\szu\s/ do
        do regex using var input: / ist es /, " ist ", :global:i
    done
    if var input matches /ist\ses(\s<[A-Za-z]>+?)?(\s<[A-Za-z]>+?)?\s(das|der|die)\s/ do
        do regex using var input: / ist es /, " ist ", :global:i
    done

    do regex using var input: /^\s+/, "", :global:i
    do regex using var input: /^<[,]>/, "", :global:i
    do regex using var input: /^\s+/, "", :global:i
    
    # TEXT
    # Here was the chapter about replacing user defined strings
    # CODE

    if is an empty global array replace_array do
        set new var cache_file_name to '_cache_replace'

        if exists: var cache_file_name, end test do
            set new var cache_input to handle for file name var cache_file_name, read
            for each new var line from var cache_input is rw do
                push into global array replace_array, var line
            done
        done
        else do

            set new var output_file_name to '_output__get_csv'
            set new var csv_output to '>>>^0^0^0^0^just_verb^0^0^0^0^0^0'
            do unlink with '_input__get_csv'
            set new var output_handle to handle for file name var output_file_name, write
            print into var output_handle data var csv_output
            do close with var output_handle
            while not exists: '_input__get_csv', end test do
                do wait 0.5 seconds
            done
            set new var input_file_name to '_input__get_csv'
            set new var input_handle to handle for file name var input_file_name, read

            set new var cache_output to handle for file name var cache_file_name, write
            for each new var line from var input_handle is rw do
                push into global array replace_array, var line
                print into var cache_output data var line concat new line
            done
            do close with var cache_output
        done
        
        push into global array replace_array, ""
    done
    set new array _replace_array to global array replace_array
    for each new var line in array _replace_array do
        set new array result to an empty array
        set new array rawresult to split using /\^/, var line
        if var line do
            set new var a to from array rawresult item [ 2 ]
            set new var b to from array rawresult item [ 3 ]
            if var a and var b and var a not matches var b do
                do regex using var input: /(^|\s)var a(\s|$)/, "$0var b$1", :global:i
                
                #print "#var a# --> #var b#"
                #print new line
                #print var input
                #print new line
            done
        done
    done

    do regex using var input: /kind of /, "kind_of_", :global:i
    do regex using var input: / mal n /, " einen ", :global:i
    do regex using var input: / mal nen /, " einen ", :global:i
    do regex using var input: / n /, " einen ", :global:i
    do regex using var input: / nen /, " einen ", :global:i
    do regex using var input: / mal <[']>n /, " einen ", :global:i
    do regex using var input: / mal <[']>nen /, " einen ", :global:i
    do regex using var input: / <[']>n /, " einen ", :global:i
    do regex using var input: / <[']>nen /, " einen ", :global:i
    do regex using var input: / mal <[`]>n /, " einen ", :global:i
    do regex using var input: / mal <[`]>nen /, " einen ", :global:i
    do regex using var input: / <[`]>n /, " einen ", :global:i
    do regex using var input: / <[`]>nen /, " einen ", :global:i

    do regex using var input: / .... username .... /, " \$\$username\$\$ ", :global:i
    do regex using var input: / ..... username ..... /, " \$\$username\$\$ ", :global:i
    do regex using var input: / .... unknownproperty .... /, " \$\$unknownproperty\$\$ ", :global:i
    do regex using var input: / ..... unknownproperty ..... /, " \$\$unknownproperty\$\$ ", :global:i

    if lc(var input) matches /ist\s(\d+?)/ do
        do regex using var input: /(^|\s)(\d+?) /, "$0_$1_ ", :global:i
    done

    do regex using var input: /(^|\s)tobias schulz/, "$0_tobias_schulz_", :global:i


    if var lang matches "de" do
        do regex using var input: /(^|\s)im jahre (\d\d\d\d) /, "$0$1 ", :global:i
        do regex using var input: /(^|\s)im jahr (\d\d\d\d) /, "$0$1 ", :global:i
        if var input matches /\d\d\d\d/ do
            if var input not matches /\svon\s(\d\d\d\d)\s/ and lc(var input) not matches /ist\s(\d\d\d\d)/ do
                do regex using var input: /(^|\s)(\d\d\d\d) /, "$0in_jahre_$1 ", :global:i
            done
            if var input not matches /(\d\d\d\d)....../ do
                do regex using var input: /(^|\s)(\d\d\d\d) /, "$0_$1_ ", :global:i
            done
        done
    done

    print "Computed input (no. 5) ... ", var input
    print new line

    if var input matches /<[?]>/ do
        do regex using var input: /(^|\s)?(nicht|not)(\s)/, "$0", :global:i
    done

    do regex using var input: /(herr|frau|mr|mrs|miss|doktor|dr|firma)\.? (\S\S\S+?)($|\s)/, "_$0_$1_ $2", :global:i

    do regex using var input: /sth\./, "something", :global:i
    do regex using var input: /sth\s/, "something ", :global:i
    do regex using var input: /do you know (what|who|where|how|when|which|whose)/, "$0", :global:i
    do regex using var input: /do you know something about /, "what is ", :global:i
    do regex using var input: / do you do/, " are you", :global:i
    do regex using var input: /^\s+/, "", :global:i
    do regex using var input: /\s+$/, "", :global:i
    do regex using var input: /what<ws>up\s($|<[?]>)/, "how are you?", :global:i
    do regex using var input: /what<[']>s<ws>up\s($|<[?]>)/, "how are you?", :global:i
    do regex using var input: /whats<ws>up\s($|<[?]>)/, "how are you?", :global:i
    do regex using var input: /how are you doing/, "how are you", :global:i

    do regex using var input: /what\'s /, "what is ", :global:i
    do regex using var input: /whats /, "what is ", :global:i
    do regex using var input: /whos /, "what is ", :global:i
    do regex using var input: /who\'s /, "what is ", :global:i
    do regex using var input: /whore /, "what is ", :global:i
    do regex using var input: /who\'re /, "what is ", :global:i
    do regex using var input: /what is your name/, "who are you", :global:i

    do regex using var input: /was ist mit (.*?) los/, "was ist $0", :global:i
    do regex using var input: /was ist ueber (.*?)/, "was ist $0", :global:i
    do regex using var input: /was ist los mit (.*?)/, "was ist $0", :global:i

    do regex using var input: /^(.*?) muss man /, "Man muss $0 ", :global:i

    print "Computed input (no. 6) ... ", var input
    print new line

    do regex using var input: /^weisst du denn noch /, "weisst du ", :global:i
    do regex using var input: /^weisst du denn /, "weisst du ", :global:i
    do regex using var input: /^weisst du noch /, "weisst du ", :global:i
    do regex using var input: /^weisst du (w<[^\s]>*?)\s(<[^?!.,]>*)/, "$1 $0", :global:i
    do regex using var input: /^weisst du /, "", :global:i

    do regex using var input: /wie vie<[a-zA-Z]>+\s/, "wie ", :global:i
    do regex using var input: /^hm\, /, " ", :global:i
    do regex using var input: /^hm \, /, " ", :global:i
    do regex using var input: /\shm\, /, " ", :global:i
    do regex using var input: /\shm \, /, " ", :global:i

    do regex using var input: /(^|\s)sein\s([A-Z])/, "$0sein{{{art}}} $1", :global:i

    do regex using var input: /\seines\s/, " von einem ", :global:i
    do regex using var input: /\seiner\s/, " von einer ", :global:i
    do regex using var input: /\s(aus|von|in|an)\svon\seine([rs])\s/, " $0 eine$1 ", :global:i

    do regex using var input: /(\s)([A-Z][a-z]*?)\sder\s([A-Z])/, "$0$1 von der $2", :global
    do regex using var input: /(\s)([A-Z][a-z]*?)\sdes\s([A-Z][a-z]*?)s([^a-zA-Z])/, "$0$1 von dem $2$3", :global
    do regex using var input: /(\s)([A-Z][a-z]*?)\sdes\s([A-Z])/, "$0$1 von dem $2", :global

    do regex using var input: /(\s)([A-Z][a-z]*?)\sjeder\s([A-Z])/, "$0$1 von jeder $2", :global
    do regex using var input: /(\s)([A-Z][a-z]*?)\sjedes\s([A-Z][a-z]*?)s([^a-zA-Z])/, "$0$1 von jedem $2$3", :global
    do regex using var input: /(\s)([A-Z][a-z]*?)\sjedes\s([A-Z])/, "$0$1 von jedem $2", :global

    do regex using var input: /(\s)([A-Z][a-z]*?)\s(mehrer|viel|wenig|einig)er\s([A-Z])/, "$0$1 von $2en $3", :global

    if var input matches /(^|\s)(.+?)\s(den|dem|der|des)\s([A-Z])/ do
        if lc(var input) matches /(^|\s)(laut|nach)\s(den|dem|der|des)\s/ do
            set new var preposition to $1
            do regex using var input: /(^|\s)(laut|nach)\s(den|dem|der|des)\s/, "$0_var {preposition}_ $2 ", :global:i
        done
    done

    #do regex using var input: /was ist /, "ISUNKNOWN ", :global:i
    #do regex using var input: /wer ist /, "ISUNKNOWN ", :global:i
    #do regex using var input: /what is /, "ISUNKNOWN ", :global:i


    set new array clauses to split using /(<[,]>|KOMMA)/, var input
    set new var clause_no to 0
    for each new var clause in array clauses do
        set var clause_no to var clause_no + 1

        if var clause_no is not 1 and var clause matches /^\s*?(der|die|das|den|dem|dessen)\s(<[a-z]>+?)\s/ do
            print "maybe found a relative clause."
            set new var rel_verb to $1
            set new array words to split using /\s+/, var clause

            set new flag next_is_a_verb to 0
            set new array tag to compute_tags with var rel_verb, var lang, var path
            if from hash sym_verb item { from array tag 1st item } or size of array words < 3 or ( size of array words < 4 and from hash sym_verb item { from array tag 1st item } ) do
                set flag next_is_a_verb to 1
                print "not found an relative clause verb: " concat var rel_verb concat new line
            done
            else do
                print "found an relative clause verb: " concat var rel_verb concat new line
            done

            if not flag next_is_a_verb do
                do regex using var input: /\s*?(der|die|das|den|dem|dessen)\s(var rel_verb)\s/, " $0\{\{\{questionword\}\}\} $1 ", :global
            done
            else do
                do regex using var input: /\s*?(der|die|das|den|dem|dessen)\s(var rel_verb)\s/, " _$0_ $1 ", :global
            done
        done
    done

    do put_underscore_names_into_builtin_names with var input, var lang, var path

    print "Computed input (no. 7) ... ", var input
    print new line
    
    set var input to to_unixtime with var input, var lang, var path
    
    set new var mark to "\""

    do regex using var input: /\svar {mark}\s?(<[A-Za-z0-9_var {mark}]>+?)\s?var {mark}/, " var {mark}$0var {mark}", :global:i
    
    do regex using var input: /in dem jahr (<[\d]>+)/, "in dem var {mark}jahre $0var {mark}", :global:i
    do regex using var input: /in dem jahre (<[\d]>+)/, "in dem var {mark}jahre $0var {mark}", :global:i

    set new var e to 50
    while var e >= 0 do
        do regex using var input: /var {mark}(<[^\svar mark]>+?)\s([^var mark]*?)var {mark}/, "var {mark}$0_$1var {mark}", :global:i
        set var e to var e - 1
    done
    do regex using var input: /var {mark}/, "_", :global:i

    print "Computed input (no. 8) ... ", var input
    print new line

    do regex using var input: /^\s+/, "", :global:i
    do regex using var input: /\s+$/, "", :global:i
    do regex using var input: /questionnext/, "q=>", :global:i
    do regex using var input: /factnext/, "f=>", :global:i
    do regex using var input: /<[?]><ws><[=]><ws><[>]>/, "?=>", :global:i
    do regex using var input: /\s+<[?]><[=]><[>]>/, ", ?=>", :global:i
    do regex using var input: /<[!]><ws><[=]><ws><[>]>/, "!=>", :global:i
    do regex using var input: /\s+<[!]><[=]><[>]>/, ", !=>", :global:i
    do regex using var input: /<[f]><ws><[=]><ws><[>]>/, "f=>", :global:i
    do regex using var input: /\s+<[f]><[=]><[>]>/, ", f=>", :global:i
    do regex using var input: /<[q]><ws><[=]><ws><[>]>/, "q=>", :global:i
    do regex using var input: /\s+<[q]><[=]><[>]>/, ", q=>", :global:i
    do regex using var input: /<[=]>\s+<[>]>/, "=>", :global:i
    do regex using var input: /\s+<[=]><[>]>/, ", =>", :global:i
    do regex using var input: /<[,]>+/, " , ", :global:i
    do regex using var input: /\s+/, " ", :global:i
    do regex using var input: /<[_]>+/, "_", :global:i
    
    if var input matches /<[?]>/ do
        set var input to lcfirst with var input
    done

    print "Computed input (no. 9) ... ", var input
    print new line
    
    set new var male_file to handle for file name var path concat '/lang_' concat var lang concat '/male.history', read
    set new var last_male_substantive to ''
    for each new var line from var male_file do
        set var last_male_substantive to var line
    done
    do close with var male_file

    set new var female_file to handle for file name var path concat '/lang_' concat var lang concat '/female.history', read
    set new var last_female_substantive to ''
    for each new var line from var female_file do
        set var last_female_substantive to var line
    done
    do close with var male_file
    
    if var last_male_substantive do
        set var input to replace_he with var input, var last_male_substantive
    done
    if var last_female_substantive do
        set var input to replace_she with var input, var last_female_substantive
    done

    print "Computed input ... ... ", var input
    print new line

    set new var flowchart_log to handle for file name var path concat '/flowchart.log', append
    print into var flowchart_log data "textcontent 000000 => \t" concat var input
    print into var flowchart_log data new line
    print into var flowchart_log data "end box"
    print into var flowchart_log data new line
    do close with var flowchart_log

    do return with ( var input, var no_change_pronouns )
done

define action put_underscore_names_into_builtin_names with var input, var lang, var path do

    set new array male_names to global array builtin_male_names

    set new array words to split using /(\s|<[,]>|KOMMA)/, var input
    for each new var word in array words do
        if var word matches /^<[_]>(.+?)<[_]>$/ do
            push into array male_names, $0
        done
    done
    
done


