#
# This file is part of FreeHAL 2010.
#
# Copyright(c) 2006, 2007, 2008, 2009, 2010 Tobias Schulz and contributors.
# http://freehal.org
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#


compile source hal2009-lang-de.hal
require source hal2009-lang-de.hal
compile source hal2009.hal
require source hal2009.hal



define action prepare_text with var text, var lang, var path do
    do regex using var text: /[?]+/, "?", :global
    do regex using var text: /([?])/, "$0.", :global
    do regex using var text: /[.!~]\s*?[.!~]/, "~", :global
    do regex using var text: /[.!~]\s*?[.!~]/, "~", :global
    do regex using var text: /<[.]>(\s|$)/, " STOP ", :global
    do regex using var text: /(\d) STOP /, "$0. ", :global
    do regex using var text: / STOP \((.*)\)/, " ($0) STOP . ", :global

    do regex using var text: / und  /, " & ", :global

    set new array lines to split with /\sSTOP\s/, var text
    set new array new_lines to an empty array
    for each new var line in array lines do
        set (var line, new var no_change_pronouns) to compute_input with var line, var lang, var path
        push into array new_lines, var line
    done

    set var text to join ' STOP ', items of array new_lines
    do return with var text
done

define action read_from_input_file with var lang, var path do
	print new line
	set new var filename to var path concat "/input.txt"
	set new var handle to handle for file name var filename, read
	set new array lines to an empty array
	set items of array lines to all lines from var handle
	set new var text to join with "", items of array lines

	do return with var text
done

define action summarize_line with var input, hash tags, var lang, var path do
    do regex using var input: /(\s|^)(wie|wer|was|wo|wann|warum|wieso|weshalb|who|how|where|when|if|what) /, "$0 _$1_ _no-question_ ", :global:i
    do regex using var input: /<[?]>/, "", :global:i
    do regex using var input: /<[,]>\s/, " KOMMA ", :global:i
    do regex using var input: /(\D)<[.]>/, "${1} DOT ", :global:i
    do regex using var input: /\s+/, " ", :global:i

    set new flag has_questionword to 0
    if var input matches /<[?]>/ do
        set flag has_questionword to 1
        do regex using var input: /<[?]>/, "", :global
    done

    set new array clauses_input to split with " KOMMA ", var input
    set new hash parsed to an empty hash
    set from hash parsed item { 'verbs' } to an empty array
    set from hash parsed item { 'subjects' } to an empty array
    set from hash parsed item { 'objects' } to an empty array
    set from hash parsed item { 'clauses' } to an empty array
    set from hash parsed item { 'adverbs' } to an empty array
    set from hash parsed item { 'questionword' } to an empty array
    set new flag number_of_clause to 0
    for each new var clause in array clauses_input do
        do be_slow without arguments

        # TEXT
        # Split the sentence.
        # CODE
        
        set new array list_of_words to split with " ", var clause
        
        # TEXT
        # Then compute the parts of speech etc.
        # CODE
        for each new var word in array list_of_words is rw do
            do be_slow without arguments
            set from hash tags item { var word } to compute_tags with var word, var lang, var path
        end for
        
        set new array list_of_list_of_words to pre_parse with array list_of_words, hash tags, var lang, var path
        for each new array words in array list_of_list_of_words is rw do

            # TEXT
            # Then toggle the identities (user <-> machine).
            # CODE
            if flag number_of_clause is 0 do
                set hash parsed to parse with var lang, array words, hash tags
                set new array entities to an empty array
                push into array entities, items of that array: from hash parsed item { 'subjects' } end items of
                push into array entities, items of that array: from hash parsed item { 'objects' } end items of
                set from hash parsed item { 'verbs' } to toggle_verbs using from hash parsed item { 'verbs' }, array entities
                set from hash parsed item { 'subjects' } to toggle_entities using from hash parsed item { 'subjects' }
                set from hash parsed item { 'objects' } to toggle_entities using from hash parsed item { 'objects' }
                set from hash parsed item { 'adverbs' } to toggle_entities using from hash parsed item { 'adverbs' }
                set from hash parsed item { 'clauses' } to an empty array
                
                set flag number_of_clause to 1
            done
            else do
                set new hash parsed_clause to parse with var lang, array words, hash tags
                set new array entities to an empty array
                push into array entities, items of that array: from hash parsed_clause item { 'subjects' } end items of
                push into array entities, items of that array: from hash parsed_clause item { 'objects' } end items of
                set from hash parsed_clause item { 'verbs' } to toggle_verbs using from hash parsed_clause item { 'verbs' }, array entities
                set from hash parsed_clause item { 'subjects' } to toggle_entities using from hash parsed_clause item { 'subjects' }
                set from hash parsed_clause item { 'objects' } to toggle_entities using from hash parsed_clause item { 'objects' }
                set from hash parsed_clause item { 'adverbs' } to toggle_entities using from hash parsed_clause item { 'adverbs' }
                set from hash parsed_clause item { 'clauses' } to an empty array
                if not from hash parsed_clause item { 'questionword' } do
                    set from hash parsed_clause item { 'questionword' } to an empty array
                done
                push into that array: from hash parsed item { 'clauses' } end-items-of, hash parsed_clause
            done

        done
    done

    set from hash parsed item { "has_questionword" } to flag has_questionword

    do return with hash parsed
done

define action summarize with var input, var file_output_nl, var file_output_pro, var lang, var path do
	set new var prepared to prepare_text with var input, var lang, var path
    set new var rephrased to ''

    set new hash tags to an empty hash
    set new array sentences to split with " STOP ", var prepared
    for each new var sentence in array sentences do
        set new hash parsed to summarize_line with var sentence, hash tags, var lang, var path

        set new array _parsed to an empty array
        push into array _parsed, hash parsed
        set new var saved_data to save_facts with array _parsed, hash tags, '-', '', 0, var lang, var path
        set new array pro_lines to split with " ~ ", var saved_data
        set new array output_array to an empty array
        for each new var pro_line in array pro_lines do
            set new array results to to_array_from_pro_line with var pro_line, var lang
            set new array _output_array to phrase with var lang, var path, "default", array results, hash parsed
            push into array output_array, items of array _output_array
        done

        for each new array output_line in array output_array do
            if from array output_line 2nd item do
                set new var final_output to upper_case_correction with from array output_line 2nd item, hash tags, var lang, var path

                if from hash parsed item { "has_questionword" } do
                    do regex using var final_output: /<[.]>/, "", :global
                    set var final_output to var final_output concat "?"
                done

                set new var output_list to handle for file name var file_output_pro, append
                do regex using var saved_data: /<[~]>/, "\n", :global
                print into var output_list data var saved_data
                print into var output_list data new line
                do close with output_list

                set new var output_list to handle for file name var file_output_nl, append
                print into var output_list data var final_output
                print into var output_list data new line
                do close with output_list

                set var rephrased to var rephrased concat var final_output
                set var rephrased to var rephrased concat "\n"
            done
        done
    done
    

	do return with var rephrased
done


