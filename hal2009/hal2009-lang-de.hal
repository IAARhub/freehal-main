#
# This file is part of FreeHAL 2009.
#
# Copyright(c) 2006, 2007, 2008, 2009 Tobias Schulz and contributors.
# http://freehal.org
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

set multi-line new global array builtin_male_names to [
          "aaron",
          "abraham",
          "achaz",
          "achim",
          "adalbert",
          "adam",
          "adelbert",
          "adelfried",
          "adelhard",
          "adi",
          "adolf",
          "adolph",
          "adrian",
          "aegidius",
          "agilbert",
          "agilmar",
          "alban",
          "albert",
          "albin",
          "albrecht",
          "alex",
          "alexander",
          "alf",
          "alfhard",
          "alfinus",
          "alfons",
          "alfred",
          "alfried",
          "alhard",
          "allmar",
          "alois",
          "aloisius",
          "aloys",
          "aloysius",
          "alphonsus",
          "alrik",
          "altfried",
          "alwin",
          "amadeus",
          "ambros",
          "ambrosius",
          "andré",
          "andreas",
          "andree",
          "andy",
          "annik",
          "anrich",
          "ansbert",
          "anselm",
          "ansgar",
          "anton",
          "antonius",
          "arend",
          "aribert",
          "arist",
          "arkadius",
          "armin",
          "arnbert",
          "arnd",
          "arndt",
          "arne",
          "arnfred",
          "arnfried",
          "arnhart",
          "arnim",
          "arno",
          "arnold",
          "arnolf",
          "arnt",
          "arnulf",
          "aron",
          "arthur",
          "artur",
          "arved",
          "arwed",
          "arwid",
          "arwin",
          "ascan",
          "august",
          "augustin",
          "augustinus",
          "augustus",
          "axel",
          "baldur",
          "balthasar",
          "baptist",
          "bardo",
          "barnabas",
          "bartho",
          "barthold",
          "bartholomaeus",
          "bartold",
          "bartosch",
          "bastian",
          "beat",
          "benedict",
          "benedikt",
          "benediktus",
          "benjamin",
          "benno",
          "bernd",
          "berndt",
          "bernfried",
          "bernhard",
          "bernhardin",
          "bernhardt",
          "bernhart",
          "berni",
          "berno",
          "bernold",
          "bernulf",
          "bernward",
          "bert",
          "berthold",
          "berti",
          "bertin",
          "bertl",
          "bertold",
          "bertolt",
          "bertram",
          "bertwald",
          "bertwin",
          "birk",
          "bjoern",
          "blasius",
          "bodmar",
          "bodo",
          "bodomar",
          "bolko",
          "bonifaz",
          "boris",
          "boerries",
          "borromaeus",
          "borwin",
          "botho",
          "boto",
          "brandolf",
          "bringfried",
          "bruno",
          "burchard",
          "burckhard",
          "burckhardt",
          "burgfried",
          "burghard",
          "burghardt",
          "burghart",
          "burkard",
          "burkardt",
          "burkhard",
          "burkhardt",
          "burkhart",
          "cai",
          "carl",
          "carlheinz",
          "carsten",
          "caspar",
          "cay",
          "cersten",
          "chris",
          "christfried",
          "christhard",
          "christhardt",
          "christhart",
          "christhelm",
          "christian",
          "christmut",
          "christof",
          "christoph",
          "christopher",
          "christopherus",
          "christophorus",
          "christward",
          "claudius",
          "claus",
          "clemens",
          "conrad",
          "constantin",
          "corbinian",
          "cord",
          "cordian",
          "cordt",
          "cornelius",
          "cornell",
          "cuno",
          "curd",
          "curt",
          "cyrill",
          "dagobert",
          "dagomar",
          "damian",
          "daniel",
          "dankfried",
          "dankhard",
          "dankmar",
          "dankward",
          "dankwart",
          "danny",
          "darius",
          "david",
          "degenhard",
          "degenhardt",
          "degenhart",
          "delf",
          "denis",
          "dennis",
          "denny",
          "desiderius",
          "dethard",
          "detlef",
          "detlev",
          "detmar",
          "detrich",
          "didi",
          "diemo",
          "dierk",
          "dietbald",
          "dietbert",
          "dieter",
          "dieterich",
          "dietfried",
          "dietgar",
          "dietger",
          "diethard",
          "diethardt",
          "diethart",
          "diethelm",
          "diether",
          "diethmar",
          "dietmar",
          "dietmund",
          "dietolf",
          "dietram",
          "dietrich",
          "dietwald",
          "dietwalt",
          "dietwolf",
          "dietwulf",
          "dietz",
          "dimitri",
          "dionys",
          "dirk",
          "ditmar",
          "dittmar",
          "dominic",
          "dominik",
          "dominikus",
          "donat",
          "donatus",
          "eberhard",
          "eberhardt",
          "eberhart",
          "eckard",
          "eckardt",
          "eckart",
          "eckbert",
          "eckehard",
          "eckehardt",
          "eckehart",
          "eckert",
          "eckfried",
          "eckhard",
          "eckhardt",
          "eckhart",
          "eckhold",
          "eddi",
          "edelbert",
          "edelfried",
          "edelhard",
          "edelmut",
          "edelwald",
          "edgar",
          "edmar",
          "edmund",
          "eduard",
          "eduardt",
          "edwin",
          "egbert",
          "egidius",
          "eginald",
          "eginhard",
          "eginhardt",
          "egmont",
          "egomar",
          "egon",
          "ehrenfried",
          "ehrenreich",
          "ehrhard",
          "ehrhardt",
          "ehrmut",
          "eik",
          "eike",
          "einhard",
          "einhardt",
          "eitelbert",
          "eitelfritz",
          "ekhard",
          "ekhardt",
          "ekkard",
          "ekkardt",
          "ekkart",
          "ekkehard",
          "ekkehardt",
          "ekkehart",
          "elbert",
          "elkmar",
          "elmar",
          "emanuel",
          "emeram",
          "emerich",
          "emil",
          "emmeram",
          "emmeran",
          "emmerich",
          "engelbert",
          "engelbrecht",
          "engelhard",
          "engelhardt",
          "engelmar",
          "englbert",
          "enrico",
          "erdfried",
          "erdmann",
          "erdwin",
          "erfried",
          "erhard",
          "erhardt",
          "erhart",
          "eric",
          "erich",
          "erik",
          "erk",
          "erkmar",
          "erlfried",
          "ermenfried",
          "erni",
          "erno",
          "ernst",
          "ernstfried",
          "erwin",
          "eugen",
          "eustachius",
          "ewald",
          "eyck",
          "fabian",
          "falk",
          "falkhard",
          "falkmar",
          "falko",
          "felix",
          "ferdi",
          "ferdinand",
          "ferdinandus",
          "ferfried",
          "ferhard",
          "ferhart",
          "fidelius",
          "florentin",
          "florentius",
          "florenz",
          "florian",
          "folker",
          "folkhard",
          "folkhardt",
          "folkhart",
          "folko",
          "follrich",
          "frank",
          "frankmut",
          "franz",
          "franziskus",
          "franzl",
          "franzpeter",
          "fred",
          "freddy",
          "freimund",
          "freimut",
          "freimuth",
          "freiwald",
          "fridolin",
          "fridulf",
          "fried",
          "friedbald",
          "friedberg",
          "friedbert",
          "friedebert",
          "friedeborn",
          "friedel",
          "friedemann",
          "friedemar",
          "frieder",
          "friedewald",
          "friedhard",
          "friedhardt",
          "friedhart",
          "friedhelm",
          "friedhold",
          "friedjoerg",
          "friedl",
          "friedlieb",
          "friedmar",
          "friedmut",
          "friedmuth",
          "friedolf",
          "friedolin",
          "friedrich",
          "friedwald",
          "friedwin",
          "frithjof",
          "fritz",
          "frohmund",
          "frohmut",
          "frohwald",
          "frowin",
          "gabriel",
          "gangolf",
          "gebhard",
          "gebhart",
          "gelbert",
          "georg",
          "gerald",
          "gerd",
          "gerdfried",
          "gerdt",
          "gereon",
          "gerfried",
          "gerhard",
          "gerhardt",
          "gerhart",
          "gerlach",
          "german",
          "germar",
          "germo",
          "germut",
          "gernfried",
          "gernod",
          "gernot",
          "gernulf",
          "gero",
          "gerold",
          "gerolf",
          "gerrit",
          "gert",
          "gerthold",
          "gertmund",
          "gertwin",
          "gerwald",
          "gerwin",
          "giesbert",
          "gisbert",
          "giselbert",
          "giselher",
          "gismar",
          "godo",
          "golo",
          "gordian",
          "goswin",
          "gottfried",
          "gotthard",
          "gotthardt",
          "gotthart",
          "gotthelf",
          "gotthilf",
          "gotthold",
          "gottlieb",
          "gottlob",
          "gottreich",
          "gottwald",
          "gottwaldt",
          "gottwalt",
          "goetz",
          "gregor",
          "grimbert",
          "guido",
          "gundhard",
          "gundhart",
          "gundmar",
          "gundolf",
          "gunfried",
          "gunhard",
          "gunnar",
          "gunter",
          "guenter",
          "gunthard",
          "gunther",
          "guenther",
          "guntmar",
          "guntram",
          "gustav",
          "gustel",
          "gustl",
          "hadubert",
          "hagen",
          "haimo",
          "hanfried",
          "hannes",
          "hanno",
          "hanns",
          "hannsgeorg",
          "hannsjoerg",
          "hannsjuergen",
          "hannspeter",
          "hans",
          "hansdieter",
          "hansfried",
          "hansfriedrich",
          "hansgeorg",
          "hansgerd",
          "hansguenter",
          "hansguenther",
          "hansheinz",
          "hanshelmut",
          "hanshermann",
          "hansi",
          "hansjakob",
          "hansjoachim",
          "hansjochen",
          "hansjoerg",
          "hansjoern",
          "hansjuergen",
          "hanskarl",
          "hansl",
          "hansludwig",
          "hansmartin",
          "hansotto",
          "hanspeter",
          "hanswalter",
          "hanswerner",
          "hanswilhelm",
          "hanswolf",
          "harald",
          "hardi",
          "hardo",
          "hardy",
          "hariolf",
          "harri",
          "harribert",
          "harro",
          "harry",
          "hartfried",
          "hartger",
          "hartlieb",
          "hartmann",
          "hartmund",
          "hartmut",
          "hartmuth",
          "hartwald",
          "hartwig",
          "hartwin",
          "hasko",
          "hasso",
          "hatto",
          "haug",
          "haymo",
          "heidebert",
          "heiderich",
          "heidfried",
          "heiko",
          "heilmuth",
          "heilwig",
          "heimar",
          "heimbert",
          "heimfrid",
          "heimhart",
          "heimo",
          "heimwald",
          "heiner",
          "heinfried",
          "heini",
          "heino",
          "heinolf",
          "heinrich",
          "heintje",
          "heinz",
          "heinzdieter",
          "heinzfried",
          "heinzhermann",
          "heinzjoerg",
          "heinzjuergen",
          "heinzkarl",
          "heinzpeter",
          "heinzwerner",
          "helbert",
          "helfred",
          "helfrid",
          "helfried",
          "helge",
          "helgert",
          "helgomar",
          "hellfried",
          "hellmut",
          "hellmuth",
          "helm",
          "helmar",
          "helmbrecht",
          "helmfried",
          "helmo",
          "helmrich",
          "helmut",
          "helmuth",
          "helmward",
          "helwart",
          "helwig",
          "helwin",
          "hendrik",
          "henning",
          "henrik",
          "henry",
          "herald",
          "herbert",
          "herfried",
          "herger",
          "heribert",
          "herko",
          "hermann",
          "hermfried",
          "herold",
          "herrmann",
          "herwald",
          "herward",
          "herwart",
          "herwarth",
          "herwig",
          "heyko",
          "heyo",
          "hieronimus",
          "hieronymus",
          "hilar",
          "hilarius",
          "hildebert",
          "hildebrand",
          "hildemar",
          "hildmar",
          "hilfried",
          "hilmar",
          "hippolytus",
          "hoimar",
          "holger",
          "holk",
          "holm",
          "holmer",
          "horst",
          "horstfried",
          "horstmar",
          "hubert",
          "hubertus",
          "hugo",
          "humbert",
          "ignatz",
          "ignaz",
          "ilrich",
          "immanuel",
          "ingbert",
          "ingfried",
          "inghard",
          "ingmar",
          "ingo",
          "ingobert",
          "ingolf",
          "ingomar",
          "ingowart",
          "ingram",
          "inkmar",
          "innozenz",
          "irenaeus",
          "ireneus",
          "irmfried",
          "irmin",
          "irminfried",
          "irmo",
          "isbert",
          "isfried",
          "isidor",
          "iven",
          "ivo",
          "jacob",
          "jakob",
          "jan",
          "janfried",
          "jannick",
          "jean",
          "jens",
          "jo",
          "joachim",
          "jobst",
          "jochen",
          "joel",
          "johann",
          "johannes",
          "jonas",
          "jonathan",
          "jonny",
          "jons",
          "joerg",
          "joergfried",
          "joern",
          "joscha",
          "joschka",
          "josef",
          "joseph",
          "jost",
          "josua",
          "julian",
          "julius",
          "jupp",
          "juergen",
          "just",
          "justus",
          "kai",
          "kajetan",
          "karl",
          "karlernst",
          "karleugen",
          "karlfried",
          "karlfrieder",
          "karlfriedrich",
          "karlgeorg",
          "karlguenter",
          "karlhans",
          "karlheiner",
          "karlheinrich",
          "karlheinz",
          "karlhorst",
          "karli",
          "karlmann",
          "karlotto",
          "karlpeter",
          "karsten",
          "kasimir",
          "kaspar",
          "kay",
          "kersten",
          "kevin",
          "kilian",
          "klaudius",
          "klaus",
          "klausdieter",
          "klausjuergen",
          "klauspeter",
          "klemens",
          "knut",
          "knuth",
          "konrad",
          "konradin",
          "konstantin",
          "korbinian",
          "kord",
          "kornelius",
          "kristian",
          "kruno",
          "kunibert",
          "kuno",
          "kurd",
          "kurt",
          "kurth",
          "lambert",
          "landolf",
          "lars",
          "laurentius",
          "laurenz",
          "leander",
          "leberecht",
          "lebrecht",
          "lenard",
          "lenz",
          "leo",
          "leon",
          "leonhard",
          "leonhardt",
          "leopold",
          "leuthold",
          "lewin",
          "liborius",
          "liebhard",
          "liebhardt",
          "lienard",
          "lienhard",
          "lienhardt",
          "lindmar",
          "linhart",
          "lois",
          "loisl",
          "lorenz",
          "lothar",
          "louis",
          "lucas",
          "ludger",
          "ludolf",
          "ludwig",
          "luitpold",
          "luitwin",
          "lukas",
          "lutz",
          "maic",
          "maik",
          "malte",
          "manfred",
          "manfried",
          "manhard",
          "manhardt",
          "manhold",
          "manuel",
          "marbod",
          "marc",
          "marcel",
          "marcellus",
          "marco",
          "marcus",
          "marfried",
          "margolf",
          "marian",
          "mario",
          "marius",
          "mark",
          "marko",
          "markolf",
          "markus",
          "markward",
          "markwart",
          "marold",
          "martin",
          "marzel",
          "marzellus",
          "mathias",
          "mathis",
          "matthaeus",
          "matthias",
          "maurus",
          "max",
          "maximilian",
          "maximillian",
          "maxl",
          "mayk",
          "medard",
          "medardus",
          "meik",
          "meikel",
          "meinard",
          "meinfried",
          "meinhard",
          "meinhart",
          "meinold",
          "meinolf",
          "meinrad",
          "meinulf",
          "melchior",
          "merten",
          "micha",
          "michael",
          "michel",
          "michl",
          "mike",
          "mirco",
          "mirko",
          "mischel",
          "moritz",
          "nathanael",
          "neidhard",
          "neidhardt",
          "neithard",
          "neithart",
          "nepomuk",
          "nick",
          "nicki",
          "nicky",
          "nico",
          "nicolas",
          "nicolaus",
          "niels",
          "niklas",
          "niklaus",
          "niko",
          "nikodem",
          "nikodemus",
          "nikolas",
          "nikolaus",
          "nils",
          "norbert",
          "nordfried",
          "norfried",
          "norman",
          "norwin",
          "notfried",
          "notker",
          "nunzius",
          "odilo",
          "olaf",
          "olf",
          "oliver",
          "olli",
          "ornulf",
          "ortfried",
          "ortmund",
          "ortwin",
          "oskar",
          "osmund",
          "oswald",
          "oswin",
          "otbert",
          "otfried",
          "otger",
          "otheinrich",
          "othmar",
          "otmar",
          "ottfried",
          "otthard",
          "otthart",
          "otthein",
          "ottheinrich",
          "ottheinz",
          "otthold",
          "ottkar",
          "ottmar",
          "otto",
          "ottobert",
          "ottokar",
          "ottomar",
          "ottwin",
          "otwald",
          "otwin",
          "pankratius",
          "pankraz",
          "pascal",
          "patrick",
          "paul",
          "paulfried",
          "paulinus",
          "paulus",
          "peter",
          "philip",
          "philipp",
          "phillip",
          "phillipp",
          "phillippus",
          "pierre",
          "pirmin",
          "pius",
          "quintus",
          "quirin",
          "raik",
          "raimar",
          "raimer",
          "raimond",
          "raimund",
          "rainald",
          "rainer",
          "rainhard",
          "rainhardt",
          "rainmund",
          "ralf",
          "ralph",
          "randolf",
          "randolph",
          "raphael",
          "rasso",
          "raymund",
          "reginbert",
          "reginhardt",
          "reimo",
          "reimund",
          "reinald",
          "reinar",
          "reinbert",
          "reiner",
          "reinfried",
          "reinhard",
          "reinhardt",
          "reinhart",
          "reinhold",
          "reinholdt",
          "reinmar",
          "reino",
          "reinold",
          "reinulf",
          "reinwald",
          "rembert",
          "remigius",
          "renald",
          "renatus",
          "rené",
          "renold",
          "rezzo",
          "richard",
          "rico",
          "rigbert",
          "rigo",
          "rigobert",
          "rimbert",
          "ringo",
          "robby",
          "robert",
          "roberto",
          "rochus",
          "roderich",
          "roger",
          "roland",
          "rolf",
          "roman",
          "romanus",
          "ronald",
          "ronny",
          "roselius",
          "rotger",
          "rothmund",
          "rouven",
          "ruben",
          "rudenz",
          "rudger",
          "rudi",
          "ruediger",
          "rudolf",
          "rudolph",
          "runald",
          "runfried",
          "rupert",
          "rupertus",
          "ruppert",
          "rupprecht",
          "ruprecht",
          "rutger",
          "ruetger",
          "ruthard",
          "samuel",
          "sascha",
          "schorsch",
          "sebald",
          "sebastian",
          "seibold",
          "sepp",
          "seppl",
          "sergius",
          "severin",
          "sibrand",
          "sidonius",
          "siegbert",
          "siegenot",
          "siegert",
          "siegfrid",
          "siegfried",
          "sieghard",
          "sieghardt",
          "sieghart",
          "sieghelm",
          "siegmar",
          "siegmund",
          "siegulf",
          "siegwald",
          "siegward",
          "siegwart",
          "sigbert",
          "sigenot",
          "sigfrid",
          "sigfried",
          "siggi",
          "sighard",
          "sighart",
          "sighelm",
          "sigi",
          "sigisbert",
          "sigishelm",
          "sigismund",
          "sigmar",
          "sigmund",
          "sigmut",
          "sigolf",
          "sigurd",
          "sigward",
          "sigwart",
          "silvester",
          "silvio",
          "simon",
          "simpert",
          "sixtus",
          "soenke",
          "sonnfried",
          "sonnhard",
          "sonnhardt",
          "soeren",
          "stanislaus",
          "stefan",
          "steff",
          "steffan",
          "steffen",
          "steph",
          "stephan",
          "stephanus",
          "steve",
          "steven",
          "sturmhard",
          "sturmius",
          "sven",
          "swen",
          "sylvester",
          "sylvio",
          "sylvius",
          "tankred",
          "tassilo",
          "tell",
          "thaddaeus",
          "thankmar",
          "thassilo",
          "theo",
          "theobald",
          "theobert",
          "theodor",
          "theofried",
          "theohold",
          "theophil",
          "theophilus",
          "thielo",
          "thiemo",
          "thilo",
          "thomas",
          "thoralf",
          "thorsten",
          "tiberius",
          "tiburtius",
          "tiemo",
          "til",
          "till",
          "tillmann",
          "tilman",
          "tilmann",
          "tilo",
          "tim",
          "timmo",
          "timo",
          "timon",
          "timotheus",
          "tino",
          "titus",
          "tobias",
          "tom",
          "tommy",
          "toni",
          "toens",
          "tony",
          "toralf",
          "torben",
          "torge",
          "torsten",
          "traugott",
          "trauhard",
          "treufried",
          "treuhard",
          "treuhart",
          "tristan",
          "trudbert",
          "trutz",
          "udo",
          "ulf",
          "ulfried",
          "uli",
          "ulli",
          "ullrich",
          "ulrich",
          "ulvi",
          "ulwin",
          "uranius",
          "urban",
          "ursus",
          "utho",
          "uto",
          "utto",
          "utz",
          "uve",
          "uwe",
          "valentin",
          "valerian",
          "veit",
          "veith",
          "velten",
          "viktor",
          "vincenz",
          "vinzent",
          "vinzenz",
          "vitalis",
          "vitus",
          "volkard",
          "volkart",
          "volkbert",
          "volker",
          "volkhard",
          "volkhardt",
          "volkhart",
          "volkher",
          "volkmar",
          "volkrad",
          "volkward",
          "volkwart",
          "vollrath",
          "volrad",
          "walbert",
          "waldemar",
          "waldfried",
          "walfried",
          "walter",
          "walther",
          "walti",
          "warnfried",
          "wastl",
          "wedig",
          "wedigo",
          "weikhard",
          "welf",
          "welfhard",
          "wendel",
          "wendelin",
          "wendelinus",
          "wendemar",
          "wennemar",
          "wenzel",
          "werner",
          "wernfried",
          "wernhard",
          "wernher",
          "wichard",
          "wido",
          "wiegand",
          "wiegbert",
          "wieghart",
          "wieland",
          "wiethold",
          "wigand",
          "wigbert",
          "wiglaf",
          "wilbert",
          "wilbrand",
          "wilbrandt",
          "wilderich",
          "wilfrid",
          "wilfried",
          "wilhard",
          "wilhardt",
          "wilhelm",
          "willehad",
          "willhart",
          "willi",
          "willibald",
          "willibert",
          "willmar",
          "willrich",
          "willy",
          "wilmar",
          "wilmhard",
          "wilmut",
          "winand",
          "winfrid",
          "winfried",
          "wingolf",
          "winnimar",
          "winrich",
          "withold",
          "witmar",
          "wittmar",
          "wladislaus",
          "woldemar",
          "wolf",
          "wolfbert",
          "wolfdieter",
          "wolfdietrich",
          "wolfeckart",
          "wolff",
          "wolfgang",
          "wolfguenter",
          "wolfhard",
          "wolfhardt",
          "wolfhart",
          "wolfhelm",
          "wolfhermann",
          "wolfmar",
          "wolfram",
          "wolfrid",
          "wolfried",
          "wolrad",
          "wulf",
          "wulfhard",
          "wulfhardt",
          "wunibald",
          "wunnibald",
          "xaver",
          "xaverius",
          "york",
          "zacharias",
          "zeno",
];

set multi-line new global array builtin_entity_ends_pair to [
          [ 'das', 'ein' ],
          [ 'das', 'eine' ],
];

set multi-line new global hash builtin_entity_ends to {
          'i' => 1,
          'h' => 1,
          'g' => 1,
          'f' => 1,
          'e' => 1,
          'd' => 1,
          'c' => 1,
          'b' => 1,
          'a' => 1,
          'er' => 1,
          'sie' => 1,
          'es' => 1,
          'ihm' => 1,
          'ihr' => 1,
          'ihn' => 1,
          'mir' => 1,
          'dir' => 1,
          'mich' => 1,
          'dich' => 1,
          'ich' => 1,
          'du' => 1,
};

set multi-line new global hash builtin_time_place_adverbs to {
          'nicht' => 1,
          '_q_' => 1,
          'kenne' => 1,
          'vorhin' => 1,
          'nachher' => 1,
          'vorher' => 1,
          'spaeter' => 1,
          'eben' => 1,
          'nun' => 1,
          'schon' => 1,
          'auch' => 1,
          'noch' => 1,
          'etwa' => 1,
          'ungefaehr' => 1,
          'ca' => 1,
          'mal' => 1,
          'denn' => 1,
          'dann' => 1,
          'gerne' => 1,
          'spaet' => 1,
          'frueh' => 1,
          'frueher' => 1,
          'spaeter' => 1,
          'fast' => 1,
          'eben' => 1,
          'endlich' => 1,
          'information' => 1,
          'informationen' => 1,
          'anfangs' => 1,
          'bald' => 1,
          'damals' => 1,
          'dann' => 1,
          'eher' => 1,
          'heutzutage' => 1,
          'mittlerweile' => 1,
          'neulich' => 1,
          'nun' => 1,
          'seitdem' => 1,
          'zugleich' => 1,
          'zuletzt' => 1,
          'schliesslich' => 1,
          'seither' => 1,
          'heute' => 1,
          'morgen' => 1,
          'gestern' => 1,
          'inzwischen' => 1,
          'jetzt' => 1,
          'uebermorgen' => 1,
          'vorerst' => 1,
          'vorhin' => 1,
          'abends' => 1,
          'danach' => 1,
          'frueher' => 1,
          'beizeiten' => 1,
          'haeufig' => 1,
          'oft' => 1,
          'oftmals' => 1,
          'manchmal' => 1,
          'gelegentlich' => 1,
          'bisweilen' => 1,
          'zuweilen' => 1,
          'mitunter' => 1,
          'selten' => 1,
          'einmal' => 1,
          'zweimal' => 1,
          'dreimal' => 1,
          'mehrmals' => 1,
          'abends' => 1,
          'normalerweise' => 1,
          'nachts' => 1,
          'dienstags' => 1,
          'lange' => 1,
          'immer' => 1,
          'noch' => 1,
          'zeitlebens' => 1,
          'stets' => 1,
          'ewig' => 1,
          'always' => 1,
          'schon' => 1,
          'bisher' => 1,
          'weitgehend' => 1,
          'erstmals' => 1,
          'nahe' => 1,
          'lately' => 1,
          'never' => 1,
          'often' => 1,
          'rarely' => 1,
          'woanders' => 1,
          'kuenftig' => 1,
          'recently' => 1,
          'sometimes' => 1,
          'soon' => 1,
          'today' => 1,
          'tomorrow' => 1,
          'usually' => 1,
          'yesterday' => 1,
};

set multi-line new global hash builtin_verb_prefixes to {
          'auf' => 1,
          'hin' => 1,
          'hinzu' => 1,
          'dazu' => 1,
          'rauf' => 1,
          'herauf' => 1,
          'hinab' => 1,
          'hinunter' => 1,
          'an' => 1,
          'ab' => 1,
          'zusammen' => 1,
          'vor' => 1,
          'nach' => 1,
          'zurueck' => 1,
          'weg' => 1,
          'zer' => 1,
          'her' => 1,
          'ueber' => 1,
          'unter' => 1,
          'neben' => 1,
          'herunter' => 1,
          'mit' => 1,
          'zwischen' => 1,
          'um' => 1,
          'durch' => 1,
#          'aus' => 1,
          'fest' => 1,
};

set multi-line new global hash builtin_verb_prefixes_no_split to {
          'auf' => 1,
          'hin' => 1,
          'aus' => 1,
};

set multi-line new global hash builtin_auxiliary_verbs to {
          'bin' => 1,
          'bist' => 1,
          'ist' => 1,
          'sind' => 1,
          'seid' => 1,
          
          'habe' => 1,
          'hab' => 1,
          'hast' => 1,
          'hat' => 1,
          'haben' => 1,
          'habt' => 1,
          
          'werde' => 1,
          'werd' => 1,
          'wirst' => 1,
          'wird' => 1,
          'werden' => 1,
          'werdet' => 1,
          
          'kann' => 1,
          'kannst' => 1,
          'kann' => 1,
          'koennen' => 1,
          'koennt' => 1,
          
          'will' => 1,
          'willst' => 1,
          'will' => 1,
          'wollen' => 1,
          'wollt' => 1,
          
          'muss' => 1,
          'musst' => 1,
          'muss' => 1,
          'muessen' => 1,
          'muesst' => 1,
};

set multi-line new global hash builtin_part_of_speech to {
          'einem'  => "art",
          'eines'  => "art",
          'einer'  => "art",
          'einem'  => "art",
          'eine'  => "art",
          'ein'  => "art",
          '=' => "vi",
          'zier' => "n",
          'auf' => "prep",
          'hin' => "prep",
          'hinzu' => "prep",
          'dazu' => "prep",
          'rauf' => "prep",
          'herauf' => "prep",
          'hinab' => "prep",
          'hinunter' => "prep",
          'an' => "prep",
          'ab' => "prep",
          'zusammen' => "prep",
          'vor' => "prep",
          'nach' => "prep",
          'zurueck' => "prep",
          'weg' => "prep",
          'zer' => "prep",
          'her' => "prep",
          'in' => "prep",
          'ueber' => "prep",
          'unter' => "prep",
          'neben' => "prep",
          'herunter' => "prep",
          'mit' => "prep",
          'zwischen' => "prep",
          'um' => "prep",
          'durch' => "prep",
          'aus' => "prep",
          'fest' => "prep",
          'ent' => "prep",
          'frei' => "prep",
          'er' => "prep",
          'soweit' => "adj",
          'gilt'   => "vi",
          'jahre' => "n",
          'fuehlst' => "vi",
          'fuehle' => "vi",
          'allerdings' => "adj",
          'habe' => "vt",
          'fern' => "adj",
          'lau' => "adj",
          'schaust' => "vi",
          'schaue' => "vi",
          'schauen' => "vi",
          'dann' => "adj",
          'beschaeftigt' => "adj",
          'million' => "adj",
          'hat' => "vt",
          'braucht' => "vt",
          'jedoch' => "questionword",
          'leise' => "adj",
          'heutzutage' => "adj",
          'magst' => "vt",
          'fremd' => "adj",
          'trees' => "n",
          'weh' => "adj",
          'klug' => "adj",
          'offen' => "adj",
          '==' => "vt",
          'tiere' => "n",
          'boes' => "adj",
          'what' => "questionword",
          'mueden' => "adj",
          'ster' => "adj",
          'locker' => "adj",
          'lange' => "adj",
          'vorerst' => "adj",
          'bescheiden' => "adj",
          'mies' => "adj",
          'häufig' => "adj",
          'fuenf' => "adj",
          'elfte' => "adj",
          'kuenftig' => "adj",
          'ewig' => "adj",
          'leichten' => "adj",
          'nett' => "adj",
          'of' => "prep",
          'bei' => "prep",
          'ohne' => "prep",
          'still' => "adj",
          'oft' => "adj",
          'dir' => "n",
          'lind' => "adj",
          'wieso' => "questionword",
          'bisweilen' => "adj",
          'will' => "vt",
          'falsche' => "adj",
          'haupt' => "adj",
          'dumpf' => "adj",
          'leicht' => "adj",
          'when' => "questionword",
          'tlerweile' => "adj",
          'weshalb' => "questionword",
          'deutsche' => "adj",
          'das' => "art",
          'beste' => "adj",
          'spitz' => "adj",
          'kraus' => "adj",
          'selten' => "adj",
          'kalte' => "adj",
          'zur' => "questionword",
          'mochten' => "vt",
          'wild' => "adj",
          'where' => "questionword",
          'trocken' => "adj",
          'linkes' => "adj",
          'meins' => "n",
          'man' => "n",
          'forsch' => "adj",
          'fidel' => "adj",
          'heiser' => "adj",
          'unreifem' => "adj",
          'wichtigem' => "adj",
          'grob' => "adj",
          'bisher' => "adj",
          'jetzt' => "adj",
          'viel' => "adj",
          'berufst' => "vt",
          'sauer' => "adj",
          'rarely' => "adj",
          'a' => "n",
          'genau' => "adj",
          'ein' => "art",
          'bloed' => "adj",
          'einmal' => "adj",
          'beruehmt' => "adj",
          'in' => "prep",
          'sowie' => "prep",
          'gemein' => "adj",
          'neulich' => "adj",
          'unreifer' => "adj",
          'niemand' => "n",
          '!=>' => "vt",
          'links' => "adj",
          'edel' => "adj",
          'keineswegs' => "adj",
          'dieses' => "art",
          'traege' => "adj",
          'stark' => "adj",
          'jeweils' => "adj",
          'zweimal' => "adj",
          'mild' => "adj",
          'by' => "prep",
          'by' => "prep",
          'bockwurst' => "n",
          'brunkhorst' => "n",
          'buergerprotest' => "n",
          'protest' => "n",
          'fuehlen' => 'vi',
          'faust' => "n",
          'frost' => "n",
          'fuerst' => "n",
          'kurfuerst' => "n",
          'schroff' => "adj",
          'west' => "adj",
          'sind' => "vt",
          'wuerden' => "vt",
          'wo' => "questionword",
          'sechste' => "adj",
          'usually' => "adj",
          'fuenfzig' => "adj",
          'offiziell' => "adj",
          'fair' => "adj",
          'bleib' => "vt",
          'bringen' => "vt",
          'milliarde' => "adj",
          'tauche' => "vt",
          'uhr' => "n",
          'meinen' => "art",
          'wegen' => "prep",
          'knapp' => "adj",
          'frankreich' => "n",
          'german' => "adj",
          'einerseits' => "adj",
          'blind' => "adj",
          'gestern' => "adj",
          'monoton' => "adj",
          'uebel' => "adj",
          'freut' => "vi",
          'freuen' => "vi",
          'freust' => "vi",
          'freue' => "vi",
          'lax' => "adj",
          'zum' => "questionword",
          'simpel' => "adj",
          'acht' => "adj",
          'setzen' => "vt",
          'beruf' => "n",
          'schnoede' => "adj",
          'meine' => "art",
          'damals' => "adj",
          'zwoelf' => "adj",
          'rank' => "adj",
          'fast' => "adj",
          'bett' => "n",
          'einstein' => "n",
          'schneller' => "adj",
          'zweiter' => "adj",
          'sometimes' => "adj",
          'halten' => "vt",
          'deinem' => "art",
          'warm' => "adj",
          'glatt' => "adj",
          'steil' => "adj",
          'kuehn' => "adj",
          'beschaedigt' => "adj",
          'welchen' => "questionword",
          'on' => "prep",
          'muedem' => "adj",
          'euers' => "art",
          'flau' => "adj",
          'monotone' => "adj",
          'huebsch' => "adj",
          'nackt' => "adj",
          'leck' => "adj",
          'wenn' => "questionword",
          'arm' => "adj",
          'nachts' => "adj",
          'lang' => "adj",
          'deine' => "art",
          'stes' => "adj",
          'meinem' => "art",
          'keinen' => "adj",
          'moechte' => "vt",
          'nicht' => "adj",
          'kunst' => "n",
          'wach' => "adj",
          'neues' => "adj",
          'unreife' => "adj",
          'isunknown' => "vi",
          'enumall' => "vi",
          'kaputt' => "adj",
          'duerr' => "adj",
          'uebernahm' => "vt",
          'zaeh' => "adj",
          'duester' => "adj",
          'zwei' => "adj",
          'rechten' => "adj",
          'welk' => "adj",
          'schlau' => "adj",
          'wichtigen' => "adj",
          'schließlich' => "adj",
          'warum' => "questionword",
          'brav' => "adj",
          'teuer' => "adj",
          'dreizehnte' => "adj",
          'nahm' => "vt",
          'welcher' => "questionword",
          'dreissig' => "adj",
          'echt' => "adj",
          'jungen' => "adj",
          'klein' => "adj",
          'zart' => "adj",
          'haben' => "vt",
          'ca' => "adj",
          'meint' => "vt",
          'denn' => "adj",
          'dritten' => "adj",
          'recht' => "adj",
          'weit' => "adj",
          'jaeh' => "adj",
          'now' => "adj",
          'neunzig' => "adj",
          'geil' => "adj",
          'china' => "n",
          'seiner' => "art",
          'durch' => "prep",
          'es' => "n",
          'mochte' => "vt",
          'heise' => "vt",
          'gross' => "adj",
          'j' => "n",
          'tal' => "n",
          'oder' => "linking",
          'endete' => "vi",
          'endeten' => "vi",
          'endet' => "vi",
          'enden' => "vi",
          'andere' => "adj",
          'ihres' => "n",
          'bis' => "prep",
          'about' => "prep",
          'sich' => "n",
          'wer' => "questionword",
          'muessten' => "vt",
          'allgemeiner' => "adj",
          'dengleichen' => "adj",
          'laut' => "adj",
          'fett' => "adj",
          'how' => "questionword",
          'geht' => "vt",
          'tausende' => "adj",
          'dere' => "adj",
          'baut' => "vt",
          'taucht' => "vt",
          'schneiden' => "vt",
          'schuetter' => "adj",
          '&' => "linking",
          'their' => "art",
          'ders' => "adj",
          'best' => "adj",
          'deins' => "n",
          'gelegentlich' => "adj",
          'besonderes' => "adj",
          'taub' => "adj",
          'doppelt' => "adj",
          'mag' => "vt",
          'wollte' => "vt",
          'sue?' => "adj",
          'unterwegs' => "adj",
          'schnell' => "adj",
          'starr' => "adj",
          'liegt' => "vt",
          'stumpf' => "adj",
          'dieser' => "art",
          'danach' => "adj",
          'bald' => "adj",
          'wann' => "questionword",
          'worum' => "questionword",
          'sobald' => "questionword",
          'gesamt' => "adj",
          'spd' => "n",
          'zahm' => "adj",
          'werden' => "vt",
          'rot' => "adj",
          'schwer' => "adj",
          'von' => "prep",
          'doof' => "adj",
          'harsch' => "adj",
          'vielleicht' => "adj",
          'hand' => "n",
          'vielen' => "adj",
          'oftmals' => "adj",
          'reich' => "adj",
          'mal' => "adj",
          'zehntausend' => "adj",
          'which' => "questionword",
          'kann' => "vt",
          'einer' => "art",
          'bar' => "adj",
          'tauchen' => "vt",
          'pur' => "adj",
          'anhalte' => "vt",
          'neuer' => "adj",
          'mich' => "n",
          'kurz' => "adj",
          'fahl' => "adj",
          'sehr' => "adj",
          'wenigerals' => "prep",
          'achtzehnte' => "adj",
          'drittem' => "adj",
          'ersten' => "adj",
          'stirbt' => "vt",
          'bieder' => "adj",
          'hackt' => "vt",
          'halb' => "adj",
          'ueben' => "vt",
          'and' => "linking",
          'monotones' => "adj",
          'nass' => "adj",
          'erstmals' => "adj",
          'zwischen' => "prep",
          'darf' => "vt",
          'karg' => "adj",
          'jeder' => "adj",
          'gegenueber' => "prep",
          'wem' => "questionword",
          'schwuel' => "adj",
          'is' => "vt",
          'welchem' => "questionword",
          'schlecht' => "adj",
          'beruehmtest' => "adj",
          'linken' => "adj",
          'zusammen' => "adj",
          'wohnt' => "vt",
          'online' => "adj",
          'schnecken' => "n",
          'often' => "adj",
          'neunte' => "adj",
          'verfuegbar' => "adj",
          'finster' => "adj",
          'hauptstadt' => "n",
          'siehst' => "vt",
          'hei?' => "adj",
          'blau' => "adj",
          'seinen' => "art",
          'tief' => "adj",
          'offenbar' => "adj",
          'nst' => "adj",
          'um' => "prep",
          'leichtem' => "adj",
          'heissen' => "vt",
          'zehn' => "adj",
          'eueres' => "art",
          'lately' => "adj",
          'neun' => "adj",
          'rasch' => "adj",
          'soll' => "vt",
          'solle' => "vt",
          'sollte' => "vt",
          'sollten' => "vt",
          'sollen' => "vt",
          'sollt' => "vt",
          'klamm' => "adj",
          'ueber' => "prep",
          'seins' => "n",
          'c' => "n",
          'hold' => "adj",
          'vierzehnte' => "adj",
          'hell' => "adj",
          'fest' => "adj",
          'dies' => "art",
          'achtzehn' => "adj",
          'heikel' => "adj",
          'toll' => "adj",
          'ihrer' => "art",
          'hunderttausend' => "adj",
          'neunzehn' => "adj",
          'monotonen' => "adj",
          'abends' => "adj",
          'munter' => "adj",
          'nach' => "prep",
          'weiss' => "adj",
          'weitgehend' => "adj",
          'farbe' => "n",
          'deiner' => "art",
          'schoen' => "adj",
          'm' => "questionword",
          'milliarden' => "adj",
          'allgemeine' => "adj",
          'liege' => "vt",
          'sanft' => "adj",
          'f=>' => "vt",
          'waerst' => "vt",
          'nothing' => "n",
          'sen' => "adj",
          'vierzig' => "adj",
          'ihr' => "art",
          'rauh' => "adj",
          'ob' => "questionword",
          'hoch' => "adj",
          'berufe' => "vt",
          'that' => "art",
          'drei' => "adj",
          'besondere' => "adj",
          'anhalten' => "vt",
          'our' => "art",
          'beruht' => "vt",
          'halte' => "vt",
          'fesch' => "adj",
          'berufen' => "vt",
          'zuletzt' => "adj",
          'barock' => "n",
          'schlaff' => "adj",
          'nah' => "adj",
          'dreizehn' => "adj",
          'nen' => "adj",
          'moechten' => "vt",
          'b' => "n",
          'uebt' => "vt",
          'gst' => "n",
          'steif' => "adj",
          'satt' => "adj",
          'duerfte' => "vt",
          'wirr' => "adj",
          'dunkel' => "adj",
          'bist' => "vt",
          'doch' => "inter",
          'zone' => "n",
          'besonderem' => "adj",
          'anderen' => "adj",
          'neue' => "adj",
          'unseres' => "art",
          'bereits' => "adj",
          'vorwaerts' => "adj",
          'to' => "prep",
          'endlich' => "adj",
          'existiert' => "vt",
          'ebenfalls' => "adj",
          'eurem' => "art",
          'film' => "n",
          'dein' => "art",
          'zwanzigste' => "adj",
          'siebzehn' => "adj",
          'beiden' => "adj",
          'herb' => "adj",
          'rund' => "adj",
          'bekannt' => "adj",
          'linkem' => "adj",
          'seit' => "prep",
          'seinem' => "art",
          'auf' => "prep",
          'hin' => "adj",
          'eher' => "adj",
          'den' => "art",
          'gespielt' => "vi",
          'spielt' => "vi",
          'spielst' => "vi",
          'spielen' => "vi",
          'stumm' => "adj",
          'besonderer' => "adj",
          'auch' => "adj",
          'sechzehn' => "adj",
          'an' => "prep",
          'against' => "prep",
          'gerne' => "adj",
          'der' => "art",
          'erstem' => "adj",
          'page' => "n",
          'benachbarte' => "adj",
          'tumb' => "adj",
          'eigen' => "adj",
          'untertauchen' => "vt",
          'seine' => "art",
          'wenig' => "adj",
          'or' => "linking",
          'soon' => "adj",
          'willst' => "vt",
          'mehrmals' => "adj",
          'berg' => "n",
          'haeltst' => "vt",
          'duerfen' => "vt",
          'verwendet' => "vt",
          'hirn' => "n",
          'er' => "n",
          '(hoh)' => "adj",
          'per' => "prep",
          'kannst' => "vi",
          'kann' => "vi",
          'eng' => "adj",
          'bereit' => "adj",
          'sproede' => "adj",
          'eine' => "art",
          'tomorrow' => "adj",
          'jungem' => "adj",
          'gehst' => "vt",
          'als' => "prep",
          'mir' => "n",
          'deren' => "adj",
          'mittlerweile' => "adj",
          'wuerdest' => "vt",
          'neben' => "prep",
          'are' => "vt",
          'liegst' => "vt",
          'wichtig' => "adj",
          'bring' => "vt",
          'unreif' => "adj",
          'leer' => "adj",
          'fein' => "adj",
          'offline' => "adj",
          'hase' => "n",
          'woanders' => "adj",
          'link' => "adj",
          'worauf' => "questionword",
          'dass' => "questionword",
          'tapfer' => "adj",
          'between' => "prep",
          'seitdem' => "adj",
          'nun' => "adj",
          'flach' => "adj",
          'obschon' => "questionword",
          'aber' => "adj",
          'beleidigt' => "adj",
          'interessieren' => "vt",
          'sicher' => "adj",
          'zuweilen' => "adj",
          'gute' => "adj",
          'stolz' => "adj",
          'heisse' => "vt",
          'my' => "art",
          '_to_' => "questionword",
          'erstes' => "adj",
          'weder' => "prep",
          'intakt' => "adj",
          'gutem' => "adj",
          'hautfarbe' => "n",
          'ihre' => "art",
          'haetten' => "vt",
          'heute' => "adj",
          'zeichen' => "n",
          'e' => "n",
          'oede' => "adj",
          'mitten' => "prep",
          'frueh' => "adj",
          'feucht' => "adj",
          'gehe' => "vt",
          'scharf' => "adj",
          'leichter' => "adj",
          'alle' => "adj",
          'moechtest' => "vt",
          'beiderseits' => "adj",
          'gelb' => "adj",
          'stem' => "adj",
          'sehe' => "vt",
          'insoweit' => "adj",
          'ueberhaupt' => "adj",
          'sten' => "adj",
          'schneidet' => "vt",
          'lasch' => "adj",
          'XXtoXX' => "questionword",
          'welsch' => "adj",
          'rar' => "adj",
          'heisst' => "vt",
          'rechtem' => "adj",
          'schlapp' => "adj",
          'allgemeinem' => "adj",
          'andererseits' => "adj",
          'voll' => "adj",
          'teressiere' => "vt",
          'und' => "linking",
          'erbaut' => "vt",
          'rege' => "adj",
          'reasonof' => "vt",
          'keines' => "adj",
          'diese' => "art",
          'innen' => "adj",
          'diesen' => "art",
          'euren' => "art",
          'schon' => "adj",
          'bin' => "vt",
          'gab' => "vt",
          'arg' => "adj",
          'zwanzig' => "adj",
          '=' => "vt",
          'barsch' => "adj",
          'schmal' => "adj",
          'pulls' => "vt",
          'user' => "art",
          'tag' => "n",
          'allgemeines' => "adj",
          'erst' => "adj",
          'ich' => "n",
          'junger' => "adj",
          'teils' => "prep",
          'stmals' => "adj",
          'wird' => "vt",
          'hart' => "adj",
          'ab' => "prep",
          'dumm' => "adj",
          'freehal' => "n",
          'licht' => "adj",
          'lieb' => "adj",
          'faul' => "adj",
          'aussen' => "adj",
          'des' => "art",
          'diesem' => "art",
          'seh' => "vt",
          'spaeter' => "adj",
          'letzt' => "adj",
          'schraeg' => "adj",
          'schlank' => "adj",
          'krude' => "adj",
          'am' => "prep",
          'euch' => "n",
          'krumm' => "adj",
          'volle' => "adj",
          'flink' => "adj",
          'vorher' => "adj",
          'untertauchst' => "vt",
          'wurden' => "vt",
          'alt' => "adj",
          'wurde' => "vt",
          'sieben' => "adj",
          '>>>' => "vt",
          'wurdest' => "vt",
          'takt' => "adj",
          'falsch' => "adj",
          'bitter' => "adj",
          'wohne' => "vt",
          'normalerweise' => "adj",
          'werde' => "vt",
          'eines' => "art",
          'suchst' => "vt",
          'prall' => "adj",
          'unreifen' => "adj",
          'why' => "questionword",
          'siebte' => "adj",
          'mit' => "prep",
          'anders' => "adj",
          'statt' => "prep",
          'tree' => "n",
          'du' => "n",
          'waehrend' => "questionword",
          'has' => "vt",
          'deutsch' => "adj",
          'd' => "n",
          'enden' => "vt",
          'angst' => "n",
          'plump' => "adj",
          'geben' => "vi",
          'eben' => "adj",
          'stets' => "adj",
          'lahm' => "adj",
          'tauchst' => "vt",
          'denselben' => "adj",
          'out' => "prep",
          'ist' => "vt",
          'kuehl' => "adj",
          'vorhin' => "adj",
          'meisten' => "adj",
          'ends' => "adj",
          'monotonem' => "adj",
          'schwarz' => "adj",
          'welch' => "questionword",
          'ungefaehr' => "adj",
          'sowohl' => "prep",
          'telligent' => "adj",
          'kahl' => "adj",
          'woran' => "questionword",
          'unter' => "prep",
          'gehirn' => "n",
          'falls' => "questionword",
          'allgemein' => "adj",
          'pages' => "n",
          'must' => "vt",
          'mueder' => "adj",
          'essen' => "vt",
          'wir' => "n",
          'ihren' => "art",
          'breit' => "adj",
          'unerlaubt' => "adj",
          'unerlaubte' => "adj",
          'unerlaubter' => "adj",
          'unerlaubtem' => "adj",
          'unerlaubtes' => "adj",
          'unerlaubten' => "adj",
          'hacker' => "n",
          'keiner' => "adj",
          'allgemeinen' => "adj",
          'schwach' => "adj",
          'anfangs' => "adj",
          'weich' => "adj",
          'haette' => "vt",
          'universitaet' => "n",
          'druesenendstueck' => "n",
          'sechs' => "adj",
          'keine' => "adj",
          'mehr' => "adj",
          'hast' => "vt",
          'rechts' => "adj",
          'atomaren' => "adj",
          'kinder' => "n",
          'kindern' => "n",
          'geborgenheit' => "n",
          'elter' => "n",
          'eltern' => "n",
          'halben' => "adj",
          'jedes' => "adj",
          'zeitlebens' => "adj",
          'einem' => "art",
          'dreist' => "adj",
          'spricht' => "vt",
          'bruder' => "n",
          'brueder' => "n",
          'gut' => "adj",
          'beschlossen' => "vt",
          'leichte' => "adj",
          'erste' => "adj",
          'gruen' => "adj",
          'liegen' => "vt",
          'beschlagnahmt' => "adj",
          'rein' => "adj",
          'blank' => "adj",
          'wichtige' => "adj",
          'schier' => "adj",
          'hatte' => "vt",
          'recently' => "adj",
          'waerts' => "adj",
          'eins' => "adj",
          'jung' => "adj",
          'ernst' => "adj",
          'zweites' => "adj",
          'nur' => "adj",
          'im' => "prep",
          'xxtoxx' => "questionword",
          'woher' => "questionword",
          'en' => "n",
          'suche' => "vt",
          'vor' => "prep",
          'aus' => "prep",
          'fromm' => "adj",
          'whether' => "questionword",
          'monotoner' => "adj",
          'zu' => "prep",
          'feig' => "adj",
          'duenn' => "adj",
          '->' => "vt",
          'dreimal' => "adj",
          'weil' => "questionword",
          'unsere' => "art",
          'wohl' => "adj",
          'tot' => "adj",
          'welches' => "questionword",
          'morgen' => "adj",
          'schwul' => "adj",
          'sechzig' => "adj",
          'q=>' => "vt",
          'findest' => "vi",
          'junges' => "adj",
          'soviel' => "adj",
          'beizeiten' => "adj",
          'elf' => "adj",
          'weise' => "adj",
          'schlimm' => "adj",
          'mund' => "n",
          'bildet' => "vt",
          'rau' => "adj",
          'hunderte' => "adj",
          'krank' => "adj",
          'etwa' => "adj",
          'bilden' => "vt",
          'was' => "questionword",
          'waschen' => "vt",
          'schief' => "adj",
          'bringst' => "vt",
          'fuenfzehn' => "adj",
          'meiste' => "adj",
          'übermorgen' => "adj",
          'sondern' => "prep",
          'ste' => "adj",
          'dritter' => "adj",
          'mitunter' => "adj",
          'linke' => "adj",
          'deinen' => "art",
          'meiner' => "art",
          'weilen' => "adj",
          'nieder' => "adj",
          'if' => "questionword",
          'guten' => "adj",
          'leichtes' => "adj",
          'achzig' => "adj",
          'komma' => 10,
          'always' => "adj",
          'vierte' => "adj",
          'unserem' => "art",
          'name' => "n",
          'keusch' => "adj",
          'hager' => "adj",
          'trueb' => "adj",
          'erfunden' => "adj",
          'untertaucht' => "vt",
          'besetzt' => "adj",
          'derb' => "adj",
          'your' => "art",
          'neuen' => "adj",
          'meinung' => "n",
          'stet' => "adj",
          'fuenfzehnte' => "adj",
          'wen' => "questionword",
          'wohin' => "questionword",
          'eures' => "art",
          'hautfarben' => "n",
          'fuenfte' => "adj",
          'manchmal' => "adj",
          'die' => "art",
          'findet' => "vt",
          'streng' => "adj",
          'gutes' => "adj",
          'cdu' => "n",
          'cooles' => "adj",
          'arena' => "n",
          'have' => "vt",
          'ist-mit' => "vt",
          'rechtes' => "adj",
          'hehr' => "adj",
          'inzwischen' => "adj",
          'sacht' => "adj",
          'fies' => "adj",
          'anstatt' => "questionword",
          'schmuck' => "adj",
          'gesund' => "adj",
          'scheel' => "adj",
          'erfunden' => "vi",
          'erfand' => "vi",
          'gegen' => "prep",
          'wolltest' => "vt",
          'frech' => "adj",
          'today' => "adj",
          'nahe' => "adj",
          'uebst' => "vt",
          'unreifes' => "adj",
          'wichtiger' => "adj",
          'roh' => "adj",
          'frei' => "adj",
          'grundlegend' => "adj",
          'darfst' => "vt",
          'heisser' => "adj",
          'natural' => "adj",
          'spaet' => "adj",
          'nachher' => "adj",
          'damit' => "questionword",
          'vieler' => "adj",
          'bestehen' => "vt",
          'wuerde' => "vt",
          'gro?' => "adj",
          'besonders' => "adj",
          'studiert' => "vi",
          'keinem' => "adj",
          'hohl' => "adj",
          'zweiten' => "adj",
          'fix' => "adj",
          'immer' => "adj",
          'dererseits' => "adj",
          'wirst' => "vt",
          'intelligent' => "adj",
          'vereinigten' => "adj",
          'untertauche' => "vt",
          'hattest' => "vt",
          'euer' => "art",
          'mehrals' => "prep",
          'zugleich' => "adj",
          'dicht' => "adj",
          'teressierst' => "vt",
          'beispielsweise' => "adj",
          'erster' => "adj",
          'beeinflusst' => "vi",
          'beeinflussen' => "vi",
          'beeinflusse' => "vi",
          'beeinflussend' => "adj",
          'war' => "vt",
          'treu' => "adj",
          'aerobe' => "n",
          'früher' => "adj",
          'wegs' => "adj",
          'elend' => "adj",
          'kalt' => "adj",
          'heil' => "adj",
          'bloss' => "adj",
          'ganz' => "adj",
          'sauber' => "adj",
          '=>' => "vt",
          'beruehmte' => "adj",
          'welche' => "questionword",
          'fangs' => "adj",
          'biszu' => "prep",
          'wahr' => "adj",
          'interessiere' => "vt",
          'millionen' => "adj",
          'folgende' => "adj",
          'muedes' => "adj",
          'moegen' => "vt",
          'because' => "questionword",
          'grosses' => "adj",
          'dritte' => "adj",
          'muede' => "adj",
          'tausend' => "adj",
          'wacker' => "adj",
          'gleich' => "adj",
          'lauter' => "adj",
          'gratis' => "adj",
          'schwanger' => "adj",
          'muerbe' => "adj",
          'papst' => "n",
          'Papst' => "n",
          'not' => "adj",
          'vierzehn' => "adj",
          'fuer' => "prep",
          'nachdem' => "questionword",
          'einen' => "art",
          'who' => "questionword",
          'jede' => "adj",
          'wert' => "adj",
          'kess' => "adj",
          'wie' => "questionword",
          'vier' => "adj",
          'siebzig' => "adj",
          'bilde' => "vt",
          'eingenommen' => "vt",
          'ts' => "adj",
          'schenke' => "vt",
          'klar' => "adj",
          'schrill' => "adj",
          'uebe' => "vt",
          'simple' => "adj",
          'kein' => "adj",
          'guter' => "adj",
          'siebzehnte' => "adj",
          'waere' => "vt",
          'did' => "vt",
          'wuest' => "adj",
          'do' => "vt",
          'tod' => "n",
          'drittes' => "adj",
          'benachbart' => "adj",
          'besonderen' => "adj",
          'ten' => "prep",
          'interessierst' => "vt",
          'atomar' => "adj",
          'rechte' => "adj",
          'ihrem' => "art",
          'bringt' => "vt",
          'mager' => "adj",
          'sein' => "vt",
          'froh' => "adj",
          'her' => "adj",
          'achte' => "adj",
          'fade' => "adj",
          'viele' => "adj",
          'blass' => "adj",
          'jeden' => "adj",
          'mond' => "n",
          'the' => "art",
          'haettest' => "vt",
          'sagen' => "vi",
          'sagst' => "vi",
          'sage' => "vi",
          'schick' => "adj",
          'eueren' => "art",
          'done' => "adj",
          'mein' => "art",
          'rechnen' => "vi",
          'kenn' => "vi",
          'kenne' => "vi",
          'kennst' => "vi",
          'anhaeltst' => "vt",
          'bisauf' => "prep",
          'sechzehnte' => "adj",
          'teressieren' => "vt",
          'zehnte' => "adj",
          'hundert' => "adj",
          'bisin' => "prep",
          'barocke' => "adj",
          'rueckwaerts' => "adj",
          'wien' => "n",
          'seither' => "adj",
          'waerest' => "vt",
          'zwoelfte' => "adj",
          'gehoeren' => "vt",
          'jeck' => "adj",
          'bern' => "n",
          'io' => "n",
          'bewahren' => "vt",
          'this' => "art",
          '?=>' => "vt",
          'heiter' => "adj",
          'for' => "prep",
          'nehme' => "vt",
          'jedem' => "adj",
          'neu' => "adj",
          'macht' => "vt",
          'vieles' => "adj",
          'zweitem' => "adj",
          'dich' => "n",
          'wichtiges' => "adj",
          'dienstags' => "adj",
          'be' => "vt",
          'linker' => "adj",
          'zonen' => "n",
          'funden' => "adj",
          'neunzehnte' => "adj",
          'anhaben' => "vi",
          'uns' => "n",
          'yesterday' => "adj",
          'selbe' => "adj",
          'r' => "questionword",
          'zweite' => "adj",
          'morsch' => "adj",
          'beruhen' => "vt",
          'never' => "adj",
          'krass' => "adj",
          'h' => "n",
          'frueher' => "adj",
          'schuechtern' => "adj",
          'gern' => "adj",
          'gehoert' => "vt",
          'f' => "n",
          'unseren' => "art",
          'schenkte' => "vt",
          'sie' => "n",
          'mochtest' => "vt",
          'noch' => "adj",
          'blo?' => "adj",
          'dick' => "adj",
          'wohingegen' => "questionword",
          'wund' => "adj",
          'geh' => "vt",
          'stur' => "adj",
          'weltweit' => "adj",
          'wohnst' => "vt",
          'schnecke' => "n",
          'neuem' => "adj",
          'rechter' => "adj",
          'jedoch'  => "adj",
          'finden'  => "vi",
          '_q_' => "adj",
};
        
define action guess_part_of_speech with var word do
    set new var guessed to ''
    if var word matches lc(var word) and var word matches /iv$/ do
        set var guessed to 'adj'
    done
    if var word matches lc(var word) and var word matches /an$/ do
        set var guessed to 'adj'
    done
    if var word matches lc(var word) and var word matches /em$/ do
        set var guessed to 'adj'
    done
    if var word matches /ste$/ do
        set var guessed to 'adj'
    done
    if var word matches /ier[te][n]?$/ do
        set var guessed to 'vi'
    done
    if var word matches /...ist((en)|(in))$/ do
        set var guessed to 'n'
    done
    if var word matches /est$/ do
        set var guessed to 'n'
    done
    if var word matches /ierte..?.?$/ do
        set var guessed to 'adj'
    done
    if var word matches /<[A-Z]>/ do
        set var guessed to 'n'
    done
    
    do return using var guessed
done

define action get_person with var _noun do
    set new var noun to lc with var _noun
    
    if var noun matches "ich" do
        do return with "1s"
    done
    if var noun matches "du" do
        do return with "2s"
    done
    if var noun matches /^(er|sie|es)$/ do
        do return with "3s"
    done
    if var noun matches "wir" do
        do return with "1p"
    done
    if var noun matches "ihr" do
        do return with "2p"
    done
    if var noun matches "sie" do
        do return with "3p"
    done
    
    do return with "3s"
done

define action get_verb with var verb, var person do

    if var verb matches "be" do
        if var person matches "1s" do
            return "bin"
        done
        if var person matches "2s" do
            return "bist"
        done
        if var person matches "3s" do
            return "ist"
        done
        if var person matches "1p" do
            return "sind"
        done
        if var person matches "2p" do
            return "seid"
        done
        if var person matches "3p" do
            return "sind"
        done
    done
    
    if var verb matches "have" do
        if var person matches "1s" do
            return "habe"
        done
        if var person matches "2s" do
            return "hast"
        done
        if var person matches "3s" do
            return "hat"
        done
        if var person matches "1p" do
            return "haben"
        done
        if var person matches "2p" do
            return "habt"
        done
        if var person matches "3p" do
            return "haben"
        done
    done
    
    if var verb matches "want" do
        if var person matches "1s" do
            return "will"
        done
        if var person matches "2s" do
            return "willst"
        done
        if var person matches "3s" do
            return "will"
        done
        if var person matches "1p" do
            return "wollen"
        done
        if var person matches "2p" do
            return "wollt"
        done
        if var person matches "3p" do
            return "wollen"
        done
    done
    
    if var verb matches "must" do
        if var person matches "1s" do
            return "muss"
        done
        if var person matches "2s" do
            return "musst"
        done
        if var person matches "3s" do
            return "muss"
        done
        if var person matches "1p" do
            return "muessen"
        done
        if var person matches "2p" do
            return "muesst"
        done
        if var person matches "3p" do
            return "muessen"
        done
    done
    
    if var verb matches "can" do
        if var person matches "1s" do
            return "kann"
        done
        if var person matches "2s" do
            return "kannst"
        done
        if var person matches "3s" do
            return "kann"
        done
        if var person matches "1p" do
            return "koennen"
        done
        if var person matches "2p" do
            return "koennt"
        done
        if var person matches "3p" do
            return "koennen"
        done
    done
    
    if var verb matches "may" do
        if var person matches "1s" do
            return "darf"
        done
        if var person matches "2s" do
            return "darfst"
        done
        if var person matches "3s" do
            return "darf"
        done
        if var person matches "1p" do
            return "duerfen"
        done
        if var person matches "2p" do
            return "duerft"
        done
        if var person matches "3p" do
            return "duerfen"
        done
    done
    
    if var verb matches "should" do
        if var person matches "1s" do
            return "soll"
        done
        if var person matches "2s" do
            return "sollst"
        done
        if var person matches "3s" do
            return "soll"
        done
        if var person matches "1p" do
            return "sollen"
        done
        if var person matches "2p" do
            return "sollt"
        done
        if var person matches "3p" do
            return "sollen"
        done
    done
    
    return ""
done

define action compute_output with var output do
    do regex using var output: /in dem/, "im", :global:i
    do regex using var output: /an dem/, "am", :global:i

    do regex using var output: / [&] /, " und ", :global:i

    do regex using var output: /f=>/, "", :global:i
    do regex using var output: /!=>/, "", :global:i
    if var output matches /q=>/ do
        do regex using var output: /q=>/, "", :global:i
        set var output to var output concat "?"
    done
    if var output matches /_q_/ do
        do regex using var output: /_q_/, "", :global:i
        set var output to var output concat "?"
    done
    do regex using var output: /=>/, "", :global:i
    
    set new array verb_prefixes to items-returning keys with items of hash builtin_verb_prefixes
    
    for each new var prefix in array verb_prefixes do
        if not from hash builtin_verb_prefixes_no_split item { var prefix } do
            go to next
        done
        if from hash builtin_auxiliary_verbs item { var prefix } do
            go to next
        done
        
        do regex using var output: /\s($prefix)(<[a-zA-Z0-9]>*?)\s(<[a-zA-Z0-9]>*?)\s/, " $1 $2 $0 ", :global
        do regex using var output: /\s($prefix)(<[a-zA-Z0-9]>*?)$/, " $1 $0", :global
    done
    
    if var output matches /\$\$username\$\$/ do
        print new line
        print "Searching for the user's name"
        print new line
        print new line
        set new var username to ''

        set new var output_file_name to '_output__get_csv'
        set new var csv_output to 'bin|bist|ist|sind|seid|heisst|heisse|heissen^du^0^0^0^default^0^0^0^0^0^0'

        do unlink with '_input__get_csv'

        set new var output_handle to handle for file name var output_file_name, write
        print into var output_handle data var csv_output
        do close with var output_handle

        while not exists: '_input__get_csv', end test do
            do wait 0.5 seconds
        done
        
        set new array usernames to an empty array
        set new var input_file_name to '_input__get_csv'
        set new var input_handle to handle for file name var input_file_name, read

        for each new var line from var input_handle is rw do
            set new array result to an empty array
            set new array rawresult to split using /\^/, var line
            if var line do
                push into array usernames, from array rawresult item [ 3 ]
            done
        done

        set new var random_number to rand using items of array usernames
        set var username to from array usernames item [ var random_number ]

        print var username
        print new line

        if var username do
            do regex using var output: /\$\$username\$\$/, "var username", :global:i
        done
    done

    if var output matches /\$\$unknownproperty\$\$/ do
        print new line
        print "Searching for the user's name"
        print new line
        print new line
        set new var username to ''

        # First, look for general properties
        set new var output_file_name to '_output__get_csv'
        set new var csv_output to 'haenen|haen|hast|hat|han|hae|ha^0^0^0^0^default^0^0^0^0^0^0'

        do unlink with '_input__get_csv'

        set new var output_handle to handle for file name var output_file_name, write
        print into var output_handle data var csv_output
        do close with var output_handle

        while not exists: '_input__get_csv', end test do
            do wait 0.5 seconds
        done
        
        set new array usernames to an empty array
        set new var input_file_name to '_input__get_csv'
        set new var input_handle to handle for file name var input_file_name, read

        for each new var line from var input_handle is rw do
            set new array result to an empty array
            set new array rawresult to split using /\^/, var line
            if var line and from array rawresult item [ 3 ] do
                push into array usernames, from array rawresult item [ 3 ]
            done
        done
        
        # Then, look what is already given
        set new var output_file_name to '_output__get_csv'
        set new var csv_output to 'haenen|haen|hast|hat|han|hae|ha^du^0^0^0^default^0^0^0^0^0^0'

        do unlink with '_input__get_csv'

        set new var output_handle to handle for file name var output_file_name, write
        print into var output_handle data var csv_output
        do close with var output_handle

        while not exists: '_input__get_csv', end test do
            do wait 0.5 seconds
        done
        
        set new var input_file_name to '_input__get_csv'
        set new var input_handle to handle for file name var input_file_name, read

        for each new var line from var input_handle is rw do
            set new array result to an empty array
            set new array rawresult to split using /\^/, var line
            if var line do
                set new var i to 0
                for each new var property in array usernames do
                    if var property matches from array rawresult item [ 3 ] do
                        do delete with from array usernames item [ var i ]
                        go to last
                    done
                    set var i to var i + 1
                done
            done
        done

        # Replace the variable
        set new var random_number to rand using items of array usernames
        set var username to from array usernames item [ var random_number ]

        print var username
        print new line

        if var username do
            do regex using var output: /\$\$unknownproperty\$\$/, "var username", :global:i
        done
        else do
            do regex using var output: /\$\$unknownproperty\$\$/, "etwas", :global:i
        done
    done

    set new var random_number to rand using items of array builtin_male_names
    set new var name to from array builtin_male_names item [ var random_number ]

    do regex using var output: /\$\$randomname\$\$/, "var name", :global:i
    do regex using var output: /<[*]>/, "var name", :global:i

    do regex using var output: / von den /, " der ", :global:i
    do regex using var output: / von dem /, " des ", :global:i

    do regex using var output: / in jahre_/, " im Jahre ", :global:i
    do regex using var output: / in_jahre_/, " im Jahre ", :global:i

    if var output matches /\sein/ and lc(var output) matches /(^|<[,.]>|\s)nicht(\s|<[,.]>|$)/ do
        do regex using var output: /(^|<[,.]>|\s)nicht(\s|<[,.]>|$)/, "$1", :global:i
        do regex using var output: /\sein/, " kein", :global:i
    done
    
    set new var time_now to time without arguments
    set new array date_time_array to items-returning localtime with var time_now
    set new var sec to from array date_time_array item [ 0 ]
    set new var min to from array date_time_array item [ 1 ]
    set new var hour to from array date_time_array item [ 2 ]
    set new var mday to from array date_time_array item [ 3 ]
    set new var mon to from array date_time_array item [ 4 ]
    set new var year to from array date_time_array item [ 5 ]
    set new var wday to from array date_time_array item [ 6 ]
    set new var yday to from array date_time_array item [ 7 ]
    set new var isdst to from array date_time_array item [ 8 ]
    
    set new var weekday to 'nichts'
    if var wday is 0 do
        set var weekday to "Sonntag"
    done
    if var wday is 1 do
        set var weekday to "Montag"
    done
    if var wday is 2 do
        set var weekday to "Dienstag"
    done
    if var wday is 3 do
        set var weekday to "Mittwoch"
    done
    if var wday is 4 do
        set var weekday to "Donnerstag"
    done
    if var wday is 5 do
        set var weekday to "Freitag"
    done
    if var wday is 6 do
        set var weekday to "Samstag"
    done
    
    set var year to var year + 1900
    
    do regex using var output: /\$\$time\$\$/, "var hour:var min:var sec", :global:i
    do regex using var output: /\$\$wday\$\$/, "var weekday", :global:i
    do regex using var output: /\$\$mday\$\$/, "var mday", :global:i
    do regex using var output: /\$\$month\$\$/, "var mon", :global:i
    do regex using var output: /\$\$year\$\$/, "var year", :global:i
    do regex using var output: /\$\$date\$\$/, "var mday.var mon.var year", :global:i

    do regex using var output: /nothing/, "nichts", :global:i
    do regex using var output: /NULL/, "", :global:i
    do regex using var output: /<[;]>/, " ", :global:i
    #do regex using var output: / = /, " bedeutet ", :global:i
    do regex using var output: /_/, " ", :global:i
    do regex using var output: /\s+/, " ", :global:i
    do regex using var output: /\s+<[,]>/, ",", :global:i
    do regex using var output: /\s\s/, " ", :global:i
    do regex using var output: /^\s/, "", :global:i
    do regex using var output: /\s$/, "", :global:i
    set var output to ucfirst with var output
    
    do return with var output
done

define action toggle_verbs with array verbs, array entities do
    set new flag continue to 0
    for each new array entity_array in array entities is rw do
        set new var entity to from array entity_array first item
        
        if lc(var entity) matches /(^|\s)(ich|du|mich|dich)(\s|$)/ do
            set flag continue to 1
        done
    done
    
    if not flag continue do
        do return with array verbs
    done
    
    for each new array verb_array in array verbs is rw do
        set new var verb to lc with from array verb_array first item
        if var verb matches "ist" do
            go to next
        done
        if var verb matches /^gew/ do
            go to next
        done
        if var verb matches /bin$/ do
            do regex using var verb: /bin$/, "bist", :global:i
        done
        else if var verb matches /bist$/ do
            do regex using var verb: /bist$/, "bin", :global:i
        done
        else if var verb matches /hast$/ do
            do regex using var verb: /hast$/, "habe", :global:i
        done
        else if var verb matches /hab(e)?$/ do
            do regex using var verb: /hab(e)?$/, "hast", :global:i
        done
        else if var verb matches /heisst$/ do
            do regex using var verb: /heisst$/, "heisse", :global:i
        done
        else if var verb matches /heisse$/ do
            do regex using var verb: /heisse$/, "heisst", :global:i
        done
        else if var verb matches /weisst$/ do
            do regex using var verb: /weisst$/, "weiss", :global:i
        done
        else if var verb matches /weiss$/ do
            do regex using var verb: /weiss$/, "weisst", :global:i
        done
        else if var verb matches /traegst$/ do
            do regex using var verb: /traegst$/, "trage", :global:i
        done
        else if var verb matches /trage$/ do
            do regex using var verb: /trage$/, "traegst", :global:i
        done
        else if var verb matches /haeltst$/ do
            do regex using var verb: /haeltst$/, "halte", :global:i
        done
        else if var verb matches /halte$/ do
            do regex using var verb: /halte$/, "haeltst", :global:i
        done
        else if var verb matches /willst$/ do
            do regex using var verb: /willst$/, "will", :global:i
        done
        else if var verb matches /will$/ do
            do regex using var verb: /will$/, "willst", :global:i
        done
        else if var verb matches /kannst$/ do
            do regex using var verb: /kannst$/, "kann", :global:i
        done
        else if var verb matches /kann$/ do
            do regex using var verb: /kann$/, "kannst", :global:i
        done
        else if var verb matches /wirst$/ do
            do regex using var verb: /wirst$/, "werde", :global:i
        done
        else if var verb matches /werde$/ do
            do regex using var verb: /werde$/, "wirst", :global:i
        done
        else if var verb matches /test$/ do
            do regex using var verb: /test$/, "te", :global:i
        done
        else if var verb matches /te$/ do
            do regex using var verb: /te$/, "test", :global:i
        done
        else if var verb matches /(e)?st$/ do
            do regex using var verb: /(e)?st$/, "e", :global:i
        done
        else if var verb matches /e$/ do
            do regex using var verb: /e$/, "st", :global:i
        done
        do regex using var verb: /sss/, "ss", :global:i
        set from array verb_array first item to var verb
    done
    do return with array verbs
done

define action toggle_entities with array entities do
    for each new array entity_array in array entities is rw do
        set new var entity to from array entity_array first item
        if lc(var entity) matches /(^|\s)mir($|\s)/ do
            do regex using var entity: /(^|\s)mir($|\s)/, "${1}dir$2", :global:i
        done
        else if lc(var entity) matches /(^|\s)dir($|\s)/ do
            do regex using var entity: /(^|\s)dir($|\s)/, "${1}mir$2", :global:i
        done
        else if lc(var entity) matches /(^|\s)mich($|\s)/ do
            do regex using var entity: /(^|\s)mich($|\s)/, "${1}dich$2", :global:i
        done
        else if lc(var entity) matches /(^|\s)dich($|\s)/ do
            do regex using var entity: /(^|\s)dich($|\s)/, "${1}mich$2", :global:i
        done
        else if lc(var entity) matches /(^|\s)ich($|\s)/ do
            do regex using var entity: /(^|\s)ich($|\s)/, "${1}du$2", :global:i
        done
        else if lc(var entity) matches /(^|\s)du($|\s)/ do
            do regex using var entity: /(^|\s)du($|\s)/, "${1}ich$2", :global:i
        done
        else if   (var entity) matches /(^|\s)mein/ do
            do regex using var entity: /(^|\s)mein/, "${1}dein", :global:i
        done
        else if   (var entity) matches /(^|\s)dein/ do
            do regex using var entity: /(^|\s)dein/, "${1}mein", :global:i
        done
        
        set from array entity_array first item to var entity
    done
    do return with array entities
done

define action adjust_truth with array result, var truth, var number_of_clause do
    if var truth < 0.5 do
        if from array result item [ var number_of_clause ] item [ 2 ] matches /^ein/ do
            do regex using from array result item [ var number_of_clause ] item [ 2 ]: /^ein/, "kein", :global:i
        done
        else if from array result item [ var number_of_clause ] item [ 1 ] matches /^ein/ do
            do regex using from array result item [ var number_of_clause ] item [ 1 ]: /^ein/, "kein", :global:i
        done
        else do
            set from array result item [ var number_of_clause ] item [ 3 ] to "nicht " concat from array result item [ var number_of_clause ] item [ 3 ]
        done
    done
done

define action stem_nouns with array phrases do
    for each new var phrase in array phrases is rw do
        set new array words to split using /\s/, var phrase
        for each new var noun in array words is rw do
            # TEXT
            # Delete articles...
            # CODE

            if var noun matches /^ein.?.?$/ do
                do regex using var noun: /^ein.?.?$/, "*", :global:i
            done
            if var noun matches /ein.?.?$/ do
                do regex using var noun: /ein.?.?$/, "ei*", :global:i
            done
            if var noun matches /ein$/ do
                do regex using var noun: /ein$/, "*", :global:i
            done
            if var noun matches /^(der|die|das|den|dem|des)$/ and not items of array words is 1 do
                #do regex using var noun: /^(der|die|das|den|dem|des)$/, "*", :global:i
                do regex using var noun: /^(der|die|das|den|dem|des)$/, "", :global:i
                go to next
            done
            
            if length(var noun) <= 3 do
                go to next
            done
            
            # TEXT
            # That's the stemming algorithm
            # CODE
            if var noun matches /((ein)|(ie.)|(tes))$/ do
                go to next
            done
            
            if var noun matches /ern$/ do
                do regex using var noun: /ern$/, "*", :global:i
            done
            if var noun matches /e<[mnrs]>$/ do
                do regex using var noun: /e<[mnrs]>$/, "*", :global:i
            done
            if var noun matches /e$/ do
                do regex using var noun: /e$/, "*", :global:i
            done
            if var noun matches /<[bdfghklmnrt]>s$/ do
                do regex using var noun: /s$/, "*", :global:i
            done
            if var noun matches /est$/ do
                do regex using var noun: /est$/, "*", :global:i
            done
            if var noun matches /e<[nr]>$/ do
                do regex using var noun: /e<[nr]>$/, "*", :global:i
            done
            if var noun matches /<[bdfghklmnt]>st$/ do
                if length(var noun) > 5 do
                    do regex using var noun: /st$/, "*", :global:i
                done
            done
            if var noun matches /(end|ung)$/ do
                do regex using var noun: /(end|ung)$/, "*", :global:i
                
                if var noun matches /ig$/ and not var noun matches /eig$/ do
                    do regex using var noun: /ig$/, "*", :global:i
                done
            done
            if var noun matches /(ig|ik|isch)$/ and not var noun matches /e(ig|ik|isch)$/ do
                do regex using var noun: /(ig|ik|isch)$/, "*", :global:i
            done
            if var noun matches /(lich|heit)$/ do
                do regex using var noun: /(lich|heit)$/, "*", :global:i
            done
            if var noun matches /(lich|ig)?keit$/ do
                do regex using var noun: /(lich|ig)?keit$/, "*", :global:i
            done
        done
        set var phrase to join using " ", items of array words
        
        do regex using var phrase: /<[*]>\s/, "*", :global
        do regex using var phrase: /\s<[*]>/, "*", :global
        do regex using var phrase: /^\s+/, "", :global
    done
    
    return array phrases
done

define action check_for_math with var input do
    set new var math to var input
    
    do regex using var math: /<[=?!.]>/, "", :global:i
    do regex using var math: /hoch/, "**", :global:i
    do regex using var math: /\^/, "**", :global:i
    do regex using var math: /wie/, "", :global:i
    do regex using var math: /viel/, "", :global:i
    do regex using var math: /was/, "", :global:i
    do regex using var math: /ISUNKNOWN/, "", :global:i
    do regex using var math: /ergebnis/, "", :global:i
    do regex using var math: /von/, "", :global:i
    do regex using var math: /ist/, "", :global:i
    do regex using var math: /sind/, "", :global:i
    do regex using var math: /what/, "", :global:i
    do regex using var math: /is/, "", :global:i
    do regex using var math: /does/, "", :global:i
    do regex using var math: /makes/, "", :global:i
    do regex using var math: /ergibt/, "", :global:i
    do regex using var math: /gibt/, "", :global:i
    do regex using var math: /aus/, " ", :global:i
    do regex using var math: /sich/, " ", :global:i
    do regex using var math: /der|die|das/, " ", :global:i
    do regex using var math: / plus /, "+", :global:i
    do regex using var math: / und /, "+", :global:i
    do regex using var math: / half of (\d+)/, "( $1 \/ 2 )", :global:i
    do regex using var math: / minus /, "-", :global:i
    set new var slash to "/"
    do regex using var math: / geteilt durch /, "var slash", :global:i
    do regex using var math: / dividiert durch /, "var slash", :global:i
    do regex using var math: / durch /, "var slash", :global:i
    do regex using var math: / mal /, "*", :global:i
    do regex using var math: /x/, "*", :global:i
    do regex using var math: /\s+/, "", :global:i
    do regex using var math: /wurzel/, "sqrt ", :global:i
    do regex using var math: /<[,]>/, ".", :global:i
    set new var value to undef
    
    print "Checking for math expression: "
    print new line
    print var math
    print new line

    if var math matches /^(<[0-9\d+\-*.\/\s)(]>|(sqrt)|(sin)|(cos)|(tan)|(cot))+$/ do
	    print "Ok."
	    print new line
        do regex using var math: /(sin|cos|tan|cot)(<[\d]>+)/, "$1($2)", :global:i
        do eval with 'var value = ' concat var math concat ';'
        if defined(var value) do
            return [ 0, "Das Ergebnis ist " concat var value concat "."  ]
        done
        else do
            return 0
        done
    done
    return 0
done

define action check_for_greeting with var input do
    set new array greetings_from_user to an empty array
    push into array greetings_from_user, 'hallo'
    push into array greetings_from_user, 'guten tag'
    push into array greetings_from_user, 'guten morgen'
    push into array greetings_from_user, 'hi'

    for each new var greeting in array greetings_from_user do
        if lc(var input) matches /((\s)|<[,.\-!?]>|^)var greeting((\s)|<[,.\-!?]>|$)/ do
            return 1
        done
    done
    
    return 0
done

define action greet with var user do
    set new array time_now to items-returning localtime without arguments
    set new var hour to from array time_now item [ 2 ]

    if var user do
        if var hour >= 0 and var hour < 5 do
            do return with [ 0, var user concat "..? Immer noch wach...?" ]
        done
        if var hour >= 5 and var hour < 12 do
            do return with [ 0, "Guten Morgen, " concat var user concat "." ]
        done
        if var hour >= 12 and var hour < 17 do
            do return with [ 0, "Guten Tag, " concat var user concat "." ]
        done
        if var hour >= 17 and var hour < 24 do
            do return with [ 0, "Guten Abend, " concat var user concat "." ]
        done
    done
    else do
        if var hour >= 0 and var hour < 5 do
            do return with [ 0, "Wie..? Immer noch wach...?" ]
        done
        if var hour >= 5 and var hour < 12 do
            do return with [ 0, "Guten Morgen." ]
        done
        if var hour >= 12 and var hour < 17 do
            do return with [ 0, "Guten Tag." ]
        done
        if var hour >= 17 and var hour < 24 do
            do return with [ 0, "Guten Abend." ]
        done
    done
done

define action make_parsable with var input do
    do regex using var input: / weil /, ", weil ", :global:i
    do regex using var input: / dass /, ", dass ", :global:i
    do regex using var input: / wenn /, ", wenn ", :global:i
    do regex using var input: / falls /, ", falls ", :global:i
    do regex using var input: / dann /, ", dann ", :global:i
    do regex using var input: /<[,]>\s*?<[,]>/, ",", :global:i
    do regex using var input: /<[,]>\s*?<[,]>/, ",", :global:i
    do regex using var input: /<[,]>\s*?<[,]>/, ",", :global:i
    do regex using var input: /<[,]>\s*?<[,]>/, ",", :global:i
    
    do return with var input
done

define action multiple_choices_verb with var verb do
    set new array choices to an empty array
    set new array endings to an empty array
    
    push into array endings, "enen"
    push into array endings, "en"
    push into array endings, "st"
    push into array endings, "t"
    push into array endings, "n"
    push into array endings, "e"
    push into array endings, ""

    for each new var ending in array endings do
        set new var copied_verb to var verb
        do regex using var verb: /var ending$/, "", :i
        if not var copied_verb matches var verb do
            go to last
        done
    done
    
    if var verb matches "bi" or var verb matches "is" or var verb matches "sind" or var verb matches /heis/ do
        push into array choices, var verb
        push into array choices, "bin"
        push into array choices, "bist"
        push into array choices, "ist"
        push into array choices, "sind"
        push into array choices, "seid"
        push into array choices, "sein"
        push into array choices, "heisst"
        push into array choices, "heisse"
        push into array choices, "heissen"
    done
    else if var verb matches "gib" or var verb matches "geb" do
        push into array choices, var verb
        push into array choices, "gebe"
        push into array choices, "geben"
        push into array choices, "gibst"
        push into array choices, "gibt"
        push into array choices, "gebt"
    done
    else do
        push into array choices, var verb
        for each new var ending in array endings do
            push into array choices, var verb concat var ending
        done
    done
    
    set new var verbs to join with "|", items of array choices
    do return with var verbs
done

define action find_mode with var input do
    if var input matches /<[?]>/ do
        print "Sentence contains a question mark"
        print new line
        
        do return with "question"
    done
    else if lc(var input) matches /^((kannst\s)|(kann\s))/ do
        print "Sentence contains a question with can..."
        print new line
        
        do return with "question"
    done
    else if lc(" " concat var input concat " ") matches /(<[,]>)|(komma)/ and (" " concat var input concat " ") matches /((\swas\s)|(\swer\s)|(\swie\s)|(\swo\s)|(\swann\s)|(\swieso\s)|(\swarum\s)|(\swes)|(\swen\s)|(\swem\s)).*?(<[,]>|(komma))/ do
        print "Sentence contains a question word and sub clauses"
        print new line

        do return with "question"
    done
    else if (" " concat var input concat " ") matches /(\swas\s)|(\swer\s)|(\swie\s)|(\swo\s)|(\swann\s)|(\swieso\s)|(\swarum\s)|(\swes)|(\swen\s)|(\swem\s)/ and not lc(" " concat var input concat " ") matches /(<[,]>)|(komma)/ do
        print "Sentence contains a question word"
        print new line

        do return with "question"
    done
    do return with "statement"
done

define action but_feature_is_useful with var input do
    if (" " concat var input concat " ") matches /(\swas\s)|(\swer\s)|(\swie\s)|(\swo\s)|(\swann\s)|(\swieso\s)|(\swarum\s)|(\swes)|(\swen\s)|(\swem\s)/ and not lc(" " concat var input concat " ") matches /(<[,]>)|(komma)/ do
        do return with 0
    done
    
    if lc(" " concat var input concat " ") matches /(\sdas\s)/ and not lc(" " concat var input concat " ") matches /(<[,]>)|(komma)/ do
        if lc(" " concat var input concat " ") matches /(\sist\s)|(\ssind\s)/ do
            do return with 1
        done
    done
    
    if lc(" " concat var input concat " ") matches /(\shast\s)|(\shat\s)|(\shabe\s)/ do
        do return with 1
    done
    
    do return with 0
done

define action use_bug_feature with array results, hash parsed do
    for each new array result in array results do
        set new array clause to an empty array
        
        push into array clause, ''
        push into array clause, 'aber'
        set new var objects to ''
        set new array objects_separated to from hash parsed item { 'objects' }
        for each new array obj in array objects_separated do
            set var objects to var objects concat " "
            set var objects to var objects concat from array obj first item
        done
        do regex using var objects: /^\s/, "", :global
        if var objects matches /^\sein/ do
            push into array clause, 'k' concat var objects
        done
        else do
            push into array clause, 'nicht ' concat var objects
        done
        push into array clause, ''
        
        set var objects to lc with var objects
        set new var lastnoun to var objects
        do regex using var lastnoun: /^.*?\s/, "", :global
        if not lc( from array result item [ 1 ] item [ 1 ] concat " " concat from array result item [ 1 ] item [ 2 ] concat " " concat from array result item [ 1 ] item [ 3 ] ) matches /var objects/ do
            if not lc( from array result item [ 1 ] item [ 1 ] concat " " concat from array result item [ 1 ] item [ 2 ] concat " " concat from array result item [ 1 ] item [ 3 ] ) matches /var lastnoun/ do
                push into array result, array clause
            done
        done
    done
    
    do return with array results
done

define action use_random with var input, var current_language, var path, var mode do
    set new array random to an empty array

    print "Mode is: "
    print var mode
    print new line

    if var mode matches "statement" do
        push into array random, "Ich habe dich leider nicht verstanden."
        push into array random, "Hmm."
        push into array random, "Ah."
        push into array random, "Aha."
        push into array random, "Hmm."
        push into array random, "Gut."
        push into array random, "Ja."
        push into array random, "Oh."
        push into array random, "Klar."
    done
    else do
        print "Input is: "
        print var input
        print new line
        if lc(" " concat var input concat " ") matches /(\sja\s)|(\snein\s)|(\swas\s)|(\swer\s)|isunknown|(\swie\s)|(\swo\s)|(\swann\s)|(\swen\s)|(\swem\s)/ do
            push into array random, "Da kann ich dir leider keine Antwort geben."
            push into array random, "Keine Ahnung."
            push into array random, "Keine Ahnung, das kann ich dir nicht sagen."
            push into array random, "Keine Ahnung, das kann ich nicht sagen."
            push into array random, "Tut mir leid, das weiss ich nicht."
            push into array random, "Sorry, Keine Ahnung."
            push into array random, "Tut mir leid, das kann ich nicht sagen."
            push into array random, "Hm, das kann ich nicht sagen."
            push into array random, "Hm, das kann ich dir nicht sagen."
            push into array random, "Das weiss ich nicht."
            push into array random, "Ich weiss das nicht, kannst du es mir sagen?"
            push into array random, "Wenn ich das wuesste..."
            push into array random, "Ich stehe gerade auf dem Schlauch."
            push into array random, "Ich stehe wohl gerade auf dem Schlauch."

            push into array random, items of array random
        done
        else if lc(" " concat var input concat " ") matches /(\sja\s)|(\snein\s)/ do
            push into array random, "Wieso nicht?"
            push into array random, "Ja."
            push into array random, "Ja, klar."
            push into array random, "Ja klar."
            push into array random, "Natuerlich."
            push into array random, items of array random
        done
        else if lc(" " concat var input concat " ") matches /(\swarum\s)|(\swieso\s)|(\swes)/ do
            push into array random, "Wieso nicht?"
            push into array random, "Keine Ahnung."
            push into array random, "Keine Ahnung, das kann ich dir nicht sagen."
            push into array random, "Keine Ahnung, das kann ich nicht sagen."
            push into array random, "Hm, das kann ich nicht sagen."
            push into array random, "Hm, das kann ich dir nicht sagen."
            push into array random, "Das weiss ich nicht."
            push into array random, "Ich weiss das nicht, kannst du es mir sagen?"
            push into array random, items of array random
        done
        else do
            push into array random, "Ah?"
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Aha?"
            push into array random, "Hmm?"
            push into array random, "Hmm."
            push into array random, "Hm."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."
            push into array random, "Nein."

            if lc(" " concat var input concat " ") matches /(\shast\s)/ do
                push into array random, "Nein, habe ich leider verliehen." 
                push into array random, "Nein, ich bin nuechtern." 
                push into array random, "Nein, ich habe eine Menge Freunde." 
                push into array random, "Nein, ich habe viele Freunde und Bekannte." 
            done
            if lc(" " concat var input concat " ") matches /(\smagst\s)/ do
                push into array random, "Nein, ich mag das nicht."
            done
            push into array random, "Nein eigentlich so gut wie nie." 
            push into array random, "Nein, ganz im Gegenteil." 
            push into array random, "Nein, ganz und gar nicht."
            push into array random, "Nein, keinesfalls." 
            push into array random, "Nein, ich sehe keinen Grund dazu ."
            push into array random, "Nein, ich vertreibe mir mit chatten die Langeweile." 
            push into array random, "Nein, tu ich sicher nicht." 
            push into array random, "Nein, nicht direkt, darueber will ich nicht reden." 
            push into array random, "Nein, nur ganz selten." 
            push into array random, "Nicht falsch verstehen, aber ich denke nicht das dich das etwas angeht." 
            if lc(" " concat var input concat " ") matches /(\sviel\s)/ do
                push into array random, "Nicht gerade wenig." 
                push into array random, "Nicht mehr und nicht weniger als andere." 
            done
            if lc(" " concat var input concat " ") matches /(\sfeig)/ do
                push into array random, "Nicht feige, nur vorsichtig."
            done
        done
    done
    
    for each new var r in array random do
        set var r to [ 0, var r ]
    done

    do return with array random
done

define action check_invoke with var statement do
    set new var appname to ""
    set new var statement_lower to lc with var statement
    
    if var statement_lower matches /^rufe (.*?) auf/ do
        set var appname to $0
    done
    if var statement_lower matches /^ruf (.*?) auf/ do
        set var appname to $0
    done
    if var statement_lower matches /^starte (.*)/ do
        set var appname to $0
    done
    if var statement_lower matches /^start (.*)/ do
        set var appname to $0
    done
    if var statement_lower matches /^run (.*)/ do
        set var appname to $0
    done
    if var statement_lower matches /^fuehre (.*?) aus/ do
        set var appname to $0
    done
    if var statement_lower matches /^fuehr (.*?) aus/ do
        set var appname to $0
    done
    
    return var appname
done

define action check_sentence_for_weather with var input do
    if lc(var input) matches /wetter in ([^\s]+(?:\sin\s[^\s]+)?)/ do
        if $0 do
            print "I have to check the weather for " concat $0
            print new line
            do return with $0
        done
        else do
            print "I have to check the weather, but there is a bad syntax: " concat var input
            print new line
        done
    done
    else do
        print "I don't have to check the weather"
        print new line
    done
    
    do return with ''
done

define action check_for_weather with var place, var lang, var path do
    do chdir with var path
    do regex using var place: /\s+/, "\\s", :global
    do system with "curl -A \"Mozilla/5.0 (X11; U; Linux x86_64; de; rv:1.9.0.13) Gecko/2009080315 Ubuntu/9.04 (jaunty) IE/4.0\" -s -o weather.txt http://www.wetter.com/suche/?search=" concat var place concat "&search_type_weather=1&search_type_site=1"
    
    set new var pro_file_name to "./lang_" concat var lang concat "/weather.pro"
    set new var weather_pro_file to handle for file name var pro_file_name, write
    do close with var weather_pro_file
    
    set new var search_results to handle for file name "weather.txt", read
    for each new var line from var search_results do
        if var line matches /["]search_result["]/ do
            set new var url to var line
            do regex using var url: /^.*?http/, "http", :global
            do regex using var url: /html.*?$/, "html", :global
            print var url
            print new line
            
            set new var name to ''
            set new var temperature to ''
            set new var weather to ''
            
            do wait 2 seconds
            do system with "curl -A \"Mozilla/5.0 (X11; U; Linux x86_64; de; rv:1.9.0.13) Gecko/2009080315 Ubuntu/9.04 (jaunty) IE/4.0\" -s -o weather-city.txt " concat var url
            set new var city to handle for file name "weather-city.txt", read
            for each new var line from var city do
                if var line matches /me_switch me_active/ do
                    do regex using var line: /[<][^>]*?[>]/, "", :global
                    do regex using var line: /[&].*/, "", :global
                    do regex using var line: /[^a-zA-Z0-9, ]/, "", :global:i
                    do regex using var line: /,/, " in ", :global
                    if var line do
                        set var name to var line
                    done
                done
                if var line matches /fc_temper/ do
                    set var line to the next line from var city
                    if var line matches /temp_observe/ do
                        do regex using var line: /[<][^>]*?[>]/, "", :global
                        do regex using var line: /[&].*/, "", :global
                        do regex using var line: /[^a-zA-Z0-9,. ]/, "", :global:i
                        do regex using var line: /,/, " in ", :global
                        if var line do
                            set var temperature to var line
                            
                            print var line
                            print new line
                        done
                    done
                done
                if var line matches /fc_temper/ do
                    set var line to the next line from var city
                    do regex using var line: /[<][^>]*?[>]/, "", :global
                    do regex using var line: /[&].*/, "", :global
                    do regex using var line: /[^a-zA-Z0-9, ]/, "", :global:i
                    do regex using var line: /,/, " in ", :global
                    if var line do
                        set var weather to var line
                    done
                done
            done
            do close with var city
            
            set new var weather_pro_file to handle for file name var pro_file_name, append
            print into var weather_pro_file data "ist <> es <>  <> " concat var weather concat " in " concat var name concat " <> 50"
            print into var weather_pro_file data new line
            print into var weather_pro_file data "sind <> es <> " concat var temperature concat " grad celsius <> in " concat var name concat " <> 50"
            print into var weather_pro_file data new line
            print into var weather_pro_file data "sind <> es <> " concat var temperature concat " grad <> in " concat var name concat " <> 50"
            print into var weather_pro_file data new line
            print into var weather_pro_file data "ist <> die temperatur <> " concat var temperature concat " grad <> in " concat var name concat " <> 50"
            print into var weather_pro_file data new line
            print into var weather_pro_file data "ist <> das wetter <> " concat var weather concat " bei " concat var temperature concat " grad <> in " concat var name concat " <> 50"
            print into var weather_pro_file data new line
            print into var weather_pro_file data new line
            do close with var weather_pro_file

        done
    done
    do close with var search_results
    
    do reread_pro_file with var pro_file_name
    
    do return without arguments
done

define action replace_he with var text, var replacement do
    do regex using var text: /\s+?(er|ihn)\s+?/, " var replacement ", :global:i
    do return with var text
done

define action replace_she with var text, var replacement do
    do regex using var text: /\s+?(sie)\s+?/, " var replacement ", :global:i
    do return with var text
done

define action verb_category with var verb do
    if var verb matches /(muss)|(muessen)|(musst)|(muesse)|(muesste)|(musste)|(mussten)/ do
        do return with "must"
    done
    if var verb matches /(will)|(willst)|(wollte)|(wollten)|(wolltest)|(wolltet)/ do
        do return with "want"
    done
    if var verb matches /(kann)|(kannst)|(konnte)|(konntest)|(konnten)|(konntet)/ do
        do return with "can"
    done
    if var verb matches /(darf)|(darfst)|(dueftest)|(duerften)|(duerftet)|(duerfte)/ do
        do return with "may"
    done
    if var verb matches /(soll)|(sollst)|(sollen)|(solltest)|(solltet)|(sollte)/ do
        do return with "should"
    done
done

define action upper_case_correction with var phrase, hash tags, var lang, var path do
    set new array words to split with /\s+?/, var phrase
    
    for each new var word in array words do
        if not from hash tags item { var word } do
            set new var word_to_check to var word
            do regex using var word_to_check: /<[^a-zA-Z0-9]>/, "", :global:i
            set from hash tags item { var word } to compute_tags with var word_to_check, var lang, var path
        done
        if from hash tags item { var word } first item matches /n/ do
            set var word to ucfirst with var word
        done
    done
    
    set var phrase to join ' ', items of array words
    
    do return with var phrase
done

define action get_score_answer without arguments do
    return [ 0, "Bewertung erfolgreich." ]
done
