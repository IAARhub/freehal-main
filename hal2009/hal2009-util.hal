#
# This file is part of FreeHAL 2010.
#
# Copyright(c) 2006, 2007, 2008, 2009, 2010 Tobias Schulz and contributors.
# http://freehal.org
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

define action be_slow without arguments do
    if exists: "SLOW", end test do
        set new var be_slow__new_time to time without arguments
        set new var diff to var be_slow__new_time - var be_slow__last_time
        if var diff > 3 do
            set var diff to 3
        done
        if var diff >= 0.5 do
            print STDERR "Micro-managing freehal process: "
            print STDERR var diff
            print STDERR " cpu seconds were used."
            print STDERR new line
            
            set new var timeout to 25 * var diff
            set new var last_time to time without arguments
            while var timeout > 0 do
                do wait var timeout seconds
                
                set new var new_time to time without arguments
                set var timeout to var timeout - var new_time + var last_time
                set var last_time to var new_time
            done
            
            set var be_slow__last_time to time without arguments
        done
    done
done

# TEXT
# ~~~~~ CONFIG CODE ~~~~~
# CODE

define action check_config with var name, var default, var lang, var path do
    set new var file_name to "config.txt"

    set new var config_path to var path concat "/" concat var file_name
    set new var input_handle to handle for file name var config_path, read
    if not var input_handle do
        set var config_path to var path concat "/../" concat var file_name
        set var input_handle to handle for file name var config_path, read
    done
    if not var input_handle do
        set var config_path to var file_name
        set var input_handle to handle for file name var config_path, read
    done
    if not var input_handle do
        set var config_path to "../" concat var file_name
        set var input_handle to handle for file name var config_path, read
    done
    
    if var input_handle do
        for each new var line from var input_handle do
            if var line matches /var name\s*?<[=]>\s*?(.*?)\s*?$/ do
                set new var value to $0
                do regex using var value: /^\s+?/, "", :global
                do regex using var value: /\s+?$/, "", :global
                print var config_path concat ": " concat var name concat " = " concat var value
                print new line
                do return with var value
            done
        done
    done
    
    set new var output_handle to handle for file name var config_path, append
    if not var output_handle do
        set var config_path to var path concat "/" concat var file_name
        set var output_handle to handle for file name var config_path, append
    done
    if var output_handle do
        print into var output_handle data var name concat " = " concat var default concat new line
        do close with var output_handle
    done
    
    print var config_path concat ": " concat var name concat " = ???, default = " concat var default
    print new line
    do return with var default
done

define action make_ascii with var text is rw do
    do return with var text
done

define action join_items with array list do
    set new var txt to ''
    for each new var listitem in array list do
        set var txt to var txt concat " ("
        set var txt to var txt concat var listitem
        set var txt to var txt concat "), "
    done
    do return with var txt
done

define action escape_html with var text do
    do regex using var text: /<[<]>/, "&lt;", :global
    do regex using var text: /<[>]>/, "&gt;", :global
    
    do return with var text
done

