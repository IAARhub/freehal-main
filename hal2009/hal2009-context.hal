#
# This file is part of FreeHAL 2010.
#
# Copyright(c) 2006, 2007, 2008, 2009, 2010 Tobias Schulz and contributors.
# http://freehal.org
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

define action run_parser with var input, hash tags, var lang, var path do
    # TEXT
    # Make input parsable
    # CODE
    set var input to make_parsable with var input
    do regex with var input: /<[,]>\s/ -> " KOMMA " :global:i
    do regex with var input: /(\D)<[.]>/ -> "${1} DOT " :global:i
    do regex with var input: /\s+/ -> " " :global:i
    print "Parsable sentence(s): "
    print var input
    print new line
    
    set new hash genus_of to an empty hash

    set new array clauses_input to split with " KOMMA ", var input
    set new hash parsed to an empty hash
    for each new var clause in array clauses_input do
        # TEXT
        # Split the sentence.
        # CODE
        set new array list_of_words to split with " ", var clause
        
        # TEXT
        # Then compute the parts of speech etc.
        # CODE
        for each new var word in array list_of_words is rw do
            set from hash tags element { var word } to compute_tags with var word, var lang, var path
            set from hash genus_of element { lc(var word) } to from hash tags element { var word } 1st element
        end for
        
        set new array list_of_list_of_words to pre_parse with array list_of_words, hash tags, var lang, var path
        
        for each new array words in array list_of_list_of_words is rw do
            # TEXT
            # Then toggle the identities (user <-> machine).
            # CODE
            if is an empty hash parsed do
        
                do be_slow without arguments
                set new array data to input_data_for_bottom_up_parser with array words, hash tags, var lang, var path
                do be_slow without arguments
                set hash parsed to new_parser_start with global array grammar, array data, var lang, var path
                do be_slow without arguments
                if hash parsed is false do
                    set hash parsed to parse with var lang, array words, hash tags
                done
                do be_slow without arguments
        
                set new array entities to an empty array
                push into array entities, elements of that array: from hash parsed element { 'subjects' } end of elements
                push into array entities, elements of that array: from hash parsed element { 'objects' } end of elements
                set from hash parsed element { 'verbs' } to toggle_verbs using from hash parsed element { 'verbs' }, array entities
                set from hash parsed element { 'subjects' } to toggle_entities using from hash parsed element { 'subjects' }
                set from hash parsed element { 'objects' } to toggle_entities using from hash parsed element { 'objects' }
                set from hash parsed element { 'adverbs' } to toggle_entities using from hash parsed element { 'adverbs' }
                set from hash parsed element { 'extra' } to toggle_entities using from hash parsed element { 'extra' }
                set from hash parsed element { 'clauses' } to an empty array
            done
            else do
        
                do be_slow without arguments
                set new array data to input_data_for_bottom_up_parser with array words, hash tags, var lang, var path
                do be_slow without arguments
                set new hash parsed_clause to new_parser_start with global array grammar, array data, var lang, var path
                do be_slow without arguments
                if hash parsed_clause is false do
                    set hash parsed_clause to parse with var lang, array words, hash tags
                done
                do be_slow without arguments
        
                set new array entities to an empty array
                push into array entities, elements of that array: from hash parsed_clause element { 'subjects' } end of elements
                push into array entities, elements of that array: from hash parsed_clause element { 'objects' } end of elements
                set from hash parsed_clause element { 'verbs' } to toggle_verbs using from hash parsed_clause element { 'verbs' }, array entities
                set from hash parsed_clause element { 'subjects' } to toggle_entities using from hash parsed_clause element { 'subjects' }
                set from hash parsed_clause element { 'objects' } to toggle_entities using from hash parsed_clause element { 'objects' }
                set from hash parsed_clause element { 'adverbs' } to toggle_entities using from hash parsed_clause element { 'adverbs' }
                set from hash parsed_clause element { 'extra' } to toggle_entities using from hash parsed_clause element { 'extra' }
                set from hash parsed_clause element { 'clauses' } to an empty array
                push into that array: from hash parsed element { 'clauses' }, hash parsed_clause
            done
        done
    done
    
    # TEXT
    # Save male and female substantives
    # CODE
    
    set new array copy_subjects to from hash parsed element { 'subjects' }
    set new var genus_subject to 'q'
    set new var subject to ''
    for each new array arr in array copy_subjects do
        if var subject do
            set var subject to var subject concat ' '
        done
        set var subject to var subject concat join " ", elements of array arr
        
        if from hash genus_of element { lc(join " ", elements of array arr) } matches /m|f/ do
            set var genus_subject to from hash genus_of element { lc(join " ", elements of array arr) }
        done
        set new var is_a_name to is_name with lc(join " ", elements of array arr)
        if var is_a_name matches "m" do
            set var genus_subject to 'm'
        done
    done

    set new array copy_objects to from hash parsed element { 'objects' }
    set new var genus_object to 'q'
    set new var object to ''
    for each new array arr in array copy_objects do
        if var object do
            set var object to var object concat ' '
        done
        set var object to var object concat join " ", elements of array arr
        
        if from hash genus_of element { lc(join " ", elements of array arr) } matches /m|f/ do
            set var genus_object to from hash genus_of element { lc(join " ", elements of array arr) }
        done
        set new var is_a_name to is_name with lc(join " ", elements of array arr)
        if var is_a_name matches "m" do
            set var genus_subject to 'm'
        done
    done
    
    print "genus of subject: ", var genus_subject, new line
    print "genus of object:  ", var genus_object,  new line
    
    if var subject matches /^(er|sie|es|ihn|ihm|ihr)$/ do
        set var subject to ''
    done
    if var object matches /^(er|sie|es|ihn|ihm|ihr)$/ do
        set var object to ''
    done
    
    set new var male_file to handle for file name var path concat '/lang_' concat var lang concat '/male.history', append
    if var genus_subject matches "m" and var subject do
        print into var male_file data var subject
        print into var male_file data new line
    done
    if var genus_object matches "m" and var object do
        print into var male_file data var object
        print into var male_file data new line
    done
    do close with var male_file
    
    set new var female_file to handle for file name var path concat '/lang_' concat var lang concat '/female.history', append
    if var genus_subject matches "f" and var subject do
        print into var female_file data var subject
        print into var female_file data new line
    done
    if var genus_object matches "f" and var object do
        print into var female_file data var object
        print into var female_file data new line
    done
    do close with var female_file
    
    do return with hash parsed
done

define action decide_save_input with var input, var mode, var lang, var path do
    set new flag save_input to 0
    if var mode matches "statement" do
        set flag save_input to 1
    done
    if var mode matches "learn" do
        set flag save_input to 1
    done
    if lc(var input) matches /^\/save / do
        set flag save_input to 1
    done
    
    do return with flag save_input
done

define action use_mode with var input is copy, array facts_to_save, hash tags, var mode, var lang, var path do
    do regex with var input: /(<[.!?]>)/ -> "" :global
    set new flag save_input to decide_save_input with var input, var mode, var lang, var path
    do regex with var input: /^\/save / -> "" :global:i
    
    # TEXT
    # --- WITHOUT LOGIC
    # CODE
    
    # greeting
    set new flag is_a_greeting to check_for_greeting using var input
    if flag is_a_greeting do
        set new var greeting to greet with ''
        do return with [ var greeting ]
    done
    
    # thanks
    set new flag is_a_thanks to check_for_thanks using var input
    if flag is_a_thanks do
        set new var thanks to say_answer_thanks with ''
        do return with [ var thanks ]
    done
    
    # math
    set new flag is_math to check_for_math using var input
    if flag is_math do
        do return with [ flag is_math ]
    done
    
    # weather
    set new var place to check_sentence_for_weather with var input
    if var place do
        do check_for_weather with var place, var lang, var path
    done

    # TEXT
    # --- LOGIC
    # CODE
    
    set new hash parsed to run_parser with var input, hash tags, var lang, var path
    

    set new array results to an empty array
    if var mode matches "question" do
        set array results to logic with var input, var lang, var path, hash parsed
    
        if array results matches "TOOMUCH" do
            set new array standard_phrases to phrases_error_toomuch without arguments
            do return with array standard_phrases
        done
        
        set new flag bug_feature to but_feature_is_useful with var input
        if flag bug_feature do
            set array results to use_bug_feature with array results, hash parsed
        done
    
        if not elements of array results do
            set new flag use_reasonof to check_reasonof using var input, hash parsed, var lang, var path
            if flag use_reasonof is true do
                set new array results_reasonof to feature_reasonof with var input, hash parsed, var lang, var path
                if elements of array results_reasonof do
                    push into array results, elements of array results_reasonof
                done
            done
        done
    done
    
    if var mode matches "statement" do
        set array results to logic with var input, var lang, var path, hash parsed
        set new array results_reasonof to feature_reasonof with var input, hash parsed, var lang, var path
        
        if array results matches "TOOMUCH" do
            if elements of array results_reasonof do
                set array results to an empty array
            done
            else do
                set new array standard_phrases to phrases_error_toomuch without arguments
                do return with array standard_phrases
            done
        done
    
        push into array results, elements of array results_reasonof
    done
    
    # save input
    
    if flag save_input is true do
        push into array facts_to_save, hash parsed
    done
    
    # choose the best facts and phrase
    
    set array results to sort_out_best with array results, var mode, hash parsed
    set new array phrases to phrase with var lang, var path, var mode, array results, hash parsed
    
    do return with array phrases
done

define action sort_out_best with array results, var mode, hash parsed do
    set new array results_proper to an empty array
    set new array results_variable_answer to an empty array
    set new array results_important to an empty array

    for each new array result in array results do
        set new var primary_key to shift with elements of array result
        
        for each new array clause in array result do
            if lc( from array clause 2nd element ) matches /(00000)/ do
                go to next
            done
            if lc( from array clause 3rd element ) matches /(00000)/ do
                go to next
            done
            if lc( from array clause 2nd element ) matches /(50|0\.0|1\.0|100)/ and length( from array clause 2nd element ) < 5 do
                go to next
            done
            if lc( from array clause 3rd element ) matches /(50|0\.0|1\.0|100)/ and length( from array clause 3rd element ) < 5 do
                go to next
            done
            if lc( from array clause 4th element ) matches /(50|0\.0|1\.0|100)/ and length( from array clause 4th element ) < 5 do
                go to next
            done
        done
    
        set new flag is_proper to 1
        set new flag is_important to 0
        for each new array clause in array result do
            set new array sentence to an empty array

            # TEXT
            # Look at the verbs. Do they contain "=>"? Verbs with "=>" would only be used if no other verbs are there.
            # CODE
            set new array raw_verbs to [ split ' ', from array clause 1st element ]
            set new var symbol to "=>"
            for each new var verb in array raw_verbs do
                if var verb matches /var symbol/ do
                    set flag is_proper to 0
                done
            done
            
            if lc( from array clause 3rd element ) matches /freehal/ do
                if lc( from hash parsed element { 'questionword' } 1st element 1st element ) matches /wer|who/ do
                    set flag is_important to 1
                done
            done
        done
        
        do unshift with elements of array result, var primary_key
        
        # TEXT
        # It is an important fact, for example "I am FreeHAL", because it contains "freehal"
        if flag is_important do
            push into array results_important, array result
        done
        
        # TEXT
        # Result is a proper result.
        # CODE
        if flag is_proper do
            push into array results_proper, array result
        done
        # TEXT
        # Result is no proper result.
        # CODE
        else do
            push into array results_variable_answer, array result
        done
    done
    
    set new array questionword_array to from hash parsed element { 'questionword' } 1st element
    # TEXT
    # First, prefer important answers
    # CODE
    if is not an empty array results_important do
        print "There are important sentences."
        print new line
        return array results_important
    done
    else do
        print "There are not any important sentences."
        print new line
    done
    # TEXT
    # If there is no questionword, prefer proper answers
    # CODE
    if not from array questionword_array 1st element do
        if is an empty array results_variable_answer or (elements of array results_variable_answer)+50 < (elements of array results_proper) do
            print "-> results_proper (1): " concat elements of array results_proper concat " <-> " concat elements of array results_variable_answer concat " = " concat elements of array results
            print new line
            do return with array results_proper
        done
        else do
            print "-> results_variable_answer (2): " concat elements of array results_variable_answer concat " <-> " concat elements of array results_proper concat " = " concat elements of array results
            print new line
            do return with array results_variable_answer
        done
    done
    else do
        if is an empty array results_proper do
            print "-> results_variable_answer (1): " concat elements of array results_variable_answer concat " <-> " concat elements of array results_proper concat " = " concat elements of array results
            print new line
            do return with array results_variable_answer
        done
        else do
            print "-> results_proper (2): " concat elements of array results_proper concat " <-> " concat elements of array results_variable_answer concat " = " concat elements of array results
            print new line
            do return with array results_proper
        done
    done
done



