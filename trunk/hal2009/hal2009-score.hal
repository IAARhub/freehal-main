#
# This file is part of FreeHAL 2012.
#
# Copyright(c) 2006, 2007, 2008, 2009, 2010, 2011, 2012 Tobias Schulz and contributors.
# http://www.freehal.org
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

# ~~~~~ SCORE CODE ~~~~~

define action check_score_command with var possible_score, var lang, var path do
    if var possible_score matches /^\/SCORE\s+?(<[-+0-9]>+)\s+?(.*?)$/ do
        set new var plusminus to $0
        set new var output to $1

        set new var input_handle to handle for file name var path concat '/lang_' concat var lang concat '/input.history', read
        set new var last_input to ''
        for each new var line from var input_handle do
            set var last_input to var line
        done
        set new array words to split with " ", var last_input

        do return with [ $0, array words, var output ]
    done
    do return with 0
done

define action check_score with var possible_score do
    set new var output_num to 0
    if var possible_score matches /^(<[0-9]>+)\s?/ do
        set var output_num to $0
        print "( Output number: " concat var output_num concat " ) "
        do regex with var possible_score: /^<[0-9]>+\s?/ -> "" :global
    done

    if not var possible_score matches /[a-zA-Z]/ do
        if var possible_score matches /[+]/ do
            do return with [ var output_num, 5 ]
        done
        if var possible_score matches /[+][+]/ do
            do return with [ var output_num, 20 ]
        done
        if var possible_score matches /[+][+][+]/ do
            do return with [ var output_num, 50 ]
        done
        if var possible_score matches /[+][+][+][+]/ do
            do return with [ var output_num, 800 ]
        done
        if var possible_score matches '-' do
            do return with [ var output_num, -5 ]
        done
        if var possible_score matches '--' do
            do return with [ var output_num, -20 ]
        done
        if var possible_score matches '---' do
            do return with [ var output_num, -50 ]
        done
        if var possible_score matches '----' do
            do return with [ var output_num, -800 ]
        done
    done

    do return with [ var output_num, undef ]
done

define action set_score with array words, var sentence, var score, var lang, var path do
    set new var output_file_name to var path concat '/lang_' concat var lang concat '/index_of_combination.cfg'
    set new var output_handle to handle for file name var output_file_name, append

    for each new var word in array words do
        print into var output_handle data '[' concat var word concat ']'
        print into var output_handle data new line
        print into var output_handle data var sentence
        print into var output_handle data ": "
        print into var output_handle data var score
        print into var output_handle data new line
    done

    do close with var output_handle
done

define action set_score_for_last with var score, var lang, var path do
    set new var input_handle to handle for file name var path concat '/lang_' concat var lang concat '/output.history', read
    set new var last_output to ''
    for each new var line from var input_handle do
        set var last_output to var line
    done

    set var input_handle to handle for file name var path concat '/lang_' concat var lang concat '/input.history', read
    set new var last_input to ''
    for each new var line from var input_handle do
        set var last_input to var line
    done

    set new array words to split with " ", var last_input

    if var last_output do
        do set_score with array words, var last_output, var score, var lang, var path
    done
done

define action set_score_for_num with var score, var num, var lang, var path do
    print "Search output no "
    print var num
    print new line

    set new var score_answer to get_score_answer without arguments

    set new var input_handle to handle for file name var path concat '/lang_' concat var lang concat '/output.history', read
    set new array last_output to an empty array
    for each new var line from var input_handle do
        if var line matches /var score_answer/ do
            go to next
        done

        push into array last_output, var line
        if elements of array last_output > var num - 1 do
            do shift with elements of array last_output
        done
    done

    set var input_handle to handle for file name var path concat '/lang_' concat var lang concat '/input.history', read
    set new var last_input to ''
    for each new var line from var input_handle do
        set var last_input to var line
    done

    set new array words to split with " ", var last_input

    if var last_output do
        do set_score with array words, from array last_output 1st element, var score, var lang, var path
    done
done

set new hash content_of_score_file to an empty hash

define action get_score with array words, var sentence, var lang, var path do
    set new array maybe_is_score to check_score with var sentence
    if array maybe_is_score and from array maybe_is_score 2nd element do
        return 0
    done

    if is an empty hash content_of_score_file do
        set new var input_file_name to var path concat '/lang_' concat var lang concat '/index_of_combination.cfg'
        set new var input_handle to handle for file name var input_file_name, read
        set new var last_word to ""
        for each new var line from var input_handle do
            set var line to lc with var line
            do regex with var line: /<[?]>|<[!.,+]>|<[\s\r\n]>+?/ -> "" :global
            if var line matches /[\[]/ do
                set var last_word to var line
            done
            else do
                push into that array: from hash content_of_score_file element { var last_word }, var line
            done
        done
        do close with var input_handle
    done

    set var sentence to lc with var sentence
    do regex with var sentence: /<[?]>|<[!.,\-]>|\s/ -> "" :global
    do regex with var sentence: /(<[)(+-]>)/ -> "\\$0" :global
    set new var sum to 1
    set new var num_words to elements of array words
    set new var index_of_this_word to -1
    for each new var word in array words do

        set var index_of_this_word to var index_of_this_word + 1

        if from hash content_of_score_file element { "[var word]" } do
            set new var line_no to -1
            set new var size to size of that array: from hash content_of_score_file element { "[var word]" } end of elements
            do regex with var word: /<[?]>|<[!.,\-]>/ -> "" :global

            while var line_no < var size do
                set var line_no to var line_no + 1

                set new var line_2 to from hash content_of_score_file element { "[var word]" } element [ var line_no ]

                if var line_2 matches "" do
                    go to next
                done
                if var line_2 matches /var sentence/ do
                    set new array parts to split with ":", var line_2
                    set new var score_here to from array parts 2nd element
                    do regex with var score_here: /\s/ -> "" :global
#                    print "score: " concat var score_here concat new line

                    if (0+var score_here) > -1 do
                        if var score_here > 5000 do
                            go to last
                        done

                        set var sum to var sum + (100/(var index_of_this_word+1))*var score_here*(10/var sum) + 1
                    done
                done
            done
        done
    done

    if var num_words < 1 do
        set var num_words to 1
    done


    if var sentence matches /\(<[+]><[+]><[+]>\)/ do
        set var sum to var sum + 100 * var num_words
    done
    if var sentence matches /\(<[+]><[+]>\)/ do
        set var sum to var sum + 70 * var num_words
    done
    if var sentence matches /\(<[+]>\)/ do
        set var sum to var sum + 40 * var num_words
    done
    if var sentence matches /\(<[-]><[-]><[-]>\)/ do
        set var sum to var sum - 100 * var num_words
    done
    if var sentence matches /\(<[-]><[-]>\)/ do
        set var sum to var sum - 70 * var num_words
    done
    if var sentence matches /\(<[-]>\)/ do
        set var sum to var sum - 40 * var num_words
    done

    set var sum to (var sum + 1) / var num_words
    if var sum < 1 do
        set var sum to 1
    done

    do return with var sum
done

